{
  "uri" : "sig2010a-a150-shalom_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2010a/a150-shalom_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Cone Carving for Surface Reconstruction",
    "published" : "2010",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Shy-Shalom",
      "name" : "Shy",
      "surname" : "Shalom"
    }, {
      "uri" : "http://drinventor/Ariel-Shamir",
      "name" : "Ariel",
      "surname" : "Shamir"
    }, {
      "uri" : "http://drinventor/Hao Zhang-null",
      "name" : "Hao Zhang",
      "surname" : null
    }, {
      "uri" : "http://drinventor/Daniel-Cohen-Or",
      "name" : "Daniel",
      "surname" : "Cohen-Or"
    } ]
  },
  "bagOfWords" : [ "we", "present", "cone", "carve", "novel", "space", "carve", "technique", "support", "topologically", "correct", "surface", "reconstruction", "from", "incomplete", "scanned", "point", "cloud", "technique", "utilize", "point", "sample", "only", "local", "surface", "position", "estimation", "also", "obtain", "global", "visibility", "information", "under", "assumption", "each", "acquire", "point", "visible", "from", "point", "lie", "outside", "shape", "enable", "associate", "each", "point", "generalize", "cone", "call", "visibility", "cone", "carve", "portion", "outside", "ambient", "space", "shape", "from", "inside", "out", "we", "demonstrate", "utility", "cone", "carve", "cope", "significant", "miss", "datum", "raw", "scan", "from", "commercial", "3d", "scanner", "well", "synthetic", "input", "give", "set", "3d", "point", "acquire", "scanning", "device", "goal", "construct", "2d", "watertight", "surface", "embed", "3d", "which", "approximate", "scan", "shape", "closely", "possible", "from", "its", "global", "topology", "down", "finer", "geometric", "detail", "apart", "from", "noise", "most", "common", "difficulty", "scan", "point", "cloud", "existence", "hole", "datum", "area", "shape", "be", "properly", "acquire", "hard", "reach", "cavity", "object", "place", "where", "object", "part", "too", "close", "each", "other", "impose", "serious", "adverse", "effect", "quality", "reconstruction", "particularly", "term", "its", "topology", "however", "major", "problem", "use", "dipole", "point", "surface", "reconstruction", "occur", "over", "area", "sparse", "missing", "datum", "without", "sufficient", "point", "sampling", "one", "can", "define", "dipole", "point", "reliably", "more", "often", "than", "lead", "topological", "geometric", "reconstruction", "error", "e.g.", "see", "Figure", "-lrb-", "middle", "-rrb-", "while", "previous", "algorithm", "have", "effectively", "use", "blending", "positional", "information", "point", "paper", "we", "utilize", "blending", "global", "visibility", "information", "well", "we", "assume", "scan", "surface", "perform", "way", "each", "acquire", "sample", "visible", "from", "point", "outside", "shape", "we", "call", "direction", "ray", "outward", "direction", "rather", "weak", "realistic", "assumption", "since", "most", "optical", "scanner", "under", "typical", "acquisition", "setting", "outward", "direction", "already", "know", "each", "sample", "point", "direction", "from", "point", "scanner", "head", "position", "moment", "capture", "use", "outward", "direction", "we", "convert", "each", "sample", "point", "visibility", "cone", "apex", "point", "-lrb-", "see", "Figure", "-rrb-", "cone", "assume", "exterior", "underlie", "shape", "key", "idea", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "cone", "extend", "beyond", "direct", "outward", "direction", "carve", "out", "outside", "space", "therefore", "carry", "global", "visibility", "information", "can", "use", "define", "more", "reliable", "distance", "measure", "shape", "near", "region", "sparse", "input", "datum", "ideal", "visibility", "cone", "would", "one", "extrude", "from", "along", "silhouette", "view", "from", "show", "figure", "union", "all", "visibility", "cone", "from", "provide", "virtual", "carve", "ambient", "3d", "space", "around", "underlie", "shape", "set", "visibility", "cone", "collectively", "carry", "global", "information", "about", "shape", "offer", "robust", "indicator", "outside", "relation", "respect", "specifically", "near", "region", "sparse", "datum", "cavity", "practical", "challenge", "create", "cone", "discrete", "setting", "also", "include", "construction", "approximate", "3d", "visibility", "cone", "base", "point", "cloud", "blending", "combine", "local", "positional", "global", "visibility", "information", "more", "effective", "surface", "reconstruction", "show", "figure", "11", "moreover", "case", "similar", "Figure", "VRIP", "algorithm", "would", "need", "place", "backdrop", "surface", "while", "scanning", "recover", "inner", "part", "cylinder", "space", "carve", "also", "use", "reconstruct", "3d", "shape", "use", "image", "take", "from", "multiple", "view", "-lsb-", "kutulako", "Seitz", "2000", "Montenegro", "et", "al.", "2004", "Nitschke", "et", "al.", "2007", "-rsb-", "however", "implementation", "algorithm", "real", "world", "set", "use", "point", "cloud", "explore", "general", "reconstruct", "surface", "from", "scan", "unstructured", "point", "cloud", "widely", "regard", "difficult", "ill-posed", "problem", "significant", "miss", "datum", "Delaunay", "tetrahedralization", "may", "contain", "any", "sub-complex", "proper", "surface", "reconstruction", "see", "Figure", "-lrb-", "-rrb-", "however", "presence", "large", "hole", "close-by", "surface", "sheet", "approach", "typically", "produce", "topological", "geometric", "error", "one", "can", "try", "identify", "surface", "boundary", "-lsb-", "Dey", "et", "al.", "2009", "-rsb-", "utilize", "hole-filling", "visibility", "information", "can", "also", "utilize", "volumetric", "diffusion", "-lsb-", "Davis", "et", "al.", "2002", "-rsb-", "we", "cone", "carve", "technique", "deal", "significant", "miss", "datum", "surface", "reconstruction", "while", "rely", "weaker", "more", "practical", "assumption", "existence", "outward", "direction", "each", "point", "sample", "some", "commercial", "product", "software", "bundle", "Polhemus", "FastSCAN", "scanner", "-lsb-", "aranz", "2009", "-rsb-", "know", "use", "information", "some", "extent", "usually", "only", "coarse", "task", "determine", "correct", "sign", "normal", "vector", "boundary", "line", "closely", "parallel", "scanning", "direction", "likely", "suffer", "from", "sparse", "sampling", "result", "large", "hole", "since", "grazing", "angle", "which", "scanner", "beam", "hit", "shape", "boundary", "too", "shallow", "do", "reflect", "light", "properly", "let", "we", "recall", "collection", "visibility", "cone", "serve", "carve", "out", "exterior", "outside", "space", "respect", "underlie", "shape", "indeed", "while", "any", "point", "inside", "visibility", "cone", "should", "assume", "outside", "underlie", "shape", "point", "outside", "all", "visibility", "cone", "should", "assume", "inside", "thus", "key", "situation", "where", "DTE", "distance", "should", "choose", "over", "dp", "distance", "region", "which", "dp", "distance", "incorrectly", "indicate", "inside", "shape", "illustrate", "right", "Figure", "we", "denote", "difference", "between", "dp", "-lrb-", "-rrb-", "DTE", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "dp", "-lrb-", "-rrb-", "DTE", "-lrb-", "-rrb-", "examine", "scalar", "field", "-lrb-", "-rrb-", "show", "Figure", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "??", "occur", "when", "DTE", "distance", "place", "point", "significantly", "towards", "inside", "shape", "see", "left", "Figure", "instead", "we", "employ", "view-dependent", "blending", "point", "cloud", "use", "splat", "-lsb-", "Westover", "1990", "Pfister", "et", "al.", "2000", "-rsb-", "from", "perspective", "each", "point", "p.", "View", "dependent", "blend", "we", "extend", "definition", "3d", "cone", "exclude", "just", "point", "from", "data-set", "neighborhood", "size", "around", "each", "point", "we", "use", "adaptive", "neighborhood", "size", "splat", "size", "each", "render", "point", "depend", "its", "distance", "center", "projection", "p.", "construct", "approximation", "ideal", "visibility", "cone", "point", "we", "perform", "two", "pass", "render", "similar", "setup", "second", "rendering", "pass", "we", "use", "size", "splat", "size", "each", "point", "trace", "cone", "silhouette", "view-dependent", "point-splat", "image", "point", "set", "single", "render", "pass", "result", "six", "square", "image", "each", "create", "perspective", "projection", "90", "field", "view", "point", "direction", "major", "axis", "center", "render", "setup", "similar", "radiosity", "hemi-cube", "method", "-lsb-", "Cohen", "Greenberg", "1985", "-rsb-", "commonly", "use", "calculate", "form-factor", "difference", "we", "render", "full", "6-sided", "cube", "instead", "5-sided", "hemi-cube", "see", "Figure", "Splat", "size", "purpose", "first", "rendering", "pass", "determine", "adaptive", "splat", "size", "every", "render", "point", "can", "see", "reconstruct", "complete", "surface", "image", "space", "use", "k-nearest", "neighbor", "kernel", "function", "around", "each", "point", "we", "camera", "position", "point", "all", "other", "point", "point", "set", "render", "cube", "single", "pixel", "unique", "color", "hence", "can", "uniquely", "identify", "point", "exclude", "from", "second", "rendering", "step", "since", "do", "contribute", "desire", "shape", "silhouette", "trace", "begin", "point", "know", "edge", "proceed", "clockwise", "path", "along", "silhouette", "still", "robust", "blending", "DTE", "distance", "alleviate", "inaccuracy", "we", "explain", "next", "section", "distance", "value", "positive", "point", "inside", "shape", "negative", "point", "outside", "its", "magnitude", "can", "perceive", "shortest", "distance", "from", "offsurface", "point", "surface", "reconstruct", "other", "word", "point", "inside", "union", "visibility", "cone", "guarantee", "outside", "underlie", "shape", "hence", "computation", "DTE", "distance", "need", "more", "elaborate", "recall", "DTE", "intend", "represent", "distance", "from", "point", "ambient", "space", "surface", "underlie", "shape", "without", "know", "actual", "shape", "we", "approximate", "its", "surface", "lower", "envelop", "which", "boundary", "union", "3d", "visibility", "cone", "one", "solution", "would", "blend", "cone", "represent", "more", "robust", "lower", "envelope", "E.", "however", "geometric", "complexity", "lower", "envelope", "3d", "prohibit", "construct", "explicitly", "inside", "outside", "cone", "determine", "observe", "orientation", "closest", "face", "use", "appropriate", "normal", "compute", "apex", "cone", "-lsb-", "baerentzen", "aanaes", "2005", "-rsb-", "definition", "must", "lie", "outside", "each", "visibility", "cone", "since", "outside", "we", "must", "have", "dtc", "-lrb-", "-rrb-", "DTE", "-lrb-", "-rrb-", "therefore", "we", "must", "have", "DTE", "-lrb-", "-rrb-", "dtc", "-lrb-", "-rrb-", "other", "case", "projection", "may", "along", "edge", "cone", "may", "apex", "cone", "therefore", "we", "employ", "two-stage", "approach", "use", "histogram", "search", "minimum", "while", "blend", "3d", "position", "instead", "distance", "use", "clustering", "-lrb-", "see", "Figure", "-rrb-" ],
  "content" : "We present cone carving, a novel space carving technique supporting topologically correct surface reconstruction from an incomplete scanned point cloud. The technique utilizes the point samples not only for local surface position estimation but also to obtain global visibility information under the assumption that each acquired point is visible from a point lying outside the shape. This enables associating each point with a generalized cone, called the visibility cone, that carves a portion of the outside ambient space of the shape from the inside out. We demonstrate the utility of cone carving in coping with significant missing data and raw scans from a commercial 3D scanner as well as synthetic input. Given a set of 3D points acquired by a scanning device, the goal is to construct a 2D watertight surface embedded in 3D which approximates the scanned shape as closely as possible, from its global topology down to the finer geometric details. Apart from noise, the most common difficulty with scanned point clouds is the existence of holes in the data: areas of the shape that were not properly acquired. hard to reach cavities of the object, or places where object parts are too close to each other. These impose serious adverse effects on the quality of the reconstruction, particularly in terms of its topology. However, a major problem with using dipole points for surface reconstruction occurs over areas with sparse or missing data. Without sufficient point sampling, one cannot define the dipole points reliably. More often than not, this leads to topological or geometric reconstruction errors, e.g., see Figure 1 (middle). While previous algorithms have effectively used blending of the positional information of points, in this paper we utilize blending of global visibility information as well. We assume that the scan of the surface is performed in such a way that each acquired sample is visible from a point outside the shape. We call the direction of this ray the outward direction. This is a rather weak and realistic assumption since for most optical scanners and under typical acquisition settings, an outward direction is already known for each sample point ? it is the direction from the point to the scanner head position at the moment of the capture. Using the outward direction we convert each sample point to a visibility cone apexed at the point (see Figure 2 ). These cones are assumed to be exterior to the underlying shape. The key idea is that (a) (b) (c) such cones extend beyond the direct outward direction, carve out the outside space and therefore, carry global visibility information that can be used to define a more reliable distance measure to the shape near regions with sparse input data. The ideal visibility cone at p would be one that is extruded from p along the silhouette of S as viewed from p, as shown in Figure 2 . The union of all the visibility cones from P provides a virtual carving of the ambient 3D space around the underlying shape S. The set of visibility cones collectively carry global information about the shape and offers a robust indicator of outside relations with respect to S, specifically near regions of sparse data and cavities. The practical challenges of creating the cones in the discrete setting also include the construction of approximate 3D visibility cones based on the point cloud P . These blendings combine local positional and global visibility information for more effective surface reconstruction as shown in Figures 1 and 11. Moreover, in cases similar to Figure 1 , the VRIP algorithm would need to place a ?backdrop? surface while scanning to recover the inner part of the cylinder. Space carving is also used for reconstructing a 3D shape using images taken from multiple views [Kutulakos and Seitz 2000; Montenegro et al. 2004; Nitschke et al. 2007]. However, an implementation of this algorithm in a real world setting using point clouds was not explored. In general, reconstructing a surface from a scanned, unstructured point cloud is widely regarded as a difficult and ill-posed problem. With significant missing data, the Delaunay tetrahedralization may not contain any sub-complex that is a proper surface reconstruction; see Figure 4(b) . However, in the presence of large holes or close-by surface sheets, these approaches typically produce topological or geometric errors. One can try and identify these as surface boundaries [Dey et al. 2009], or utilize hole-filling. Visibility information can also be utilized by volumetric diffusion [Davis et al. 2002]. Our cone carving technique deals with significant missing data in surface reconstruction while relying on a weaker and more practical assumption: the existence of an outward direction at each point sample. Some commercial products, such as the software bundled with the Polhemus FastSCAN scanner [Aranz 2009], are known to use this information to some extent ? but usually only for coarse tasks such as determining the correct sign of normal vectors. Boundary lines that are closely parallel to the scanning direction are likely to suffer from sparse sampling and result in large holes since the grazing angle in which the scanner beam hits the shape boundary is too shallow and does not reflect light properly. Let us recall that the collection of visibility cones serve to carve out the exterior or outside space with respect to the underlying shape. Indeed, while any point inside a visibility cone should be assumed to be outside the underlying shape, a point outside all visibility cones should not be assumed to be inside. Thus the key situation where the DTE distance should be chosen over the DP distance is at a region which the DP distance incorrectly indicates to be inside the shape ? this is illustrated at the right of Figure 5 . We denote the difference between DP (s) and DTE (s) as ?(s) = DP (s) ? DTE (s) and examine the scalar field ?(s), as shown in Figure 4(i) . ? ?(s) < ?? : This occurs when the DTE distance ?places? the point s significantly towards the inside of the shape; see left of Figure 5 . Instead, we employ a view-dependent blending of the point cloud using splatting [Westover 1990; Pfister et al. 2000] from the perspective of each point p. View dependent blending We extend the definition of a 3D cone to exclude not just points from the data-set, but neighborhoods of size ? around each point. We use an adaptive neighborhood size ? as the splat size of each rendered point, depending on its distance to the center of projection p. To construct the approximation of an ideal visibility cone of a point p, we perform two passes of rendering with a similar setup. In the second rendering pass, we use this size as the splat size for each point and trace the cone silhouette on the view-dependent point-splat image of the point set. A single rendering pass results in six square images, each created by a perspective projection with a 90 ? field of view, pointed in the directions of a major axis and centered at p. This rendering setup is similar to the radiosity hemi-cube method [Cohen and Greenberg 1985] commonly used for calculating form-factors, with the difference that we render a full 6-sided cube instead of a 5-sided Hemi-cube; see Figure 6 . Splat size The purpose of the first rendering pass is to determine the adaptive splat size for every rendered point. This can be seen as reconstructing a complete surface in image space using a k-nearest neighbor kernel function around each point. Our camera is positioned at point p and all other points in the point set are rendered on the cube as a single pixel with a unique color and hence can be uniquely identified. These points are excluded from the second rendering step since they do not contribute to the desired shape silhouette. The tracing begins at a point that is known to be on such an edge, and proceeds in a clockwise path along the silhouette. Still, the robust blending of the DTE distances alleviates such inaccuracies, as we will explain in the next section. The distance value is positive for points inside the shape and negative for points outside, and its magnitude can be perceived as the shortest distance from the offsurface point to the surface to be reconstructed. In other words, a point q inside the union of the visibility cones is not guaranteed to be outside the underlying shape. Hence the computation of the DTE distance needs to be more elaborate. Recall that DTE is intended to represent the distance from a point in the ambient space to the surface of the underlying shape. Without knowing the actual shape, we approximate its surface by the lower envelop E, which is the boundary of the union of the 3D visibility cones. One solution would be to blend the cones to represent a more robust lower envelope E. However, the geometric complexity of the lower envelope in 3D prohibits constructing it explicitly. s is inside or outside the cone is determined by observing the orientation of the closest face and by using an appropriate normal computed at the apex of the cone [Baerentzen and Aanaes 2005]. By definition, v must lie on or outside each visibility cone. Since v is on or outside C j , we must have  | DTC (s, C j )| ? ||s ? v|| = | DTE (s)|. Therefore, we must have DTE (s) ? ||s ? u|| = DTC (s, C j ). In other cases, the projection may be along an edge of the cone or may be the apex of the cone. Therefore, we employ a two-stage approach by using the histogram to search for the minimum, while blending 3D positions instead of distances using clustering (see Figure 9 ).",
  "resources" : [ ]
}