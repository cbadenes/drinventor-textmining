{
  "uri" : "sig2010a-a150-shalom_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2010a/a150-shalom_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Cone Carving for Surface Reconstruction",
    "published" : "2010",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Shy-Shalom",
      "name" : "Shy",
      "surname" : "Shalom"
    }, {
      "uri" : "http://drinventor/Ariel-Shamir",
      "name" : "Ariel",
      "surname" : "Shamir"
    }, {
      "uri" : "http://drinventor/Hao Zhang-null",
      "name" : "Hao Zhang",
      "surname" : null
    }, {
      "uri" : "http://drinventor/Daniel-Cohen-Or",
      "name" : "Daniel",
      "surname" : "Cohen-Or"
    } ]
  },
  "bagOfWords" : [ "cone", "collectively", "provide", "means", "better", "approximate", "sign", "distance", "shape", "specifically", "near", "region", "contain", "large", "hole", "scan", "allow", "one", "infer", "correct", "surface", "topology", "combine", "new", "distance", "measure", "conventional", "rbf", "we", "define", "implicit", "function", "whose", "zero", "level", "set", "define", "surface", "shape", "similar", "reason", "previous", "implicit", "surface", "reconstruction", "method", "can", "only", "fill", "hole", "smoothly", "information", "can", "effectively", "define", "sign", "distance", "function", "surface", "even", "region", "where", "sample", "datum", "miss", "we", "call", "boundary", "surface", "lower", "envelope", "set", "visibility", "cone", "view", "from", "insideout", "perspective", "ideal", "continuous", "setting", "when", "under", "visibility", "assumption", "lower", "envelope", "simply", "we", "discrete", "setting", "where", "we", "still", "utilize", "distance", "approximation", "distance", "we", "define", "new", "set", "off-surface", "point", "use", "approximate", "sign", "distance", "from", "point", "surface", "towards", "end", "we", "adopt", "imagebased", "approach", "exploit", "render", "speed", "capability", "GPU", "first", "local", "position", "sample", "point", "blended", "similar", "previous", "algorithm", "we", "technique", "do", "depend", "voxel", "resolution", "do", "need", "explicit", "knowledge", "scanner", "head?s", "location", "contrast", "we", "cone", "carry", "global", "visibility", "information", "successfully", "handle", "case", "furthermore", "outside", "space", "define", "carve", "out", "space", "use", "ray", "emanate", "from", "camera", "position", "towards", "object", "through", "its", "silhouette", "-lrb-", "figure", "-rrb-", "while", "we", "use", "inverse", "direction", "carve", "out", "cone", "originate", "each", "sample", "point", "cloud", "method", "however", "lim", "ite", "when", "face", "severe", "under-sampling", "non-uniform", "sampling", "Giesen", "et", "al.", "-lsb-", "2006", "-rsb-", "use", "ball", "adaptive", "radius", "deal", "non-uniform", "sampling", "however", "class", "method", "still", "only", "return", "sub-complex", "Delaunay", "tetrahedralization", "complicated", "scenario", "where", "purely", "local", "consideration", "point", "normal", "Voronoi", "construction", "insufficient", "infer", "shape", "correctly", "additional", "information", "assumption", "need", "several", "exist", "algorithm", "hole", "fill", "rely", "additional", "datum", "assumption", "multiple", "datum", "scan", "-lsb-", "Turk", "Levoy", "1994", "-rsb-", "template", "-lsb-", "Pauly", "et", "al.", "2005", "-rsb-", "specialize", "shape", "prior", "-lsb-", "Gal", "et", "al.", "2007", "Schnabel", "et", "al.", "2009", "Tagliasacchi", "et", "al.", "2009", "-rsb-", "when", "hole", "easy", "detect", "specify", "part", "input", "several", "approach", "can", "apply", "achieve", "high-quality", "surface", "completion", "include", "use", "smooth", "interpolant", "-lsb-", "sorkine", "cohen-or", "2004", "-rsb-", "self", "similarity", "shape", "-lsb-", "Sharf", "et", "al.", "2004", "-rsb-", "typically", "outward", "direction", "can", "return", "scanner", "head", "position", "which", "available", "from", "some", "brand", "laser", "scanner", "illustrate", "idea", "behind", "cone", "carve", "we", "first", "describe", "simplify", "version", "algorithm", "2d", "we", "input", "2d", "point", "set", "miss", "datum", "one", "show", "Figure", "-lrb-", "-rrb-", "which", "similar", "typical", "output", "range", "scan", "???", "shape", "Dipole", "distance", "distance", "lower", "envelope", "input", "point", "set", "give", "Figure", "-lrb-", "-rrb-", "standard", "reconstruction", "algorithm", "rbf", "-lsb-", "Carr", "et", "al.", "2001", "-rsb-", "would", "produce", "undesirable", "result", "convention", "sign", "distance", "take", "positive", "value", "when", "inside", "shape", "negative", "value", "when", "outside", "we", "can", "observe", "area", "where", "large", "gap", "between", "sample", "off-surface", "point", "create", "consequently", "interpolation", "produce", "smooth", "curve", "part", "zero", "level-set", "dp", "distance", "field", "which", "may", "give", "correct", "representation", "underlie", "shape", "one", "other", "hand", "cone", "carve", "algorithm", "use", "additional", "global", "visibility", "information", "result", "better", "implicit", "distance", "function", "infer", "shape", "boundary", "input", "point", "visibility", "cone", "2d", "largest", "sector", "can", "stretch", "from", "outward", "direction", "without", "contain", "any", "other", "input", "point", "show", "-lrb-", "-rrb-", "assumption", "base", "cone", "carve", "area", "inside", "visibility", "cone", "completely", "outside", "shape", "take", "advantage", "global", "visibility", "information", "we", "construct", "visibility", "cone", "each", "point", "input", "set", "union", "all", "cone", "serve", "approximation", "exterior", "ambient", "space", "around", "shape", "show", "-lrb-", "-rrb-", "hence", "we", "calculate", "ray", "from", "scanner", "head", "sweep", "radially", "much", "possible", "until", "hit", "other", "cloud", "point", "when", "direction", "unknown", "we", "assume", "cone", "sector", "largest", "opening", "angle", "one", "which", "contain", "outward", "direction", "hence", "we", "can", "search", "largest", "empty", "opening", "between", "two", "point", "view", "from", "construct", "visibility", "cone", "p.", "note", "assumption", "may", "always", "hold", "erroneous", "cone", "may", "create", "however", "practice", "situation", "rare", "do", "effect", "algorithm", "general", "because", "see", "later", "3d", "case", "individual", "visibility", "cone", "essentially", "blended", "statistically", "achieve", "robustness", "against", "potential", "error", "2d", "case", "each", "visibility", "cone", "assume", "particularly", "simple", "structure", "therefore", "we", "can", "explicitly", "construct", "lower", "envelope", "E.", "Next", "we", "define", "DTE", "Distance-to-Envelope", "shortest", "distance", "E.", "Figure", "-lrb-", "-rrb-", "show", "2d", "example", "plot", "DTE", "distance", "field", "convention", "sign", "distance", "take", "positive", "value", "when", "outside", "union", "visibility", "cone", "negative", "value", "when", "inside", "note", "choice", "sign", "consistent", "choice", "distance", "sign", "respect", "underlie", "shape", "choose", "between", "distance", "use", "quadtree", "subdivision", "ambient", "space", "-lrb-", "octree", "3d", "-rrb-", "we", "sample", "DTE", "field", "create", "cone-based", "off-surface", "point", "tree", "initialize", "uniform", "grid", "point", "subsequently", "subdivide", "cell", "contain", "sign", "transition", "DTE", "measure", "allow", "one", "sample", "distance", "field", "area", "sparse", "missing", "datum", "other", "hand", "area", "sufficiently", "dense", "input", "datum", "well", "cover", "dipole", "point", "imply", "dp", "distance", "field", "cone", "only", "reliable", "outside", "indicator", "we", "discrete", "setting", "gap", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "tate", "conjectured", "position", "boundary", "underlie", "shape", "either", "purple", "green", "-lrb-", "-rrb-", "same", "both", "situation", "when", "-lrb-", "-rrb-", "-lrb-", "right", "-rrb-", "where", "threshold", "DTE", "measure", "carve", "interior", "-lrb-", "positive", "sign", "-rrb-", "space", "indicate", "dp", "measure", "contrast", "when", "-lrb-", "-rrb-", "-lrb-", "left", "-rrb-", "dp", "take", "precedence", "over", "DTE", "between", "lower", "envelop", "actual", "boundary", "shape", "may", "appear", "see", "top", "cavity", "???", "Figure", "-lrb-", "-rrb-", "let", "dp", "-lrb-", "-rrb-", "DTE", "-lrb-", "-rrb-", "denote", "scalar", "value", "point", "ambient", "space", "give", "dp", "dte", "distance", "field", "respectively", "we", "differentiate", "between", "three", "possible", "case", "-lrb-", "-rrb-", "regard", "threshold", "value", "-lrb-", "-rrb-", "when", "two", "distance", "similar", "we", "choose", "dp", "distance", "since", "tend", "more", "accurate", "indeed", "dp", "distance", "derive", "from", "dipole", "point", "which", "turn", "obtain", "from", "local", "on-surface", "point", "sample", "-lrb-", "-rrb-", "occur", "when", "DTE", "distance", "place", "point", "significantly", "-lrb-", "more", "than", "threshold", "-rrb-", "towards", "outside", "shape", "than", "dp", "distance", "we", "choose", "DTE", "since", "reliable", "outside", "indicator", "case", "visibility", "cone", "carve", "out", "region", "which", "dp", "distance", "indicate", "inside", "shape", "show", "right", "Figure", "precisely", "situation", "where", "global", "visibility", "information", "serve", "correct", "potential", "reconstruction", "error", "we", "choose", "dp", "over", "DTE", "since", "latter", "reliable", "indicator", "inside", "relation", "summarize", "we", "use", "DTE", "distance", "only", "where", "difference", "positive", "indicate", "color", "blue", "Figure", "-lrb-", "-rrb-", "above", "threshold", "over", "area", "DTE", "distance", "most", "likely", "provide", "better", "estimation", "distance", "from", "underlie", "shape", "practice", "scenario", "typically", "occur", "over", "region", "sparse", "missing", "input", "datum", "cavity", "we", "have", "use", "value", "avg", "where", "avg", "average", "all", "point", "data-set", "distance", "nearest", "neighbor", "-lrb-", "see", "Section", "6.2", "-rrb-", "combine", "two", "distance", "we", "obtain", "hybrid", "set", "off-surface", "point", "value", "show", "Figure", "-lrb-", "-rrb-", "generalize", "cone", "empty", "sense", "contain", "other", "input", "point", "exact", "continuous", "boundary", "surface", "shape", "know", "3d", "visibility", "cone", "point", "can", "define", "project", "silhouette", "shape", "from", "p?s", "viewpoint", "towards", "outside", "direction", "practice", "construction", "visibility", "cone", "from", "point", "cloud", "3d", "ill-posed", "problem", "since", "trivial", "way", "delimit", "generalize", "3d", "sector", "we", "do", "2d", "use", "two", "ray", "seem", "construct", "visibility", "cone", "one", "must", "first", "reconstruct", "smooth", "surface", "value", "key", "produce", "useful", "visibility", "cone", "conform", "accurately", "shape", "point", "set", "small", "may", "produce", "cone", "protrude", "considerably", "shape", "lead", "crack", "between", "adjacent", "point", "while", "large", "can", "produce", "cone", "too", "far", "remove", "from", "point", "set", "lose", "vital", "information", "regard", "original", "scan", "shape", "two", "pass", "approach", "often", "use", "kernel", "density", "estimation", "well", "both", "render", "pass", "create", "projection", "point", "set", "onto", "axis-aligned", "six", "side", "cube", "center", "around", "which", "regard", "camera", "position", "first", "render", "pass", "we", "estimate", "adaptive", "neighborhood", "size", "each", "render", "point", "algorithm", "sweep", "over", "six", "result", "hemi-cube", "image", "calculate", "each", "visible", "point", "splat", "radius", "produce", "sufficient", "cover", "area", "around", "when", "view", "from", "immediate", "vicinity", "pixel", "represent", "scan", "grow", "concentric", "square", "search", "other", "near-by", "non-background", "pixel", "scan", "terminate", "either", "when", "one", "pixel", "detect", "near", "different", "side", "grow", "square", "far", "pixel", "observe", "total", "-lrb-", "see", "Figure", "-rrb-", "we", "use", "far", "near", "splat", "size", "set", "distance", "last", "pixel", "more", "than", "half", "hemi-cube", "size", "value", "work", "well", "all", "data-set", "we", "have", "experiment", "-lrb-", "see", "Section", "6.2", "discussion", "-rrb-", "note", "some", "point", "may", "receive", "any", "splat", "radius", "since", "be", "occlude", "other", "pixel", "render", "image", "visible", "silhouette", "trace", "second", "pass", "rendering", "point", "set", "again", "render", "cube", "around", "where", "each", "render", "point", "circular", "splat", "radius", "unique", "color", "next", "we", "trace", "silhouette", "edge", "between", "background", "nonbackground", "pixel", "render", "image", "complete", "path", "define", "silhouette", "visibility", "cone", "from", "p.", "find", "start", "edge", "point", "initiate", "trace", "can", "achieve", "several", "way", "scanner", "position", "know", "point", "map", "pixel", "render", "cube", "from", "pixel", "silhouette", "edge", "can", "reach", "shoot", "ray", "any", "direction", "scanner", "position", "unknown", "we", "randomly", "sample", "pixel", "cube", "search", "silhouette", "edge", "random", "direction", "more", "than", "one", "visible", "open", "outside", "from", "more", "than", "one", "silhouette", "can", "find", "we", "select", "silhouette", "longest", "trace", "path", "visibility", "silhouette", "four", "five", "random", "point", "usually", "sufficient", "find", "major", "silhouette", "which", "define", "maximal", "visibility", "cone", "during", "its", "pass", "cube", "trace", "process", "store", "sequence", "point", "touch", "silhouette", "accord", "splat", "color", "sequence", "create", "closed", "3d", "polyline", "we", "create", "boundary", "surface", "generalize", "cone", "closed", "triangle", "fan", "-lcb-", "...", "-rcb-", "apex", "triangle", "extend", "between", "every", "two", "adjacent", "point", "polyline", "definition", "generalize", "cone", "have", "infinite", "boundary", "ray", "hence", "ideally", "triangle", "fan", "should", "extend", "infinity", "polyline", "produce", "silhouette", "trace", "can", "often", "jag", "contain", "short", "sequence", "repeat", "edge", "even", "local", "self", "intersection", "aberration", "can", "attribute", "discrete", "nature", "point", "set", "its", "rendering", "may", "hinder", "follow", "step", "therefore", "after", "silhouette", "polyline", "create", "we", "use", "simple", "smoothing", "step", "ensure", "cone", "conform", "better", "shape", "point", "set", "we", "discard", "repeat", "point", "well", "high", "curvature", "point", "repair", "self-intersection", "reordering", "point", "inaccuracy", "can", "cause", "wrong", "indicator", "both", "inside", "outside", "shape", "small", "penetration", "cone", "shape", "outside", "region", "which", "remain", "outside", "cone", "surface", "construct", "cone", "carve", "result", "rbf", "fitting", "which", "require", "input", "set", "off-surface", "point", "each", "couple", "sign", "distance", "value", "use", "offsurface", "point", "we", "compute", "set", "radial", "basis", "function", "whose", "combination", "produce", "implicit", "scalar", "function", "3d", "zero", "iso-surface", "implicit", "function", "interpolate", "shape", "final", "surface", "mesh", "produce", "triangulation", "iso-surface", "use", "variant", "march", "tetrahedron", "algorithm", "-lsb-", "Carr", "et", "al.", "2001", "-rsb-", "similar", "2d", "case", "distance", "field", "sample", "combine", "dp", "dte", "distance", "DTE", "distance", "create", "use", "octree", "sample", "cone-based", "off-surface", "point", "describe", "section", "however", "contrast", "2d", "case", "collection", "3d", "visibility", "cone", "do", "provide", "guarantee", "outside", "indicator", "due", "approximative", "nature", "3d", "visibility", "cone", "due", "imprecision", "3d", "visibility", "cone", "approximation", "quality", "lower", "envelope", "degrade", "moreover", "we", "mainly", "interested", "compute", "DTE", "distance", "itself", "hence", "instead", "blend", "visibility", "cone", "create", "surface", "we", "resort", "robustly", "blend", "distance", "cone", "define", "DTE", "dtc", "Distance-to-Cone", "3d", "visibility", "cone", "divide", "ambient", "space", "two", "region", "region", "inside", "region", "outside", "C.", "Let", "point", "ambient", "space", "we", "define", "scalar", "function", "dtc", "-lrb-", "-rrb-", "where", "dtc", "stand", "Distance-ToCone", "sign", "distance", "from", "cone", "boundary", "min", "-lrb-", "-rrb-", "inside", "dtc", "-lrb-", "-rrb-", "min", "-lrb-", "-rrb-", "outside", "where", "-lrb-", "-rrb-", "euclidean", "distance", "from", "boundary", "-lrb-", "triangle", "-rrb-", "face", "visibility", "cone", "dtc", "can", "obtain", "iteratively", "search", "over", "all", "triangle", "face", "cone", "distance", "between", "its", "projection", "cone", "-lrb-", "right", "green", "point", "-rrb-", "note", "although", "distance", "value", "may", "similar", "can", "along", "totally", "different", "direction", "from", "s.", "Representative", "cone", "we", "interested", "DTE", "distance", "DTE", "-lrb-", "-rrb-", "yet", "we", "do", "explicitly", "construct", "lower", "envelope", "what", "we", "have", "be", "able", "compute", "dtc", "distance", "all", "visibility", "cone", "make", "connection", "between", "two", "distance", "we", "note", "simple", "relationship", "between", "they", "DTE", "-lrb-", "-rrb-", "min", "dtc", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "where", "all", "visibility", "cone", "prove", "result", "we", "note", "DTE", "-lrb-", "-rrb-", "shortest", "distance", "from", "some", "point", "lower", "envelope", "let", "any", "visibility", "cone", "we", "consider", "two", "possible", "case", "lie", "inside", "dtc", "-lrb-", "-rrb-", "DTE", "-lrb-", "-rrb-", "hence", "DTE", "-lrb-", "-rrb-", "dtc", "-lrb-", "-rrb-", "lie", "outside", "dtc", "-lrb-", "-rrb-", "lie", "lower", "envelope", "inside", "union", "all", "visibility", "cone", "DTE", "-lrb-", "-rrb-", "follow", "DTE", "-lrb-", "-rrb-", "dtc", "-lrb-", "-rrb-", "final", "scenario", "we", "have", "lie", "outside", "union", "visibility", "cone", "let", "boundary", "dtc", "-lrb-", "-rrb-", "clearly", "either", "lower", "envelope", "lie", "inside", "union", "cone", "since", "DTE", "-lrb-", "-rrb-", "dtc", "-lrb-", "-rrb-", "all", "we", "get", "equation", "-lrb-", "-rrb-", "hence", "we", "see", "best", "approximation", "DTE", "-lrb-", "-rrb-", "use", "set", "all", "dtc", "distance", "give", "dtc", "distance", "from", "point", "representative", "cone", "we", "define", "DTE", "-lrb-", "-rrb-", "dtc", "-lrb-", "-rrb-", "arg", "min", "dtc", "-lrb-", "-rrb-", "compute", "distance", "representative", "cone", "we", "can", "find", "projection", "roj", "-lrb-", "-rrb-", "onto", "surface", "-lrb-", "see", "Figure", "-rrb-", "note", "projection", "can", "reside", "interior", "cone", "face", "which", "case", "would", "perpendicular", "projection", "onto", "face", "nificant", "cluster", "-lrb-", "red", "-rrb-", "cluster", "find", "use", "slide", "kernel", "window", "histogram", "start", "from", "lowest", "value", "note", "select", "cluster", "actually", "lie", "miss", "face", "-lrb-", "left", "-rrb-", "exemplify", "strength", "cone", "carve", "fill", "miss", "piece", "base", "visibility", "information", "practice", "we", "can", "rely", "any", "single", "representative", "cone", "since", "cone", "may", "erroneous", "due", "discrete", "way", "3d", "visibility", "cone", "be", "construct", "instead", "we", "blend", "distance", "several", "cone", "robustly", "provide", "better", "estimator", "ideal", "dte", "distance", "-lrb-", "free", "from", "erroneous", "visibility", "cone", "-rrb-", "which", "turn", "approximate", "well", "distance", "underlie", "shape", "Cone", "distance", "blend", "two", "main", "reason", "combine", "several", "value", "cone", "distance", "first", "remove", "outlier", "second", "create", "larger", "support", "specific", "distance", "measure", "significant", "value", "would", "value", "whose", "support", "-lrb-", "i.e.", "frequency", "-rrb-", "larger", "than", "threshold", "nevertheless", "same", "distance", "value", "from", "may", "originate", "from", "cone", "totally", "different", "region", "shape", "-lrb-", "see", "Figure", "-rrb-", "only", "one", "which", "give", "correct", "minimum", "start", "from", "minimal", "dtc", "value", "we", "use", "slide", "window", "size", "2r", "each", "value", "we", "examine", "all", "cone", "projection", "from", "whose", "distance", "point", "fall", "inside", "bin", "-lsb-", "2r", "-rsb-", "denote", "set", "cone", "correspond", "project", "point", "-lrb-", "-rrb-", "since", "point", "can", "come", "from", "various", "region", "3d", "space", "we", "cluster", "they", "use", "simple", "hierarchical", "scheme", "-lsb-", "Everitt", "et", "al.", "2001", "-rsb-", "3d", "space", "threshold", "we", "use", "cone", "first", "cluster", "find", "contain", "more", "than", "point", "define", "DTE", "-lrb-", "-rrb-", "denote", "cone", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "we", "take", "median", "distance", "from", "all", "cone", "-lrb-", "-rrb-", "DTE", "-lrb-", "-rrb-", "dte", "-lrb-", "-rrb-", "median", "-lcb-", "dtc", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-rcb-", "adequately", "filter", "out", "outlier", "still", "blend", "several", "cone", "we", "use", "value", "0.8", "avg", "all", "example", "paper", "where", "avg", "average", "all", "point", "data-set", "distance", "nearest", "neighbor", "we", "have", "test", "we", "algorithm", "several", "challenging", "example", "term", "miss", "part", "self", "occlusion", "where", "test", "datum", "be", "either", "scan", "take", "from", "aim@shape", "shape", "repository", "artificial", "point", "cloud", "use", "typically", "contain", "5,00014,000", "point", "algorithm", "implement", "C++", "GPU", "part", "use", "glsl", "CUDA", "we", "use", "Intel", "Core2", "Quad", "t9550", "Nvidia", "GeForce", "275", "GTX", "video", "card", "Table", "show", "timing", "result", "model", "show", "paper", "figure", "11", "we", "show", "several", "example", "we", "result", "we", "first", "show", "point", "set", "use", "splat", "give", "sense", "overall", "shape", "datum", "note", "object", "present", "challenge", "previous", "reconstruction", "algorithm", "since", "contain", "part", "inaccessible", "from", "outside", "sampling", "we", "compare", "we", "result", "three", "other", "algorithm", "radial", "basis", "function", "-lsb-", "Carr", "et", "al.", "2001", "-rsb-", "partition", "unity", "-lsb-", "Ohtake", "et", "al.", "2003", "-rsb-", "Poisson", "reconstruction", "-lsb-", "Kazhdan", "et", "al.", "2006", "-rsb-", "all", "method", "encounter", "problem", "misinterpret", "outside", "inside", "thus", "connect", "close", "part", "form", "wrong", "topology", "use", "we", "global", "visibility", "prior", "ambiguity", "solve", "correct", "topological", "interpretation", "give", "shape", "due", "blend", "characteristic", "all", "stage", "cone", "carve", "assumption", "base", "use", "visibility", "cone", "remain", "robust", "certain", "degree", "even", "when", "noise", "present", "however", "unlike", "Poisson", "reconstruction", "cone", "carve", "design", "smooth", "filter", "out", "noise", "sense", "effort", "filter", "out", "noise", "orthogonal", "problem", "deal", "miss", "datum", "any", "point-based", "noise", "filter", "algorithm", "could", "use", "prior", "reconstruction", "use", "cone", "carve", "Figure", "10", "present", "some", "reconstruction", "result", "under", "noise", "compare", "behavior", "cone", "carve", "base", "rbf", "Poisson", "reconstruction", "note", "although", "output", "surface", "from", "former", "indeed", "noisy", "topology", "object", "still", "correct", "-lrb-", "contrast", "Poisson", "-rrb-", "remain", "correct", "even", "under", "more", "severe", "level", "noise", "main", "disadvantage", "cone-carving", "current", "naive", "implementation", "quadratic", "therefore", "slow", "find", "cone", "boundary", "each", "point", "sample", "splatting", "all", "other", "point", "dataset", "use", "mean", "impractical", "larger", "datum", "set", "currently", "be", "produce", "Advanced", "spatial", "search", "structure", "well", "random", "sampling", "larger", "dataset", "can", "alleviate", "problem", "however", "convert", "linear", "time", "-lrb-", "e.g.", "use", "fix", "size", "neighborhood", "-rrb-", "still", "difficult", "main", "point", "cone", "carve", "utilize", "additional", "global", "information", "visibility", "scan", "datum", "general", "quality", "more", "important", "than", "speed", "surface", "reconstruction", "part", "long", "process", "datum", "collection", "which", "rarely", "interactive", "success", "cone", "carve", "also", "rely", "some", "tuning", "parameter", "three", "main", "stage", "be", "define", "parame", "ter", "cone", "creation", "stage", "cone", "distance", "blend", "stage", "choose", "between", "DTE", "dp", "cone", "creation", "stage", "we", "determine", "splat", "size", "each", "point", "base", "near", "number", "define", "k-nearest", "neighbor", "search", "pixel", "-lrb-", "section", "-rrb-", "Figure", "12", "show", "example", "cube", "render", "one", "point", "vary", "value", "near", "clear", "small", "value", "near", "create", "hole", "surface", "large", "value", "time", "consuming", "redundant", "create", "large", "overlap", "between", "splat", "practice", "we", "find", "near", "strike", "best", "balance", "correctly", "interpret", "shape", "all", "point", "all", "data-set", "cone", "distance", "blend", "stage", "-lrb-", "section", "-rrb-", "two", "parameter", "govern", "blending", "blend", "kernel", "neighborhood", "size", "threshold", "define", "support", "significant", "cluster", "size", "can", "see", "define", "size", "cardinality", "cluster", "define", "DTE", "Figure", "13", "illustrate", "effect", "change", "value", "reconstruction", "choose", "between", "DTE", "dp", "distance", "measure", "we", "use", "parameter", "Figure", "14", "show", "how", "change", "can", "effect", "reconstruction", "summary", "small", "set", "parameter", "control", "cone", "carve", "result", "however", "we", "have", "show", "all", "one", "example", "paper", "-lrb-", "Mannequin", "figure", "we", "use", "more", "sparsely", "sample", "-rrb-", "same", "set", "parameter", "value", "use", "govern", "one", "characteristic", "value", "point", "set", "namely", "what", "we", "define", "avg", "we", "have", "present", "cone", "carve", "enhance", "surface", "reconstruction", "technique", "from", "scan", "point", "cloud", "combine", "local", "positional", "global", "visibility", "information", "Cone", "carve", "utilize", "visibility", "exist", "point", "infer", "new", "point", "complete", "miss", "part", "capture", "model", "unlike", "previous", "attempt", "exploit", "visibility", "assist", "surface", "reconstruction", "here", "visibility", "take", "from", "inside-out", "perspective", "create", "visibility", "cone", "from", "point", "surface", "outward", "cone", "effective", "exactly", "where", "need", "most", "away", "from", "exist", "point", "where", "datum", "miss", "we", "have", "demonstrate", "effectiveness", "cone", "carve", "several", "reconstruction", "both", "synthetic", "input", "raw", "scan", "from", "commercial", "3d", "scanner", "speed", "major", "limitation", "we", "plan", "investigate", "few", "option", "accelerate", "cone", "carve", "create", "generalize", "cone", "only", "subset", "point", "utilize", "entire", "point-set", "trace", "silhouette", "use", "pre-computed", "spatial", "datum", "structure", "accelerate", "various", "geometric", "computation", "computation", "dtc", "fully", "exploit", "highly", "parallel", "nature", "algorithm", "use", "GPU", "implementation", "opposite", "effect", "too", "large", "can", "insert", "outlier", "cluster", "while", "too", "small", "do", "blend", "enough", "information", "may", "determine", "wrong", "distance", "large", "can", "reject", "correct", "distance", "cluster", "too", "few", "count", "while", "small", "use", "outlier", "cone", "cluster", "we", "have", "use", "0.8", "avg", "all", "one", "example", "paper", "visibility", "cone", "may", "also", "prove", "useful", "problem", "other", "than", "surface", "reconstruction", "instance", "shape", "distribution", "cone", "can", "assist", "line", "point", "feature", "detection", "ohen", "M.", "F.", "REENBERG", "D.", "P.", "1985", "hemi-cube", "radiosity", "solution", "complex", "environment", "ACM", "SIGGRAPH", "31", "40", "urless", "B.", "EVOY", "M.", "1996", "volumetric", "method", "building", "complex", "model", "from", "range", "image", "ACM", "SIGGRAPH", "303", "312", "avi", "J.", "arschner", "S.", "R.", "ARR", "M.", "evoy", "M.", "2002", "fill", "hole", "complex", "surface", "use", "volumetric", "diffusion", "Proceedings", "first", "International", "Symposium", "3D", "Data", "Processing", "visualization", "Transmission", "354", "369", "ey", "T.", "OSWAMI", "S.", "2003", "tight", "cocone", "water", "tight", "surface", "reconstructor", "ACM", "Sympos", "solid", "modeling", "appl", "127", "134", "ey", "T.", "K.", "K.", "AMOS", "E.", "A.", "ENGER", "R.", "2009", "isotopic", "reconstruction", "surface", "boundary", "Computer", "Graphics", "Forum", "special", "issue", "sgp", "09", "Proceedings", "Symposium", "Geometry", "Processing", "28", "1371", "1382", "delsbrunner", "H.", "ucke", "E.", "P.", "1994", "Threedimensional", "alpha", "shape", "ACM", "Trans", "Graphics", "13", "43", "72", "ana", "J.", "arshney", "a.", "1998", "Topology", "simplification", "polygonal", "virtual", "environment", "IEEE", "Trans", "Graphics", "133", "144", "veritt", "B.", "S.", "ANDAU", "S.", "EESE", "M.", "2001", "cluster", "analysis", "Oxford", "University", "Press", "AL", "R.", "hamir", "a.", "assner", "T.", "auly", "m.", "ohen", "D.", "2007", "surface", "reconstruction", "use", "local", "shape", "prior", "Eurographics", "Symp", "Geometry", "Processing", "253", "262", "iesen", "J.", "AZALS", "F.", "auly", "m.", "omorodian", "a.", "2006", "conformal", "alpha", "shape", "filtration", "Visual", "Computer", "22", "531", "540", "OPPE", "H.", "OSE", "T.", "UCHAMP", "T.", "onald", "J.", "TUETZLE", "W.", "1992", "surface", "reconstruction", "from", "unorganized", "point", "ACM", "SIGGRAPH", "71", "78", "uang", "H.", "D.", "HANG", "H.", "SCHER", "U.", "ohen", "D.", "2009", "consolidation", "unorganized", "point", "cloud", "surface", "reconstruction", "ACM", "Trans", "graphic", "-lrb-", "Proc", "SIGGRAPH", "Asia", "-rrb-", "28", "Article", "176", "AZHDAN", "M.", "OLITHO", "M.", "OPPE", "H.", "2006", "Poisson", "surface", "reconstruction", "Eurographics", "Symp", "Geometry", "Processing", "61", "70", "UTULAKOS", "K.", "N.", "EITZ", "S.", "M.", "2000", "theory", "shape", "space", "carve", "38", "199", "218", "Marr", "Prize", "special", "issue", "aurentinus", "a.", "1994", "visual", "hull", "concept", "silhouettebased", "image", "understanding", "IEEE", "Trans", "16", "150", "162", "ontenegro", "a.", "A.", "ARVALHO", "P.", "C.", "P.", "ATTASS", "M.", "ELHO", "L.", "C.", "P.", "R.", "2004", "adaptive", "space", "carve", "3D", "Data", "Processing", "visualization", "Transmission", "199", "206", "ehab", "D.", "USINKIEWICZ", "S.", "AVIS", "J.", "AMAMOOR", "THI", "R.", "2005", "efficiently", "combine", "position", "normal", "precise", "3d", "geometry", "ACM", "Trans", "Graphics", "24", "536", "543", "itschke", "C.", "AKAZAWA", "a.", "akemura", "H.", "2007", "real-time", "space", "carve", "use", "graphic", "hardware", "IEICE", "Trans", "e90-d", "1175", "1184", "htake", "Y.", "ELYAEV", "a.", "LEXA", "M.", "urk", "G.", "EI", "DEL", "h.-p", "2003", "multi-level", "partition", "unity", "implicit", "ACM", "Trans", "Graphics", "22", "463", "470", "auly", "m.", "itra", "N.", "J.", "IESEN", "J.", "ROSS", "M.", "uiba", "L.", "J.", "2005", "example-based", "3d", "scan", "completion", "Eurographics", "Symp", "Geometry", "Processing", "23", "32", "fister", "H.", "WICKER", "M.", "VAN", "AAR", "J.", "ross", "M.", "2000", "Surfels", "surface", "element", "render", "primitive", "ACM", "SIGGRAPH", "335", "342", "chnabel", "R.", "EGENER", "P.", "LEIN", "R.", "2009", "completion", "reconstruction", "primitive", "shape", "Computer", "Graphics", "Forum", "-lrb-", "Proc", "eurographic", "-rrb-", "28", "503", "512", "harf", "a.", "LEXA", "M.", "ohen", "D.", "2004", "contextbased", "surface", "completion", "ACM", "Trans", "Graphics", "23", "878", "887", "orkine", "O.", "ohen", "D.", "2004", "least-square", "mesh", "IEEE", "Conf", "shape", "modeling", "application", "191", "199", "agliasacchus", "a.", "hang", "H.", "ohen", "D.", "2009", "curve", "skeleton", "extraction", "from", "incomplete", "point", "cloud", "ACM", "Trans", "Graphics", "28", "Article", "71", "page", "urk", "G.", "EVOY", "M.", "1994", "zippered", "polygon", "mesh", "from", "range", "image", "ACM", "SIGGRAPH", "311", "318", "ESTOVER", "L.", "1990", "footprint", "evaluation", "volume", "rendering", "ACM", "SIGGRAPH", "367", "376" ],
  "content" : "These cones collectively provide a means to better approximate the signed distances to the shape specifically near regions containing large holes in the scan, allowing one to infer the correct surface topology. Combining the new distance measure with conventional RBF, we define an implicit function whose zero level set defines the surface of the shape. For similar reasons, previous implicit surface reconstruction methods can only fill holes smoothly. This information can effectively define a signed distance function to the surface even in regions where sample data is missing. We call this boundary surface E the lower envelope of the set of visibility cones as it is viewed from the insideout perspective. In the ideal continuous setting when P = S and under the visibility assumption, the lower envelope E is simply S. In our discrete settings, where E = S, we still utilize the distance to E as an approximation to the distance to S. We define a new set of off-surface points and use E to approximate the signed distances from these points to the surface. Towards this end, we adopt an imagebased approach, exploiting the rendering speed and capabilities of the GPU. First, the local position of sample points are blended similar to previous algorithms. Our technique does not depend on the voxel resolution and does not need explicit knowledge of the scanner head?s location. In contrast, our cones carry global visibility information that successfully handles such cases. Furthermore, the outside space is defined by carving out space using rays emanating from the camera position towards the object and through its silhouette ( Figure 3 ), while we use the inverse direction and carve out cones originating at each sample of a point cloud. These methods, however, are lim- ited when faced with severe under-sampling or non-uniform sampling. Giesen et al. [2006] use ?-balls with adaptive radii to deal with non-uniform sampling. However, this class of methods still only return sub-complexes of the Delaunay tetrahedralization. These are complicated scenarios where purely local considerations, such as point normals or Voronoi constructions, are insufficient to infer the shape correctly and additional information or assumptions are needed. Several existing algorithms for hole filling rely on additional data or assumptions, such as multiple data scans [Turk and Levoy 1994], templates [Pauly et al. 2005] or specialized shape prior [Gal et al. 2007; Schnabel et al. 2009; Tagliasacchi et al. 2009]. When the holes are easy to detect or are specified as part of the input, several approaches can be applied to achieve high-quality surface completion; these include the use of smooth interpolants [Sorkine and Cohen-Or 2004] or self similarities in shapes [Sharf et al. 2004]. Typically, the outward directions can be returned by the scanner head positions, which are available from some brands of laser scanners. To illustrate the idea behind cone carving, we first describe a simplified version of the algorithm in 2D. Our input is a 2D point set with missing data such as the one shown in Figure 4(a) , which is similar to a typical output of a range scan for a ??? shape. Dipole distance and distance to lower envelope With an input point set given in Figure 4(a) , standard reconstruction algorithms such as RBF [Carr et al. 2001] would produce undesirable results. As a convention, the signed distance takes on positive values when inside the shape and negative values when outside. We can observe that in areas where there are large gaps between samples, no off-surface points are created. Consequently, the interpolation produces smooth curves as part of the zero level-set of the DP distance field, which may not give a correct representation of the underlying shape. One the other hand, the cone carving algorithm uses the additional global visibility information, resulting in a better implicit distance function to infer the shape boundary. For an input point p, the visibility cone at p in 2D is the largest sector that can be stretched from an outward direction without containing any other input points, as shown in 4(e). The assumption at the base of cone carving is that the area inside the visibility cone is completely outside the shape. To take advantage of the global visibility information we construct a visibility cone for each point of the input set. The union of all the cones serves as an approximation of the exterior ambient space around the shape, as shown in 4(f). Hence, we calculate a ray from p to the scanner head and sweep it radially as much as possible until hitting other cloud points. When this direction is unknown, we assume that the cone sector with the largest opening angle is the one which contains the outward direction. Hence, we can search for the largest empty opening between two points as viewed from p to construct the visibility cone for p. Note that this assumption may not always hold and erroneous cones may be created. However, in practice these situations are rare and do not effect the algorithm in general. This is because, as will be seen later in the 3D case, the individual visibility cones are essentially blended statistically to achieve robustness against the potential errors. In the 2D case, each visibility cone assumes a particularly simple structure and therefore we can explicitly construct the lower envelope E. Next, we define the DTE or Distance-to-Envelope as the shortest distance to E. Figure 4(g) shows, for the 2D example, a plot of the DTE distance field. As a convention, the signed distances take on positive values when outside the union of the visibility cones, and negative values when inside. Note that this choice of signs is consistent with the choice of distance signs with respect to the underlying shape. Choosing between distances Using a quadtree subdivision of the ambient space (octree in 3D), we sample the DTE field to create cone-based off-surface points. The tree is initialized with a uniform grid of points and subsequently subdivided into cells containing sign transitions in the DTE measure. This allows one to sample the distance field in areas of sparse or missing data. On the other hand, areas with sufficiently dense input data are well covered by the dipole points and the implied DP distance field. As such, these cones are only reliable as outside indicators. In our discrete setting, gaps (a) (b) (c) (f) (g) (h) tates the conjectured position of the boundary of the underlying shape, either purple or green. ?(s i ) is the same in both situations, i = 1, 2, 3. When ?(s i ) > ? > 0 (right), where ? is a threshold, the DTE measure carves into the interior (positive sign) space indicated by the DP measure. In contrast, when ?(s i ) < 0 (left), DP takes precedence over DTE . between the lower envelop and the actual boundary of the shape may appear; see top of the cavity in the ??? in Figure 4(f) . Let DP (s) and DTE (s) denote the scalar values at a point s in the ambient space as given by the DP and DTE distance fields, respectively. We differentiate between three possible cases of ?(s) with regards to a threshold value ? > 0: ? |?(s)| < ? : When the two distances are similar, we choose the DP distance since it tends to be more accurate. Indeed, the DP distances are derived from dipole points, which in turn are obtained from local on-surface point samples. ? ?(s) > ? : This occurs when the DTE distance ?places? point s significantly (more than a threshold) towards the outside of the shape than the DP distance. We choose DTE since it is a reliable outside indicator. In this case, the visibility cones carve out a region which the DP distance indicates to be inside the shape, as shown in the right of Figure 5 . This is precisely the situation where the global visibility information serves to correct potential reconstruction errors. We choose DP over DTE since the latter is not a reliable indicator of the inside relation. To summarize, we use the DTE distance only where the difference ? is positive, indicated by color blue in Figure 4(i) , and above the threshold ?. Over these areas, the DTE distance is most likely to provide a better estimation for the distance from the underlying shape. In practice, such scenario typically occurs over regions with sparse or missing input data and cavities. We have used the value ? = d avg , where d avg is the average for all points in the data-set of the distance to their nearest neighbor (see Section 6.2). Combining the two distances we obtain a hybrid set of off-surface point values, as shown in Figure 4(h) . The generalized cone is empty in the sense that it contains no other input points. If the exact continuous boundary surface of the shape is known, the 3D visibility cone of a point p can be defined by projecting the silhouette of the shape from p?s viewpoint towards the outside direction. In practice, the construction of visibility cones from a point cloud in 3D is an ill-posed problem since there is no trivial way to delimit a generalized 3D sector as we did in 2D using two rays. It seems that to construct the visibility cone one must first reconstruct the smooth surface. The value of ? is key to producing useful visibility cones that conform accurately to the shape of the point set. A small ? may produce cones that protrude considerably into the shape, leading to ?cracks? between adjacent points, while a large ? can produce cones that are too far removed from the point set, losing vital information regarding the original scanned shape. Such a two pass approach is often used in kernel density estimations as well. Both rendering passes create a projection of the point set onto an axis-aligned six sided cube, centered around p, which is regarded as the camera position. In the first rendering pass, we estimate the adaptive neighborhood size ? for each rendered point. The algorithm then sweeps over the six resulting hemi-cube images, calculating for each visible point q the splat radius r p q that produces a sufficient cover of the area around q when viewed from p. The immediate vicinity of the pixel representing q is scanned in growing concentric squares in search for other near-by non-background pixels. This scan is terminated either when one pixel is detected on N near = 3 different sides of the growing squares, or N far pixels are observed in total (see Figure 7 ). We use N far = 3 ? N near . The splat size is then set to the distance to the last pixel but not more than half the hemi-cube size. These values work well for all data-sets we have experimented with (see Section 6.2 for discussion). Note that some points may not receive any splat radii since they were occluded by other pixels in the rendered images. Visible silhouette tracing In the second pass of rendering, the point set is again rendered on a cube around p, where each rendered point q is a circular splat with radius r p q and with a unique color. Next, we trace the silhouette edge between background and nonbackground pixels on the rendered image. The complete path will define the silhouette of the visibility cone from p. Finding a starting edge point to initiate the tracing can be achieved in several ways. If the scanner position is known for point p, it is mapped to a pixel on the rendered cube. From this pixel, the silhouette edge can be reached by shooting a ray in any direction. If the scanner position is unknown, we randomly sample pixels on the cube and search for a silhouette edge in random directions. If there is more than one visible opening to the outside from p, more than one silhouette can be found. We select the silhouette with the longest traced path as the visibility silhouette. Four to five such random points are usually sufficient for finding the major silhouettes which define the maximal visibility cones. During its pass on the cube, the tracing process stores the sequence of points it touches on the silhouette according to their splat colors. This sequence creates a closed 3D polyline. We create the boundary surface of the generalized cone C as a closed triangle fan C = {f 1 , . . . , f k }, with p as the apex and triangles f i extending between every two adjacent points of this polyline and p. The definition of a generalized cone has infinite boundary rays, hence, ideally, the triangle fans should be extended to infinity. The polyline produced by silhouette tracing can often be jagged, containing short sequences of repeating edges or even local self intersections. These aberrations can be attributed to the discrete nature of the point set and its rendering and may hinder the following steps. Therefore, after the silhouette polyline is created, we use a simple smoothing step to ensure that the cone conforms better to the shape of the point set. We discard repeated points as well as high curvature points and repair self-intersections by reordering points. These inaccuracies can cause a wrong indicator both inside and outside the shape: small penetration of cones into the shape, and outside regions which remain outside the cones. The surface constructed by cone carving is the result of an RBF fitting which requires as an input a set of off-surface points, each coupled with a signed distance value. Using these offsurface points, we compute a set of radial basis functions whose combination produces an implicit scalar function in 3D. The zero iso-surface of this implicit function interpolates the shape. The final surface mesh is produced by a triangulation of the iso-surface using a variant of the marching tetrahedra algorithm [Carr et al. 2001]. Similar to the 2D case, the distance field to be sampled combines the DP and DTE distances. The DTE distances are created by using an octree to sample cone-based off-surface points as described in Section 3. However, in contrast to the 2D case, the collection of 3D visibility cones do not provided a guaranteed outside indicator. This is due to the approximative nature of the 3D visibility cones. Due to the imprecisions of the 3D visibility cones, the approximation quality of the lower envelope is degraded. Moreover, we are mainly interested in computing the DTE distances and not E itself. Hence instead of blending the visibility cones to create a surface, we resort to robustly blending the distances to the cones to define DTE . DTC : Distance-to-Cone A 3D visibility cone C divides the ambient space into two regions: the region inside or on C and the region outside C. Let s be a point in the ambient space, we define the scalar function DTC (s, C), where DTC stands for Distance-ToCone, to be the signed distance from s to the cone boundary:\n        ? min i d(s, f i ), if s is inside or on C, DTC (s, C) = min i d(s, f i ), if s is outside C,\n        where d(s, f i ) is the Euclidean distance from s to a boundary (triangle) face f i of the visibility cone. The DTC can be obtained by iteratively searching over all the triangle faces of the cone. the distance between s and its projection on the cone (right, green points). Note that although the distance values may be similar, they can be along totally different directions from s. Representative cone We are interested in the DTE distance DTE (s) yet we do not explicitly construct the lower envelope; what we have been able to compute are the DTC distances to all the visibility cones. To make a connection between the two distances, we note that there is a simple relationship between them:\n        DTE (s) ? min DTC (s, C j ), (1) j\n        where the C j ?s are all the visibility cones. To prove this result, we note that DTE (s) is the shortest distance from s to some point v on the lower envelope. Let C j be any visibility cone and we consider two possible cases: 1. s lies inside or on C j : Then DTC (s, C j ) ? 0 and DTE (s) ? 0. Hence, DTE (s) ? DTC (s, C j ). s lies outside C j : Then DTC (s, C j ) > 0. If s lies on the lower envelope or inside the union of all visibility cones, then DTE (s) ? 0. It follows that DTE (s) ? DTC (s, C j ). In the final scenario, we have s lying outside the union of visibility cones. Let u be on the boundary of C j such that ||s ? u|| = DTC (s, C j ). Then clearly u is either on the lower envelope or it lies inside the union of cones. Since DTE (s) ? DTC (s, C j ) for all C j , we get equation (1). Hence, we see that the best approximation of DTE (s) using the set of all DTC distances is given by the DTC distance from point s to the representative cone C j ? , and we define: ? DTE (s) = DTC (s, C j ? ), j = arg min DTC (s, C j ) j To compute distance to the representative cone C j ? , we can find the projection P roj(s, C j ? ) of s onto the surface of C j ? (see Figure 8 ). Note that such a projection can reside on the interior of a cone face, in which case it would be a perpendicular projection onto that face. nificant cluster (red). The cluster is found using a sliding kernel window on the histogram starting from the lowest value. Note that this selected cluster actually lies on a missing face (left) exemplifying the strength of cone carving to fill in missing pieces based on visibility information. In practice, we can not rely on any single representative cone since such a cone may be erroneous due to the discrete way the 3D visibility cones were constructed. Instead, we blend the distances to several cones robustly to provide a better estimator for the ideal DTE distance (free from erroneous visibility cones), which in turn approximates well the distance to the underlying shape. Cone distances blending There are two main reasons to combine several values of cone distances: first, to remove outliers, and second, to create a larger support for a specific distance measure. A significant value would be a value whose support (i.e. frequency) is larger than a threshold. Nevertheless, the same distance value from s may originate from cones in a totally different regions of the shape (see Figure 8 ), only one of which gives the correct minimum. Starting from the minimal DTC value d 0 at s, we use a sliding window of size 2r. For each value d, we examine all the cone projections v from s whose distance to point s falls inside the bin [d, d + 2r]. Denote the set of cones corresponding to these projected points by V d (s). Since these points can come from various regions in 3D space, we cluster them using a simple hierarchical scheme [Everitt et al. 2001] in 3D space with a threshold of r. We use the cones of the first cluster found that contains more than k points to define DTE (s). Denote these cones by L(s) ? V d (s), we take the median of the distances from s to all cones in L(s) as DTE (s): DTE (s) = median{ DTC (s, C)|C ? L(s)}. To adequately filter out outliers but still blend several cones we used the values k = 5, r = 0.8 ? d avg for all examples in this paper, where d avg is the average for all points in the data-set of the distance to their nearest neighbor. We have tested our algorithm on several challenging examples in terms of missing parts and self occlusions, where the tested data were either scanned, taken from the AIM@SHAPE shape repository or artificial. The point clouds used typically contain 5,00014,000 points. The algorithm is implemented in C++ and the GPU part using GLSL and CUDA. We used Intel Core2 Quad T9550 with an Nvidia GeForce 275 GTX video card. Table 1 shows the timing results for the models shown in the paper. In Figures 11 we show several examples of our results. We first show the point set using splats to give a sense of the overall shape and data. Note that these objects present a challenge to previous reconstruction algorithms, since they contain parts that are inaccessible from the outside for sampling. We compare our results to three other algorithms: Radial Basis functions [Carr et al. 2001], Partition of unity [Ohtake et al. 2003], and Poisson reconstruction [Kazhdan et al. 2006]. All these methods encounter problems with misinterpreting the outside as inside and thus connecting close parts to form wrong topology. Using our global visibility prior these ambiguities are solved, and a correct topological interpretation is given to the shape. Due to the blending characteristics in all stages of cone carving, the assumptions at the base of using visibility cones remain robust to a certain degree even when noise is present. However, unlike Poisson reconstruction, cone carving is not designed to smooth or filter out noise. In a sense, the effort to filter out noise is orthogonal to the problem of dealing with missing data, and any point-based noise filtering algorithm could be used prior to reconstruction using cone carving. Figure 10 presents some reconstruction results under noise and compares the behavior of cone carving based RBF with that of Poisson reconstruction. Note that although the output surface from the former is indeed noisy, the topology of the object is still correct (in contrast to Poisson) and remains correct even under more severe level of noise. The main disadvantage of cone-carving is that the current naive implementation is quadratic, and therefore slow. To find the cone boundary for each point sample, splatting of all other points in the dataset is used. This means it is impractical for the larger data sets  currently being produced. Advanced spatial search structures as well as random sampling on larger datasets can alleviate this problem. However, converting it to linear time (e.g. using fixed size neighborhoods) will still be difficult as the main point of cone carving is utilizing additional global information: the visibility of the scanned data. In general, quality is more important than speed in surface reconstruction, as it is part of a long process of data collection, which is rarely interactive. The success of cone carving also relies on some tuning of parameters. There are three main stages that were defined by parame- ters: the cone creation stage, the cone distance blending stage and choosing between DTE and DP. In the cone creation stage we determine the splat size of each point based on N near . This number defines the k-nearest neighbor search for pixels (Section 4). Figure 12 shows an example of the cube rendering for one point for varying values of N near . It is clear that a small value for N near creates holes in the surface, but a large value is time consuming and redundant creating large overlaps between splats. In practice, we found N near = 3 strikes the best balance, correctly interpreting the shape for all points in all data-sets. At the cone distance blending stage (Section 5), two parameters govern the blending: r, the blending kernel neighborhood size, and k the threshold defining the support for a significant cluster size. These can be seen as defining the size and cardinality of the cluster that defines DTE . Figure 13 illustrates the effect of changing these values on the reconstruction. For choosing between the DTE and DP distance measures we use a parameter ?. Figure 14 shows how changing ? can effect the reconstruction. In summary, there is a small set of parameters control cone carving results. However, we have shown that in all but one example in this paper (for the Mannequin figure we used k = 2 as it is more sparsely sampled) the same set of parameter values was used. These are governed by one characteristic value of the point set, namely, what we defined as d avg . We have presented cone carving, enhancing surface reconstruction techniques from scanned point clouds by combining local positional and global visibility information. Cone carving utilizes the visibility of the existing points to infer new points that complete the missing parts of the captured model. Unlike previous attempts to exploit visibility to assist surface reconstruction, here the visibility is taken from an inside-out perspective, creating visibility cones from points on the surface outward. These cones are effective exactly where they are needed the most: away from existing points, where data is missing. We have demonstrated the effectiveness of cone carving in several reconstructions of both synthetic input and raw scans from a commercial 3D scanner. With speed as the major limitation, we plan to investigate a few options to accelerate cone carving: ? Creating generalized cones only for a subset of points, but utilizing the entire point-set for tracing their silhouettes. ? Using a pre-computed spatial data structures to accelerate various geometric computations such as the computation of DTC. ? Fully exploiting the highly parallel nature of the algorithm using a GPU implementation. opposite effects. Too large r can insert outliers to the cluster while too small r does not blend enough information and may determine a wrong distance. Large k can reject the correct distance cluster with too few counts, while small k will use outlier cones clusters. We have used k = 5, r = 0.8 ? d avg in all but one of the examples in the paper. Visibility cones may also prove to be useful for problems other than surface reconstruction. For instance, the shape and distribution of the cones can assist in line and point feature detection. C OHEN , M. F., AND G REENBERG , D. P. 1985. The hemi-cube: a radiosity solution for complex environments. of ACM SIGGRAPH, 31?40. C URLESS , B., AND L EVOY , M. 1996. A volumetric method for building complex models from range images. of ACM SIGGRAPH, 303?312. D AVIS , J., M ARSCHNER , S. R., G ARR , M., , AND L EVOY , M. 2002. Filling holes in complex surfaces using volumetric diffusion. In Proceedings of the first International Symposium on 3D Data Processing Visualization and Transmission, 354?369. D EY , T., AND G OSWAMI , S. 2003. Tight cocone: A water tight surface reconstructor. of ACM Sympos. on Solid Modeling & Appl. , 127?134. D EY , T. K., L I , K., R AMOS , E. A., AND W ENGER , R. 2009. Isotopic reconstruction of surfaces with boundaries. Computer Graphics Forum, special issue SGP ?09: Proceedings of the Symposium on Geometry Processing 28, 5, 1371?1382. E DELSBRUNNER , H., AND M UCKE  ? , E. P. 1994. Threedimensional alpha shapes. ACM Trans. on Graphics 13, 1, 43? 72. E L -S ANA , J., AND V ARSHNEY , A. 1998. Topology simplification for polygonal virtual environments. IEEE Trans. Graphics 4, 2, 133?144. E VERITT , B. S., L ANDAU , S., AND L EESE , M. 2001. Cluster Analysis. Oxford University Press. G AL , R., S HAMIR , A., H ASSNER , T., P AULY , M., AND C OHEN O R , D. 2007. Surface reconstruction using local shape priors. Eurographics Symp. on Geometry Processing, 253?262. G IESEN , J., C AZALS , F., P AULY , M., AND Z OMORODIAN , A. 2006. The conformal alpha shape filtration. The Visual Computer 22, 8, 531?540. H OPPE , H., D E R OSE , T., D UCHAMP , T., M C D ONALD , J., AND S TUETZLE , W. 1992. Surface reconstruction from unorganized points. of ACM SIGGRAPH, 71?78. H UANG , H., L I , D., Z HANG , H., A SCHER , U., AND C OHEN -O R , D. 2009. Consolidation of unorganized point clouds for surface  reconstruction. ACM Trans. on Graphics (Proc. of SIGGRAPH Asia) 28, 5, Article 176. K AZHDAN , M., B OLITHO , M., AND H OPPE , H. 2006. Poisson surface reconstruction. Eurographics Symp. on Geometry Processing, 61?70. K UTULAKOS , K. N., AND S EITZ , S. M. 2000. A theory of shape by space carving. 38, 3, 199?218. Marr Prize Special Issue. L AURENTINI , A. 1994. The visual hull concept for silhouettebased image understanding. IEEE Trans. 16, 2, 150?162. M ONTENEGRO , A. A., C ARVALHO , P. C. P., G ATTASS , M., AND V ELHO , L. C. P. R. 2004. Adaptive space carving. of 3D Data Processing, Visualization, and Transmission, 199?206. N EHAB , D., R USINKIEWICZ , S., D AVIS , J., AND R AMAMOOR THI , R. 2005. Efficiently combining positions and normals for precise 3D geometry. ACM Trans. on Graphics 24, 3, 536?543. N ITSCHKE , C., N AKAZAWA , A., AND T AKEMURA , H. 2007. Real-time space carving using graphics hardware. IEICE Trans. E90-D, 8, 1175?1184. O HTAKE , Y., B ELYAEV , A., A LEXA , M., T URK , G., AND S EI DEL , H.-P. 2003. Multi-level partition of unity implicits. ACM Trans. on Graphics 22, 3, 463?470. P AULY , M., M ITRA , N. J., G IESEN , J., G ROSS , M., AND G UIBAS , L. J. 2005. Example-based 3D scan completion. Eurographics Symp. on Geometry Processing, 23?32. P FISTER , H., Z WICKER , M., VAN B AAR , J., AND G ROSS , M. 2000. Surfels: surface elements as rendering primitives. of ACM SIGGRAPH, 335?342. S CHNABEL , R., D EGENER , P., AND K LEIN , R. 2009. Completion and reconstruction with primitive shapes. Computer Graphics Forum (Proc. of Eurographics) 28, 2, 503?512. S HARF , A., A LEXA , M., AND C OHEN -O R , D. 2004. Contextbased surface completion. ACM Trans. on Graphics 23, 3, 878? 887. S ORKINE , O., AND C OHEN -O R , D. 2004. Least-squares meshes. IEEE Conf. on Shape Modeling and Applications, 191? 199. T AGLIASACCHI , A., Z HANG , H., AND C OHEN -O R , D. 2009. Curve skeleton extraction from incomplete point cloud. ACM Trans. on Graphics 28, 3, Article 71, 9 pages. T URK , G., AND L EVOY , M. 1994. Zippered polygon meshes from range images. of ACM SIGGRAPH, 311?318. W ESTOVER , L. 1990. Footprint evaluation for volume rendering. of ACM SIGGRAPH, 367?376.",
  "resources" : [ ]
}