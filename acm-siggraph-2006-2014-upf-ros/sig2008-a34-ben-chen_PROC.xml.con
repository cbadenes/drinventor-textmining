{
  "uri" : "sig2008-a34-ben-chen_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2008/a34-ben-chen_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Variational Harmonic Maps for Space Deformation",
    "published" : "2009",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Mirela-Ben-Chen",
      "name" : "Mirela",
      "surname" : "Ben-Chen"
    }, {
      "uri" : "http://drinventor/Ofir-Weber",
      "name" : "Ofir",
      "surname" : "Weber"
    }, {
      "uri" : "http://drinventor/Craig-Gotsman",
      "name" : "Craig",
      "surname" : "Gotsman"
    } ]
  },
  "bagOfWords" : [ "we", "implement", "we", "Variational", "Harmonic", "Map", "-lrb-", "vhm", "-rrb-", "deformation", "system", "plugin", "maya", "commercial", "modeling", "animation", "system", "optimization", "deformation", "step", "VHM", "include", "two", "building", "block", "SVD", "computation", "matrix", "dense", "matrix-vector", "multiply", "dense", "matrix-vector", "multiply", "operation", "``", "embarrassingly", "parallel", "''", "sense", "compose", "many", "independent", "operation", "-lrb-", "multiply", "one", "row", "one", "column", "-rrb-", "which", "can", "perform", "parallel", "we", "have", "exploit", "implement", "computation", "equation", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "GPU", "we", "use", "nvidia?s", "CUDA", "programming", "language", "BLAS", "library", "Nvidia", "Quadro", "FX", "5800", "graphic", "card", "figure", "1-3", "6-14", "accompany", "video", "demonstrate", "application", "VHM", "different", "deformation", "scenario", "section", "we", "first", "compare", "VHM", "two", "other", "state-of-the-art", "deformation", "method", "discuss", "some", "its", "property", "comparison", "we", "compare", "performance", "VHM", "two", "state-of-the-art", "deformation", "method", "``", "embed", "deformation", "''", "-lrb-", "ED", "-rrb-", "Sumner", "et", "al.", "-lsb-", "2007", "-rsb-", "``", "adaptive", "rigid", "cell", "''", "-lrb-", "ARC", "-rrb-", "Botsch", "et", "al.", "-lsb-", "2007", "-rsb-", "we", "compare", "method", "three", "deformation", "scenario", "synthetic", "model", "one", "deformation", "beast", "model", "measure", "overall", "appearance", "deform", "shape", "detail", "preservation", "change", "total", "volume", "shape", "Software", "kindly", "provide", "respective", "author", "before", "start", "comparison", "we", "should", "state", "upfront", "some", "disadvantage", "VHM", "its", "biggest", "downside", "compare", "ED", "ARC", "additional", "shape", "deform", "user", "must", "also", "supply", "cage", "bound", "domain", "set", "``", "rigidity", "line", "''", "although", "generate", "rigidity", "line", "relatively", "painless", "-lrb-", "e.g.", "use", "skeleton", "extraction", "algorithm", "-lsb-", "Au", "et", "al.", "2008", "-rsb-", "-rrb-", "create", "cage", "trivial", "problem", "mostly", "understate", "exist", "cage-based", "deformation", "method", "respect", "method", "which", "automatically", "generate", "underlying", "space", "representation", "deformation", "graph", "ED", "voxelization", "ARC", "have", "advantage", "other", "hand", "we", "believe", "benefit", "have", "cage", "closed", "form", "expression", "deformation", "faster", "optimization", "separation", "unrelated", "part", "shape", "outweigh", "hassle", "generate", "cage", "Figure", "show", "comparison", "between", "VHM", "ED", "ARC", "``", "bar", "''", "shape", "three", "different", "deformation", "VHM", "ED", "method", "we", "use", "same", "constraint", "ARC", "we", "achieve", "deformation", "through", "interactive", "manipulation", "result", "show", "ARC", "after", "final", "rbf", "interpolation", "step", "VHM", "ARC", "ED", "from", "leave", "right", "-rrb-", "VHM", "cage", "anchor", "arc", "cell", "-lrb-", "320", "-rrb-", "ed", "deformation", "graph", "-lrb-", "187", "vertex", "-rrb-", "-lrb-", "bottom", "-rrb-", "VHM", "ARC", "ED", "constraint", "Figure", "show", "setup", "we", "use", "deformation", "Figure", "Figure", "10", "show", "comparison", "setup", "deformation", "beast", "model", "model", "be", "interactively", "deform", "reach", "require", "pose", "cell", "-lrb-", "2148", "-rrb-", "ed", "deformation", "graph", "-lrb-", "300", "vertex", "-rrb-", "-lrb-", "bottom", "-rrb-", "VHM", "ARC", "ED", "constraint", "compare", "detail", "preservation", "different", "model", "we", "compute", "rigidity", "distortion", "triangle", "deform", "mesh", "which", "define", "similarly", "Liu", "et", "al.", "-lsb-", "2008", "-rsb-", "rigid", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "where", "area", "source", "triangle", "singular", "value", "Jacobian", "transformation", "transform", "source", "planar", "triangle", "deform", "planar", "triangle", "ideally", "we", "would", "like", "compare", "singular", "value", "Jacobian", "3d", "transformation", "since", "other", "two", "method", "we", "do", "have", "access", "actual", "deformation", "function", "rather", "only", "end", "result", "unfortunately", "easily", "do", "addition", "we", "compare", "change", "total", "volume", "deform", "shape", "volume", "vol", "new", "vol", "orig", "vol", "orig", "comparison", "error", "give", "Table", "can", "see", "from", "figure", "10", "Table", "result", "VHM", "comparable", "those", "ARC", "however", "VHM", "considerably", "more", "efficient", "-lrb-", "show", "Table", "-rrb-", "also", "simpler", "implement", "when", "compare", "ED", "we", "method", "somewhat", "better", "both", "visual", "quality", "result", "Figure", "show", "ed", "method", "have", "some", "noise", "issue", "volume", "preservation", "locality", "deformation", "Figure", "11", "demonstrate", "VHM", "have", "local", "effect", "only", "region", "geodesically", "close", "manipulate", "region", "modify", "oppose", "unrelated", "region", "which", "happen", "close", "euclidean", "distance", "index", "finger", "hand", "may", "move", "without", "influence", "other", "finger", "beast", "model", "note", "exaggerated", "hand", "foot", "-lrb-", "right", "-rrb-", "another", "asap", "deformation", "color", "coding", "condition", "number", "Jacobian", "deformation", "sample", "input", "cage", "graph", "show", "histogram", "value", "as-similar-as-possible", "deformation", "one", "benefit", "we", "``", "local/global", "''", "optimization", "scheme", "constraint", "jacobian", "matrix", "anchor", "point", "can", "easily", "change", "from", "rigidity", "constraint", "other", "type", "constraint", "simply", "modify", "local", "step", "optimization", "algorithm", "example", "do", "previous", "``", "local/global", "''", "base", "method", "-lsb-", "Liu", "et", "al.", "2008", "-rsb-", "we", "can", "replace", "rigidity", "constraint", "similarity", "constraint", "require", "jacobian", "matrix", "anchor", "point", "similarity", "transform", "local", "step", "modify", "replace", "``", "normalization", "''", "step", "jacobian", "matrix", "follow", "procedure", "compute", "SVD", "each", "matrix", "usv", "replace", "US", "new", "where", "new", "diagonal", "matrix", "whose", "entry", "average", "diagonal", "entry", "deformation", "asrigid-as-possible", "anymore", "introduce", "uniform", "scale", "however", "can", "see", "Figure", "12", "accompany", "video", "interesting", "exaggeration", "effect", "can", "generate", "way", "some", "application", "one", "might", "require", "deformation", "quasi-conformal", "mean", "condition", "number", "Jacobian", "deformation", "bound", "case", "assimilar-as-possible", "approach", "more", "appropriate", "than", "asrigid-as-possible", "approach", "Figure", "12", "show", "color-code", "condition", "number", "Jacobian", "sample", "point", "inside", "cage", "beast", "model", "show", "deformation", "addition", "figure", "show", "histogram", "value", "evident", "from", "figure", "condition", "number", "smaller", "than", "3.5", "which", "indicate", "deformation", "quasi-conformal", "quasiconformal", "factor", "similar", "Green", "coordinate", "-lsb-", "Lipman", "et", "al.", "2008", "-rsb-", "oppose", "direct", "manipulation", "method", "-lsb-", "Botsch", "et", "al.", "2007", "Sumner", "et", "al.", "2007", "-rsb-", "which", "build", "underlie", "representation", "automatically", "cage", "base", "method", "-lsb-", "Lipman", "et", "al.", "2008", "-rsb-", "usually", "rely", "manually", "model", "cage", "we", "also", "use", "manually", "model", "cage", "since", "we", "approach", "cage", "only", "mathematical", "tool", "visible", "user", "important", "check", "how", "sensitive", "deformation", "cage", "use", "specifically", "we", "would", "like", "verify", "two", "reasonable", "cage", "result", "similar", "deformation", "when", "user", "constraint", "identical", "investigate", "we", "implement", "straightforward", "algorithm", "generate", "simple", "cage", "uniform", "decomposition", "space", "follow", "merge", "neighbor", "co-planar", "face", "cage", "would", "somewhat", "hard", "manipulate", "manually", "since", "we", "method", "user", "do", "manipulate", "cage", "directly", "issue", "we", "apply", "algorithm", "``", "beast", "''", "model", "from", "Figure", "use", "manually", "build", "automatic", "cage", "we", "deform", "model", "interactively", "Figure", "13", "show", "two", "cage", "deformation", "result", "from", "they", "evident", "from", "figure", "deformation", "induce", "two", "cage", "very", "similar", "indicate", "we", "method", "very", "sensitive", "precise", "cage", "use", "non-articulated", "shape", "some", "object", "plate-like", "object", "do", "have", "obvious", "skeleton", "case", "we", "method", "can", "still", "apply", "place", "anchor", "medial", "surface", "instead", "medial", "axis", "Figure", "14", "show", "two", "deformation", "``", "bumpy", "plane", "''", "model", "use", "different", "anchor", "configuration", "both", "case", "anchor", "be", "place", "medial", "surface", "model", "exact", "placement", "different", "figure", "show", "result", "deformation", "very", "similar", "indicate", "we", "method", "very", "sensitive", "exact", "location", "anchor", "medial", "surface", "figure", "also", "show", "comparison", "result", "deformation", "same", "model", "use", "arc", "method", "VHM", "VHM", "ARC", "Efficiency", "Table", "provide", "model", "statistics", "deformation", "time", "millisecond", "we", "example", "deformation", "timing", "break", "down", "time", "one", "optimization", "iteration", "-lrb-", "label", "``", "solve", "''", "-rrb-", "time", "matrix-vector", "multiply", "which", "generate", "deformation", "-lrb-", "label", "``", "def", "''", "-rrb-", "preprocessing", "time", "all", "model", "less", "than", "minute", "clear", "from", "table", "we", "solve", "time", "considerably", "faster", "than", "those", "report", "arc", "-lsb-", "Botsch", "et", "al.", "2007", "-rsb-", "ed", "-lsb-", "Sumner", "et", "al.", "2007", "-rsb-", "which", "be", "run", "machine", "spec", "similar", "ours", "example", "solve", "step", "ED", "Giraffe", "model", "require", "120", "msec", "use", "six", "Gauss-Newton", "iteration", "use", "arc", "method", "solve", "step", "model", "50,000", "vertex", "require", "330", "msec", "single", "Newton", "iteration", "larger", "model", "79,000", "vertex", "solve", "step", "VHM", "require", "only", "12", "msec", "VHM", "solve", "include", "GPU", "optimization", "-lrb-", "global", "part", "``", "local/global", "''", "algorithm", "-rrb-", "whereas", "other", "method", "implement", "CPU", "however", "ARC", "ED", "optimization", "algorithm", "base", "Gauss-Newton", "iteration", "use", "large", "sparse", "matrix", "algorithm", "considerably", "harder", "parallelize", "than", "dense", "matrix-vector", "multiply", "which", "can", "implement", "use", "off-the-shelf", "CUDA", "code", "hence", "one", "compare", "best", "possible", "implementation", "method", "ours", "have", "distinct", "advantage", "deformation", "time", "also", "very", "fast", "10", "msec", "170,000", "vertex", "armadillo", "model", "Model", "Verts", "Ancrs", "Iters", "we", "have", "propose", "new", "space", "deformation", "method", "-lrb-", "Variational", "Harmonic", "mapping", "VHM", "-rrb-", "whose", "underlie", "mathematical", "model", "harmonic", "mapping", "use", "mapping", "its", "derivative", "we", "define", "energy", "function", "whose", "minimization", "allow", "user", "deform", "shape", "use", "small", "number", "position", "orientation", "constraint", "we", "show", "how", "minimize", "energy", "use", "very", "efficient", "iterative", "``", "local/global", "''", "algorithm", "demonstrate", "result", "deformation", "close", "as-rigidas-possible", "deformation", "its", "quality", "comparable", "state-of-theart", "space", "deformation", "method", "while", "be", "considerably", "faster", "future", "we", "hope", "further", "explore", "variational", "harmonic", "mapping", "setting", "other", "than", "deformation", "due", "similarity", "boundary", "element", "method", "-lrb-", "bem", "-rrb-", "-lsb-", "Kythe", "1995", "-rsb-", "we", "method", "might", "also", "effective", "find", "solution", "different", "interpolation", "problem", "moreover", "we", "would", "like", "investigate", "theoretical", "property", "we", "deformation", "its", "relation", "quaternionic", "analytic", "function" ],
  "content" : "We implemented our ?Variational Harmonic Map? (VHM) deformation system as a plugin to the Maya ? commercial modeling and animation system. The optimization and deformation step of VHM include two building blocks ? SVD computations of 3?3 matrices, and dense matrix-vector multiply. Dense matrix-vector multiply operations are \"embarrassingly parallel\" in the sense that they are composed of many independent operations (multiplying one row by one column), which can be performed in parallel. We have exploited this by implementing the computation of Equations (7) and (8) on the GPU. We used Nvidia?s CUDA programming language with the BLAS library, on an Nvidia Quadro FX 5800 graphics card. Figures 1-3, 6-14 and the accompanying  video demonstrate the application of VHM to different deformation scenarios. In this section we will first compare VHM to two other state-of-the-art deformation methods, and then discuss some of its properties. Comparison. We compared the performance of VHM to two state-of-the-art deformation methods: \"Embedded Deformation\" (ED) of Sumner et al. [2007] and \"Adaptive Rigid Cells\" (ARC) of Botsch et al. [2007]. We compared these methods on three deformation scenarios of a synthetic model, and on one deformation of the beast model ? measured by the overall appearance of the deformed shape, the detail preservation and the change in the total volume of the shape. Software was kindly provided by the respective authors. Before starting the comparison we should state upfront some disadvantages of VHM. Its biggest downside, compared to ED and ARC, is that in additional to the shape to be deformed, the user must also supply a cage bounding the domain, and a set of \"rigidity lines\". Although generating the rigidity lines is relatively painless (e.g. using a skeleton extraction algorithm such as [Au et al. 2008]), creating a cage is not a trivial problem, and this is mostly understated in existing cage-based deformation methods. In this respect, methods which automatically generate the underlying space representation ? the deformation graph for ED and the voxelization for ARC, have an advantage. On the other hand, we believe the benefits of having a cage ? a closed form expression for the deformation, faster optimization and separation of unrelated parts of the shape ? outweigh the hassle of generating such a cage. Figure 8 shows a comparison between VHM, ED and ARC for the \"bar\" shape, with three different deformations. For VHM and ED methods, we used the same constraints. For ARC, we achieved the deformation through interactive manipulation. The results shown for ARC are after the final RBF interpolation step. VHM ARC ED from left to right) VHM cage and anchors, ARC cells (320) and ED deformation graph (187 vertices). (bottom) The VHM, ARC and ED constraints. Figure 9 shows the setup we used for the deformations in Figure 8 . Figure 10 shows the comparison and setup for the deformation of the beast model. The models were interactively deformed to reach the required pose. cells (2148) and ED deformation graph (300 vertices), (bottom) the VHM, ARC and ED constraints. To compare the detail preservation of the different models, we computed the rigidity distortion of the triangles of the deformed mesh, which is defined similarly to Liu et al. [2008] as: m m E Rigid = ? t = 1 A t ? ? ? ( ? 1, t ? 1 ) 2 + ( ? 2, t ? 1 ) 2 ? ? ? ? t = 1 A t where A t is the area of the source triangle, and ? 1,t and ? 2,t are the singular values of the Jacobian of the 2?2 transformation, that transforms the source planar triangle to the deformed planar triangle. Ideally, we would like to compare the singular values of the Jacobian of the 3D transformation, but since for the other two methods we do not have access to the actual deformation function, rather only the end result, this is, unfortunately, not easily done. In addition, we compared the change in the total volume of the deformed shape as: E volume = vol new ? vol orig vol orig The comparison of these errors is given in Table 1 . As can be seen from Figures 8 and 10, and Table 1 , the results of VHM are comparable to those of ARC, however VHM is considerably more efficient (as is shown in Table 2 ), and also simpler to implement. When compared to ED, our method is somewhat better, both in the visual quality of the results ? Figure 8 shows that the ED method has some noise issues and in volume preservation. Locality of the deformation. Figure 11 demonstrates that VHM has a local effect, and only regions geodesically close to the manipulated regions are modified, as opposed to unrelated regions which happen to be close in Euclidean distance ? the index finger of the hand may be moved without influencing the other fingers. Beast model. Note the exaggerated hands and feet. (right) Another ASAP deformation, and the color coding of the condition number of the Jacobian of the deformation, sampled on the input cage. The graph shows the histogram of these values. As-Similar-As-Possible deformations. One of the benefits of our \"local/global\" optimization scheme is that the constraints on the Jacobian matrices of the anchor points can be easily changed from rigidity constraints to other types of constraints, simply by modifying the local step in the optimization algorithm. For example, as was done in previous \"local/global\" based methods, such as [Liu et al. 2008], we can replace the rigidity constraints with similarity constraints by requiring the Jacobian matrices of the anchor points to be similarity transforms. The local step is modified by replacing the \"normalization\" step of the Jacobian matrices with the following procedure: Compute the SVD for each matrix R i =USV T , and replace it with US new V T , where S new is a diagonal matrix, whose entries are the average of the diagonal entries of S. Such a deformation will not be AsRigid-As-Possible anymore, as it introduces uniform scale. However, as can be seen in Figure 12 and in the accompanying video, interesting exaggeration effects can be generated this way. For some applications, one might require the deformation to be quasi-conformal, meaning that the condition number of the Jacobian of the deformation is bounded. In these cases, the AsSimilar-As-Possible approach is more appropriate than the AsRigid-As-Possible approach. Figure 12 shows the color-coding of the condition number of the Jacobian, for sampled points inside the cage of the Beast model, for the shown deformation. In addition, the figure shows the histogram of these values. As is evident from the figure, the condition numbers are smaller than 3.5, which indicates that this deformation is quasi-conformal, with a quasiconformal factor similar to the that of the Green coordinates [Lipman et al. 2008]. As opposed to direct manipulation methods [Botsch et al. 2007, Sumner et al. 2007], which build the underlying representation automatically, cage based methods such as [Lipman et al. 2008] usually rely on a manually modeled cage. We also use manually modeled cages, but since in our approach the cages are only a mathematical tool, and are not visible to the user, it is important to check how sensitive the deformation is to the cage used. Specifically, we would like to verify that two reasonable cages result in similar deformations, when the user constraints are identical. To investigate this, we implemented a straightforward algorithm to generate a simple cage by uniform decomposition of space, followed by merging neighboring co-planar faces. Such cages would be somewhat hard to manipulate manually, but since in our method the user does not manipulate the cage directly, this is not an issue. We applied this algorithm to the \"Beast\" model from Figure 1 , and using the manually built and automatic cages, we deformed the model interactively. Figure 13 shows the two cages, and the deformations resulting from them. As is evident from the figure, the deformations induced by the two cages are very similar, indicating that our method is not very sensitive to the precise cage used. Non-articulated shapes. Some objects, such as plate-like objects, do not have an obvious skeleton. In these cases, our method can still be applied by placing the anchors on the medial surface instead of on the medial axis. Figure 14 shows two deformation of a \"Bumpy plane\" model, using different anchors configurations. In both cases, the anchors were placed on the medial surface of the model, but their exact placement was different. As the figure shows, the resulting deformations are very similar, indicating that our method is not very sensitive to the exact locations of the anchors on the medial surface. The figure also shows the comparison of the results to the deformation of the same model using the ARC method. VHM\n        VHM\n        ARC Efficiency. Table 2 provides the model statistics and the deformation times in milliseconds for our examples. The deformation timing is broken down into the time for one optimization iteration (labeled \"Solve\") and the time for the matrix-vector multiply which generates the deformation (labeled \"Def\"). The preprocessing time for all the models was less than a minute. It is clear from the table that our solve times are considerably faster than those reported for ARC [Botsch et al. 2007] and ED [Sumner et al. 2007], which were run on machines with spec similar to ours. For example, the solve step of ED for the Giraffe model requires 120 msecs, using six Gauss-Newton iterations. Using the ARC method, the solve step for a model with 50,000 vertices requires 330 msecs for a single Newton iteration. For a larger model of 79,000 vertices, the solve step of VHM requires only 12 msecs. The VHM solve includes GPU optimization (for the global part of the \"local/global\" algorithm), whereas the other methods are implemented on the CPU. However, the ARC and ED optimization algorithms are based on Gauss-Newton iterations using a large sparse matrix. Such algorithms are considerably harder to parallelize than dense matrix-vector multiplies, which can be implemented using off-the-shelf CUDA code. Hence, if one is to compare the best possible implementation of the methods, ours has a distinct advantage. The deformation times are also very fast, with 10 msecs for the 170,000 vertex Armadillo model. Model Verts\n        Ancrs Iters We have proposed a new space deformation method (?Variational Harmonic Mapping? ? VHM) whose underlying mathematical model is a harmonic mapping. Using this mapping and its derivatives, we defined an energy function whose minimization allows the user to deform the shape using a small number of position and orientation constraints. We showed how to minimize the energy using a very efficient iterative \"local/global\" algorithm and demonstrated that the resulting deformation is close to an As-RigidAs-Possible deformation. Its quality is comparable to state-of-theart space deformation methods, while being considerably faster. In the future we hope to further explore variational harmonic mappings in settings other than deformation. Due to the similarity to boundary element methods (BEM) [Kythe 1995], our method might also be effective in finding solutions to different interpolation problems. Moreover, we would like to investigate the theoretical properties of our deformation, and its relation to quaternionic analytic functions.",
  "resources" : [ ]
}