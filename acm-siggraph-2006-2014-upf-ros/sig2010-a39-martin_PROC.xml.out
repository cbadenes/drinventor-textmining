{
  "uri" : "sig2010-a39-martin_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2010/a39-martin_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Unified Simulation of Elastic Rods, Shells, and Solids",
    "published" : "2010",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Sebastian-Martin",
      "name" : "Sebastian",
      "surname" : "Martin"
    }, {
      "uri" : "http://drinventor/Peter-Kaufmann",
      "name" : "Peter",
      "surname" : "Kaufmann"
    }, {
      "uri" : "http://drinventor/Mario-Botsch",
      "name" : "Mario",
      "surname" : "Botsch"
    }, {
      "uri" : "http://drinventor/Eitan-Grinspun",
      "name" : "Eitan",
      "surname" : "Grinspun"
    }, {
      "uri" : "http://drinventor/Markus H.-Gross",
      "name" : "Markus H.",
      "surname" : "Gross"
    } ]
  },
  "bagOfWords" : [ "unify", "we", "mean", "code", "do", "distinguish", "between", "form", "we", "draw", "motivation", "from", "previous", "unification", "effort", "set", "apart", "we", "emphasis", "physical", "correctness", "specifically", "convergence", "continuum", "model", "contribution", "we", "derive", "simple", "quadrature", "rule", "volumetric", "deformation", "field", "stably", "accurately", "resolve", "store", "deformation", "energy", "regardless", "-lrb-", "local", "-rrb-", "form", "evaluate", "quadrature", "rule", "point", "we", "call", "elaston", "we", "obtain", "elastoplastic", "force", "act", "simulation", "degree", "freedom", "-lrb-", "dof", "-rrb-", "we", "use", "elaston", "independent", "representation", "volumetric", "deformation", "field", "choice", "dof", "we", "demonstrate", "efficient", "accurate", "simulation", "which", "converge", "smooth", "underlie", "continuum", "formulation", "ensure", "simulation", "consistent", "under", "resample", "refinement", "geometry", "approach", "extend", "beyond", "scope", "standard", "benchmark", "without", "any", "modification", "implementation", "we", "demonstrate", "compelling", "example", "non-manifold", "geometry", "-lrb-", "where", "classical", "rod", "shell", "model", "break", "down", "-rrb-", "hybrid", "form", "can", "discretely", "classify", "rod", "shell", "solid", "-lrb-", "where", "classical", "rod", "shell", "model", "do", "apply", "na?ve", "implementation", "volumetric", "elastica", "suffer", "from", "poor", "numeric", "-rrb-", "set", "stage", "principled", "specialize", "efficient", "graphical", "model", "rod", "-lsb-", "Pai", "2002", "Spillmann", "Teschner", "2007", "Hadap", "et", "al.", "2007", "-rsb-", "shell", "-lsb-", "Cirak", "et", "al.", "2000", "Grinspun", "et", "al.", "2003", "-rsb-", "vol", "ume", "-lsb-", "o?brien", "Hodgins", "1999", "Irving", "et", "al.", "2007", "Bargteil", "et", "al.", "2007", "-rsb-", "more", "recent", "interest", "mesh-free", "shell", "-lsb-", "Wicke", "et", "al.", "2005", "Guo", "et", "al.", "2006", "-rsb-", "volume", "-lsb-", "M?ller", "et", "al.", "2004", "Gerszewski", "et", "al.", "2009", "-rsb-", "Sifakis", "et", "al.", "-lsb-", "2007", "-rsb-", "formulate", "all-purpose", "glue", "pass", "force", "constraint", "between", "various", "physical", "model", "use", "soft", "hard", "binding", "method", "model", "physics", "interaction", "between", "two", "black-box", "codebase", "also", "easily", "extend", "exist", "code", "handle", "non-manifold", "geometry", "however", "can", "require", "computation", "non-physical", "mass", "associate", "binding", "particle", "Stam?s", "Nucleus", "-lsb-", "2009", "-rsb-", "efficiently", "enforce", "compete", "constraint", "arbitrary", "simplicial", "complex", "capture", "diverse", "range", "material", "work", "Wojtan", "et", "al.", "-lsb-", "2008", "-rsb-", "Nesme", "et", "al.", "-lsb-", "2009", "-rsb-", "show", "embed", "high", "resolution", "surface", "volumetric", "field", "yield", "single", "unified", "method", "can", "efficiently", "plausibly", "simulate", "diverse", "range", "viscous", "plastic", "material", "elastic", "material", "might", "well-captured", "incorporate", "we", "propose", "deformation", "field", "represent", "gml", "integrate", "use", "elaston", "Notation", "we", "derivation", "begin", "classical", "theory", "solid", "elastica", "consider", "material", "whose", "undeformed", "position", "-lrb-", "-rrb-", "parameterize", "curvilinear", "coordinate", "-lrb-", "-rrb-", "over", "material", "domain", "let", "comma", "denote", "partial", "differentiation", "e.g.", "??", "ik", "??", "??", "while", "dot", "-lrb-", "-rrb-", "cross", "-lrb-", "-rrb-", "colon", "-lrb-", ":-rrb-_NN", "denote", "vector", "dot", "product", "vector", "cross", "product", "tensor", "contraction", "respectively", "Cauchy", "strain", "valid", "only", "small", "displacement", "we", "implementation", "use", "corotational", "approach", "handle", "large", "displacement", "-lsb-", "Veubeke", "1976", "M?ller", "et", "al.", "2002", "Hauth", "Strasser", "2004", "-rsb-", "force", "elastic", "material", "strain", "lead", "restore", "force", "represent", "stress", "tensor", "internal", "elastic", "force", "correspond", "variational", "derivative", "elastic", "energy", "dynamic", "behavior", "material", "describe", "govern", "equation", "-lrb-", "-rrb-", "where", "denote", "second", "order", "time", "derivative", "-lrb-", "acceleration", "-rrb-", "density", "material", "damp", "force", "external", "force", "govern", "equation", "typically", "discretize", "use", "volumetric", "-lrb-", "e.g.", "linear", "quadratic", "tetrahedral", "-rrb-", "fes", "-lsb-", "Hughes", "2000", "-rsb-", "use", "meshfree", "Galerkin", "formulation", "-lsb-", "fries", "matthy", "2004", "-rsb-", "difficulty", "motivate", "development", "resultant-based", "formulation", "where", "thin", "body", "treat", "reduce", "set", "equation", "govern", "lower-dimensional", "object?the", "thin", "shell", "middle", "surface?and", "specify", "displacement", "field", "both", "surface", "its", "-lrb-", "normal", "-rrb-", "vicinity", "reduce", "representation", "offer", "superior", "numerical", "conditioning", "convergence", "more", "efficient", "allocation", "dof", "-lsb-", "Naghdi", "1972", "-rsb-", "strain", "about", "middle", "surface", "notational", "convenience", "let", "middle", "surface", "parameterize", "material-domain", "surface", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", ",3", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", ",3", "-lrb-", "-rrb-", "substitute", "-lrb-", "-rrb-", "yield", "strain", "about", "mid-surface", "express", "term", "membrane", "strain", "equation", "-lrb-", "-rrb-", "approximation", "since", "higher", "order", "term", "thin", "direction", "have", "be", "discard", "from", "-lrb-", "-rrb-", "departure", "from", "Kirchhoff-Love", "model", "note", "volumetric", "tensor", "point", "derivation", "typical", "resultant-based", "formulation", "would", "assume", "normal", "vector", "undeformed", "mid-surface", "deform", "retain", "its", "orthogonality", "mid-surface", "kirchhoff-love", "assumption", "yield", "vanish", "normal", "component", "strain", "reduce", "volumetric", "surface", "strain", "tensor", "although", "we", "primary", "concern", "point", "we", "note", "assumption", "nature", "restrictive", "prohibit", "tangential", "shearing", "shell", "effect", "visually", "important", "thick", "shell", "transition", "from", "volumetric", "surface-based", "representation", "would", "advantageous", "exclusive", "treatment", "shell", "also", "primary", "source", "ache", "effort", "consistently", "unite", "specialize", "model", "follow", "classical", "resultant-based", "derivation?but", "only", "halfway?we", "gain", "notion", "measure", "stretch", "separately", "from", "bend", "while", "keep", "unify", "volumetric", "displacement", "require", "unification", "model", "important", "remark", "we", "ready", "resume", "derivation", "Energy", "integration", "elastic", "energy", "we", "volumetric", "shell", "model", "can", "derive", "straightforwardly", "from", "-lrb-", "-rrb-", "replace", "small", "strain", "we", "approximation", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "integration", "normal", "direction", "can", "perform", "analytically", "do", "so", "we", "observe", "cross-term", "vanish", "lead", "integral", "surface", "energy", "density", "over", "mid-surface", "here", "denote", "shell?s", "thickness", "mid-surface", "consider", "next", "volumetric", "curve-like", "solid", "whose", "extent", "along", "-lrb-", "tangent", "direction", "-rrb-", "much", "greater", "than", "along", "-lrb-", "normal", "direction", "span", "cross-sectional", "plane", "-rrb-", "we", "derive", "special", "case", "thin", "rod", "analogously", "identify", "reduce", "geometry", "-lrb-", "centerline", "curve", "-rrb-", "linearize", "strain", "about", "centerline", "-lrb-", "time", "along", "two", "direction", "span", "crosssectional", "neighborhood", "-rrb-", "again", "omit", "collapse", "strain", "tensor", "lower", "dimension", "strain", "about", "centerline", "notational", "convenience", "let", "centerline", "curve", "parameterize", "material-domain", "curve", "-lrb-", "-rrb-", "small", "extent", "along", "both", "normal", "we", "linearly", "approximate", "position", "displacement", "perform", "same", "step", "derivation", "small", "strain", "yield", "its", "linearize", "version", "where", "bend", "strain", "define", "-lrb-", "-rrb-", "assume", "cross-section", "stay", "normal", "would", "lead", "Kirchhoff", "rod", "model", "however", "we", "again", "do", "further", "simplify", "we", "model", "instead", "keep", "strain", "volumetric", "remark", "twist", "twist", "rod", "can", "compute", ",12", ",3", ",13", ",2", "where", "two", "value", "identical", "-lrb-", "up", "sign", "-rrb-", "under", "Kirchhoff", "assumption", "use", "-lrb-", "-rrb-", "linearize", "become", ",12", ",3", ",3", ",12", "from", "-lrb-", "-rrb-", "we", "see", "quantity", "part", "strain", "entry", "13", "31", "12", "21", "show", "we", "bend", "strain", "also", "incorporate", "measurement", "twist", "deformation", "Energy", "integration", "Analytic", "integration", "normal", "direction", "yield", "remain", "one-dimensional", "integral", "axial", "energy", "density", "over", "rod?s", "centerline", "where", "denote", "thickness", "rod", "two", "normal", "direction", "respectively", "again", "higher", "order", "term", "thin", "direction", "discard", "we", "obtain", "store", "deformation", "energy", "solid", "shell", "rod", "deform", "under", "volumetric", "displacement", "field", "u.", "perhaps", "more", "fundamental", "observation", "because", "classification", "discrete", "decision", "change", "classification", "-lrb-", "e.g.", "due", "cut", "extreme", "deformation", "-rrb-", "could", "result", "jump", "elastic", "force", "consequently", "pop", "artifact", "reason", "we", "avoid", "classification", "altogether", "follow", "pattern", "derivation", "solid", "-lrb-", "zero", "normal", "direction", "-rrb-", "shell", "-lrb-", "one", "normal", "-rrb-", "rod", "-lrb-", "two", "normal", "-rrb-", "its", "logical", "conclusion", "elaston", "-lrb-", "three", "normal", "-rrb-", "consider", "volumetric", "point-like", "solid", "whose", "extent", "along", "all", "three", "direction", "small", "time", "reduce", "geometry", "point", "elaston", "we", "notion", "strain", "vicinity", "point", "measure", "linear", "deformation", "stretch", "shear", "center", "well", "quadratic", "deformation", "bend", "twist", "along", "all", "three", "normal", "direction", "Figure", "left", "depict", "four", "essential", "deformation", "mode", "linearize", "strain", "elaston", "center", "-lrb-", "-rrb-", "we", "perform", "first-order", "Taylor", "approximation", "position", "displacement", "time", "all", "three", "normal", "direction", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "substitute", "-lrb-", "-rrb-", "yield", "strain", "center", "about", "elaston", "observe", "expression", "naturally", "generalize", "its", "shell", "-lrb-", "-rrb-", "rod", "-lrb-", "-rrb-", "analogue", "particular", "capture", "stretch", "shear", "bend", "twist", "along", "all", "three", "axis", "Energy", "integration", "recall", "two", "step", "we", "have", "take", "compute", "total", "energy", "from", "strain", "first", "we", "analytically", "integrate", "over", "zero", "one", "two", "normal", "direction", "solid", "shell", "rod", "respectively", "obtain", "tangential", "energy", "density", "finally", "we", "integrate", "energy", "density", "over", "remain", "three", "two", "one", "tangent", "direction", "solid", "shell", "rod", "respectively", "correspondingly", "we", "compute", "elaston?s", "energy", "substitute", "-lrb-", "10", "-rrb-", "-lrb-", "-rrb-", "obtain", "integral", "over", "elaston?s", "volume", "which?since", "all", "three", "direction", "have", "thin", "extent?we", "can", "analytically", "integrate", "obtain", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "12", "-lrb-", "11", "-rrb-", "here", "denote", "thickness", "elaston", "along", "direction", "volume", "elaston", "we", "about", "see", "elaston", "serve", "basic", "building", "block", "assemble", "elastic", "energy", "any", "deformable", "object", "independent", "its", "form", "classical", "goal", "resultant-based", "thin", "shell", "model", "reduce", "dimensionality", "model", "from", "three", "two", "dimension", "thereby", "simplify", "its", "numerical", "treatment", "reduction", "simplify", "formulation", "because", "energy", "integration", "can", "perform", "analytically", "normal", "direction", "we", "adopt", "rather", "unorthodox", "alternative", "perspective", "consider", "volumetric", "solid", "discretize", "family", "shell", "like", "layer", "onion", "deformation", "energy", "each", "sheet", "can", "measure", "use", "thin", "shell", "model", "consider", "all", "sheet", "integration", "scheme", "approximate", "volumetric", "elastic", "energy", "accuracy", "approximation", "govern", "resolution", "slice", "converge", "exact", "energy", "increase", "number", "slice", "likewise", "rod", "model", "serve", "integration", "rule", "shell", "energy", "transitivity", "volumetric", "solid", "therefore", "elaston", "offer", "most", "general", "integration", "rule", "place", "elaston", "along", "rod?s", "centerline", "shell?s", "mid-surface", "throughout", "solid?s", "volume", "we", "can", "approximate", "store", "elastic", "energy", "rod", "shell", "solid", "respectively", "formally", "set", "elaston", "form", "integration", "rule", "approximate", "elastic", "energy", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "ke", "ke", "12", "e?e", "-lrb-", "12", "-rrb-", "where", "denote", "volume", "associate", "elaston", "ke", "membrane", "bend", "strain", "elaston", "evaluate", "its", "center", "equation", "describe", "convenient", "approximation", "elastic", "energy", "which", "allow", "treatment", "solid", "shell", "rod", "unified", "manner", "however", "order", "use", "integration", "rule", "simulation", "two", "further", "requirement", "elaston", "have", "sample", "material", "sufficiently", "densely", "all", "relevant", "deformation", "measure", "undesired", "mode", "can", "appear", "because", "would", "capture", "integration", "rule", "dense", "sampling", "avoid", "problem", "same", "time", "guarantee", "accurate", "integration", "elastic", "energy", "-lrb-", "see", "section", "-rrb-", "we", "also", "have", "requirement", "admissible", "basis", "solution", "space", "need", "reproduce", "constant", "linear", "function", "accurate", "preservation", "linear", "angular", "momentum", "we", "first", "discuss", "second", "point", "we", "consider", "elaston", "general-purpose", "integration", "rule", "solid", "shell", "rod", "remain", "theoretical", "component", "discretization", "displacement", "field", "-lrb-", "-rrb-", "any", "discretization", "twice", "weakly", "differentiable", "-lrb-", "i.e.", "have", "square-integrable", "second", "derivative", "-rrb-", "sufficient", "we", "could", "therefore", "discretize", "use", "standard", "tetrahedral", "hexahedral", "finite", "element", "quadratic", "shape", "function", "volumetric", "tessellation", "however", "would", "less", "suitable", "shell", "rod", "point-based", "discretization", "only", "philosophically", "compatible", "we", "thinking", "elaston", "elastic", "point", "also", "allow", "we", "easily", "take", "advantage", "agnosticism", "elaston", "local", "form", "topology", "-lrb-", "non-manifold", "junction", "-rrb-", "so", "forth", "most", "previous", "meshless", "simulation", "graphic", "-lsb-", "M?ller", "et", "al.", "2004", "Pauly", "et", "al.", "2005", "Gerszewski", "et", "al.", "2009", "-rsb-", "use", "linear", "move", "least", "square", "-lrb-", "ml", "-rrb-", "discretization", "due", "its", "high", "flexibility", "good", "approximation", "property", "-lrb-", "see", "-lsb-", "fries", "matthy", "2004", "-rsb-", "overview", "-rrb-", "undeformed", "object", "sample", "point", "...", "each", "which", "associate", "displacement", "dof", "ir", "displacement", "field", "-lrb-", "-rrb-", "represent", "polynomial", "-lrb-", "-rrb-", "vector", "monomial", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "coefficient", "-lrb-", "-rrb-", "latter", "determine", "local", "least", "square", "fit", "displacement", "i.e.", "minimize", "where", "-lrb-", "-rrb-", "denote", "classic", "MLS", "weighting", "kernel", "we", "apply", "commonly", "use", "weighting", "kernel", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "we", "implementation", "-lsb-", "fries", "matthy", "2004", "-rsb-", "analytically", "minimize", "-lrb-", "-rrb-", "set", "yield", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "motivation", "gml", "above", "equation", "reveal", "important", "limitation", "classical", "ml", "shape", "function", "-lrb-", "-rrb-", "guarantee", "invertible", "matrix", "-lrb-", "-rrb-", "have", "sufficiently", "many", "sample", "support", "point", "evaluation", "-lrb-", "determine", "-lrb-", "-rrb-", "-rrb-", "sample", "must", "coplanar", "condition", "unacceptable", "when", "simulate", "shell", "rod", "which", "naturally", "represent", "-lrb-", "locally", "nearly", "-rrb-", "coplanar", "colinear", "sampling", "we", "could", "perhaps", "artificially", "construct", "volumetric", "sampling", "-lrb-", "away", "from", "mid-surface", "centerline", "-rrb-", "add", "point", "along", "normal", "direction", "-lrb-", "-rrb-", "too", "litter", "peril", "too", "many", "dof", "normal", "direction", "lead", "rank-deficient", "system", "since", "allow", "more", "deformation", "mode", "than", "can", "actually", "measure", "-lrb-", "coplanar", "colinear", "-rrb-", "elaston", "pursue", "simpler", "approach", "we", "discretize", "displacement", "field", "use", "generalize", "move", "least", "square", "-lrb-", "gml", "-rrb-", "extension", "classical", "ml", "approximation", "Hermite", "datum", "-lsb-", "Atluri", "et", "al.", "1999", "fries", "matthy", "2004", "-rsb-", "gml", "we", "concentrate", "all", "displacement", "information", "normal", "direction", "-lrb-", "-rrb-", "point", "locate", "mid-surface", "centerline", "sidestep", "volumetric", "sampling", "linear", "gml", "addition", "its", "displacement", "dof", "each", "sample", "point", "associate", "derivative", "dof", "ir", "-lrb-", "-rrb-", "coefficient", "-lrb-", "-rrb-", "determine", "fitting", "polynomial", "-lrb-", "-rrb-", "both", "value", "derivative", "dof", "simply", "amount", "add", "-lrb-", "-rrb-", "-lrb-", "13", "-rrb-", "error", "term", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "minimize", "result", "like", "norm", "lead", "additional", "basis", "function", "derivative", "information", "augmented", "generalize", "matrix", "use", "construction", "-lrb-", "-rrb-", "-lrb-", "16", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "14", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "compare", "-lrb-", "14", "-rrb-", "outer", "product", "monomial", "derivative", "guarantee", "regular", "matrix", "any", "case?for", "coplanar", "colinear", "sampling", "even", "single", "sample", "point", "independence", "sampling", "make", "gml", "ideal", "choice", "discretize", "deformation", "field", "solid", "shell", "rod", "where", "each", "point", "now", "have", "12", "dof", ",1", ",2", ",3", "ir", "quadratic", "gml", "higher", "accuracy", "faster", "convergence", "desire", "we", "can", "alternatively", "use", "quadratic", "polynomial", "-lrb-", "-rrb-", "-lrb-", "xx", "xy", "xz", "yy", "yz", "zz", "-rrb-", "additionally", "consider", "second", "order", "derivative", "dof", "jk", "-lrb-", "-rrb-", "provide", "30", "dof", "per", "sample", "point", "add", "-lrb-", "-rrb-", "third", "error", "term", "-lrb-", "-rrb-", "jk", "-lrb-", "-rrb-", "jk", "lead", "jk", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "jk", "-lrb-", "-rrb-", "additional", "second-order", "derivative", "shape", "function", "matrix", "-lrb-", "-rrb-", "-lrb-", "jk", "-rrb-", "augment", "second", "time", "-lrb-", "-rrb-", "jk", "-lrb-", "-rrb-", "jk", "-lrb-", "-rrb-", "notational", "convenience", "we", "denote", "follow", "all", "shape", "function", "jk", "dof", "jk", "simply", "respectively", "discretization", "deformation", "field", "hence", "have", "form", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "we", "simulation", "framework", "we", "integrate", "both", "first", "second", "order", "gml", "while", "first", "order", "scheme", "allow", "faster", "simulation", "-lrb-", "12", "dofs/sample", "-rrb-", "second", "order", "discretization", "-lrb-", "30", "dofs/sample", "-rrb-", "provide", "more", "accurate", "result", "converge", "physically", "correct", "solution", "-lrb-", "see", "section", "10", "-rrb-", "first", "second", "order", "method", "have", "same", "structure", "so", "single", "code", "can", "offer", "easy", "trade-off", "between", "speed", "accuracy", "combination", "gmls-based", "deformation", "field", "elastonbased", "integration", "open", "door", "simple", "extendable", "pointbased", "simulation", "we", "implementation", "outline", "below", "input", "point-based", "material", "representation", "precomputation", "generate", "gml", "point", "sampling", "-lrb-", "sec", "9.1", "-rrb-", "generate", "elaston", "sampling", "-lrb-", "sec", "9.1", "-rrb-", "compute", "elaston", "stiffness", "matrix", "-lrb-", "Sec", "9.2", "-rrb-", "Compute", "mass", "matrix", "-lrb-", "sec", "9.2", "-rrb-", "simulation", "loop", "assemble", "global", "stiffness", "matrix", "-lrb-", "sec", "9.2", "-rrb-", "boundary", "condition", "assembly", "-lrb-", "sec", "9.3", "-rrb-", "collision", "detection", "handling", "-lrb-", "sec", "9.3", "-rrb-", "10", "Time", "integration", "-lrb-", "sec", "9.3", "-rrb-", "we", "accept", "input", "high-resolution", "point", "cloud", "-lcb-", "-rcb-", "associate", "radius", "-lcb-", "-rcb-", "i.e.", "we", "represent", "material", "set", "sphere", "-lrb-", "-rrb-", "devoid", "connectivity", "format", "flexible", "intermediary", "between", "datum", "could", "exist", "form", "surface", "volumetric", "mesh", "implicit", "surface", "triangle", "soup", "range", "scan", "just", "point", "give", "input", "cloud", "we", "generate", "position", "-lcb-", "...", "-rcb-", "gml", "sample", "point", "elaston", "center", "-lcb-", "...", "-rcb-", "subsample", "dense", "material", "point", "set", "m.", "dof", "position", "we", "use", "farthest", "point", "sampling", "material", "similar", "-lsb-", "Adams", "et", "al.", "2008", "-rsb-", "start", "from", "subsequent", "sample", "+1", "pick", "greedy", "manner", "maximize", "distance", "point", "-lcb-", "...", "-rcb-", "already", "select", "sampling", "strategy", "result", "uniform", "distribution", "favor", "sample", "boundary", "material", "we", "context", "however", "sample", "should", "ideally", "locate", "mid-surface", "centerline", "we", "therefore", "improve", "sampling", "Lloyd", "relaxation", "-lsb-", "Lloyd", "1957", "-rsb-", "material", "partition", "associate", "each", "material", "point", "its", "closest", "sample", "yield", "discrete", "Voronoi", "diagram", "second", "step", "sample", "reposition", "centroid", "voronous", "cell", "two", "step", "iterate", "until", "convergence", "region", "few", "material", "sample", "certain", "direction", "i.e.", "locally", "shellor", "rod-like", "approach", "lead", "centered", "sample", "position", "solid", "region", "sample", "distribute", "regularly", "volume", "adaptive", "discretization", "vary", "sampling", "density", "can", "achieve", "through", "user-defined", "grading", "field", "simulation", "accuracy", "depend", "ratio", "density", "elaston", "gml", "sample", "-lrb-", "see", "Figure", "-rrb-", "capture", "all", "relevant", "deformation", "mode", "elaston", "should", "sample", "time", "axial", "density", "we", "begin", "elaston", "position", "-lrb-", "-rrb-", "add", "more", "elaston", "-lcb-", "+1", "...", "-rcb-", "farthest", "point", "sampling", "follow", "Lloyd", "relaxation", "improve", "sampling", "theoretical", "completeness", "we", "derivation", "elaston", "section", "assume", "curvilinear", "coordinate", "-lrb-", "-rrb-", "strain", "computation", "implementation", "we", "find", "simpler", "construct", "perelaston", "local", "flat", "parameterization", "so", "each", "undeformed", "elaston", "small", "cuboid", "give", "elaston", "center", "voronoi", "region", "covariance", "analysis", "sphere", "-lrb-", "-rrb-", "yield", "orthogonal", "local", "frame", "eigenvalue", "-lcb-", "-rcb-", "axis", "serve", "undeformed", "first", "derivative", "-lrb-", "tangent", "vector", "-rrb-", "computation", "strain", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "note", "rotate", "two", "tangent", "equal", "length", "around", "common", "normal", "do", "change", "simulation", "accuracy", "-lrb-", "fig.", "right", "-rrb-", "incident", "figure", "show", "material", "point", "-lrb-", "top", "-rrb-", "gml", "sample", "-lrb-", "bottom", "red", "sphere", "-rrb-", "elaston", "local", "frame", "-lrb-", "bottom", "blue", "cross", "-rrb-", "consequence", "we", "assumption", "locally", "flat", "parameterization", "second", "derivative", "jk", "use", "computation", "bend", "strain", "-lrb-", "-rrb-", "vanish", "error", "introduce", "depend", "curvature", "undeformed", "state", "therefore", "can", "reduce", "curvature-adaptive", "sampling", "elaston", "i.e.", "adjust", "grade", "field", "Lloyd", "clustering", "we", "experiment", "have", "show", "remaining", "error", "we", "discrete", "elaston", "integration", "scheme", "insignificant", "compare", "model", "discretization", "error", "-lrb-", "see", "fig.", "-rrb-", "furthermore", "limit", "case", "energy", "single", "elaston", "approach", "exact", "continuous", "energy", "density", "point", "guarantee", "vanish", "integration", "error", "under", "refinement", "after", "set", "up", "discretization", "deformation", "field", "-lrb-", "-rrb-", "-lrb-", "sample", "dof", "-rrb-", "elastic", "energy", "-lrb-", "elaston", "center", "axes", "-rrb-", "we", "proceed", "compute", "system", "matrix", "i.e.", "stiffness", "mass", "matrix", "note", "we", "can", "precompute", "mass", "matrix", "local", "elaston", "stiffness", "matrix", "since", "remain", "constant", "throughout", "elastic", "simulation", "use", "corotational", "strain", "require", "global", "stiffness", "reassembly", "each", "time", "step", "stiffness", "Matrix", "integrate", "membrane", "bend", "strain", "-lrb-", "see", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-rrb-", "we", "need", "first", "second", "order", "derivative", "jk", "jk", "construction", "we", "local", "elaston", "parameterization", "elaston?s", "axis", "jk", "vanish", "write", "deformation", "field", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "we", "have", "first", "derivative", "where", "deformation?s", "jacobian", "matrix", "respect", "cartesian", "coordinate", "second", "order", "derivative", "we", "apply", "same", "projection", "procedure", "exploit", "vanish", "second", "order", "derivative", "lead", "where", "hessian", "respect", "cartesian", "coordinate", "allow", "we", "compute", "both", "strain", "easily", "without", "construct", "global", "parameterization", "we", "perform", "classic", "Galerkin", "discretization", "replace", "continuous", "solution", "-lrb-", "-rrb-", "we", "gml", "approximation", "-lrb-", "-rrb-", "section", "each", "elaston", "lead", "local", "stiffness", "matrix", "which", "we", "construct", "use", "Voigt", "notation", "-lsb-", "Hughes", "2000", "-rsb-", "we", "identify", "all", "basis", "function", "have", "support", "elaston?s", "position", "each", "basis", "function", "we", "compute", "matrix", "correspond", "membrane", "strain", "bend", "strain", "-lrb-", "-rrb-", "give", "term", "row", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-lrb-", "-rrb-", "mod", "-rrb-", "-lrb-", "-lrb-", "-rrb-", "mod", "-rrb-", "use", "constitutive", "tensor", "consider", "-lrb-", "11", "-rrb-", "we", "compute", "block", "ij", "elaston?s", "stiffness", "matrix", "we", "build", "block", "all", "pair", "basis", "function", "have", "support", "elaston?s", "position", "assemble", "elaston", "stiffness", "matrix", "from", "block", "mention", "earlier", "we", "employ", "linear", "strain", "measure", "hessian", "energy", "become", "constant", "which", "enable", "fast", "stable", "simulation", "means", "corotation", "-lsb-", "m?ller", "et", "al.", "2002", "Hauth", "Strasser", "2004", "-rsb-", "Mezger", "et", "al.", "-lsb-", "2008", "-rsb-", "present", "alternative", "approach", "where", "corotation", "perform", "each", "integration", "point", "similarly", "we", "estimate", "local", "rotation", "matrix", "each", "elaston", "polar", "decomposition", "deformation", "gradient", "-lrb-", "-rrb-", "replace", "block", "ij", "rotate", "version", "ij", "et", "global", "stiffness", "matrix", "can", "assemble", "from", "rotate", "elaston", "stiffness", "matrix", "moreover", "vector", "ij", "-lrb-", "et", "-rrb-", "have", "add", "i-th", "vector", "component", "external", "force", "coefficient", "basis", "function", "when", "represent", "undeformed", "configuration", "equal", "DOF", "location", "positional", "dof", "equal", "unit", "vector", "first", "derivative", "dof", "direction", "vanish", "second", "order", "derivative", "dof", "mass", "Matrix", "mass", "matrix", "can", "also", "precompute", "since", "do", "change", "long", "undeformed", "shape", "material", "remain", "unchanged", "because", "we", "have", "non-nodal", "basis", "function", "we", "avoid", "simplification", "mass", "lumping", "instead", "compute", "mass", "matrix", "classically", "assemble", "block", "when", "numerically", "perform", "integration", "we", "have", "pay", "attention", "correctly", "measure", "object?s", "inertia", "consider", "instance", "straight", "rod", "use", "simple", "Monte-Carlo", "integration", "point", "place", "only", "rod?s", "axis", "lead", "wrong", "dynamics", "since", "inertia", "can", "measure", "respect", "rotation", "about", "centerline", "we", "higher", "order", "elaston", "integration", "allow", "we", "compute", "moment", "inertia", "more", "accurately", "thereby", "avoid", "rotation", "artifact", "linearize", "basis", "function", "around", "each", "elaston?s", "center", "-lrb-", "-rrb-", "yield", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "Computing", "integral", "-lrb-", "21", "-rrb-", "sum", "elaston", "integral", "linearize", "shape", "functions?which", "can", "again", "evaluate", "analytically?results", "follow", "approximation", "ij", "-lrb-", "-rrb-", "12", "e?e", "where", "all", "function", "evaluate", "respective", "elaston", "center", "moreover", "basis", "function", "derivative", "already", "know", "from", "stiffness", "matrix", "integration", "Time", "integration", "we", "employ", "simple", "semi-implicit", "euler", "integration", "scheme", "advance", "simulation", "time", "linear", "system", "result", "from", "we", "discretization", "sparse", "symmetric", "positive", "definite", "which", "make", "they", "ideally", "suit", "efficient", "linear", "solver", "we", "choose", "direct", "sparse", "cholesky", "solver", "-lsb-", "Chen", "et", "al.", "2008", "-rsb-", "due", "its", "robustness", "its", "good", "scaling", "property", "boundary", "condition", "simulation", "employ", "nodal", "basis", "function", "-lrb-", "i.e.", "-lrb-", "-rrb-", "-rrb-", "prescribe", "Dirichlet", "constraint", "simply", "correspond", "fix", "vertex", "however", "GMLS", "basis", "function", "interpolate", "require", "different", "approach", "impose", "boundary", "condition", "we", "framework", "we", "employ", "penalty", "method", "since", "simple", "implement", "give", "satisfactory", "result", "do", "introduce", "additional", "dof", "system", "target", "displacement", "can", "impose", "subdomain", "add", "term", "elastic", "energy", "penalize", "deviation", "from", "prescribe", "displacement", "weight", "coefficient", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "lead", "matrix", "block", "ij", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "vector", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "assemble", "stiffness", "matrix", "force", "vector", "respectively", "Collisions", "Collision", "detection", "handling", "point-based", "since", "object", "represent", "dense", "set", "sphere", "-lrb-", "-rrb-", "we", "detect", "collision", "between", "material", "sphere", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "deform", "configuration", "we", "also", "detect", "collision", "analytically", "define", "object", "plane", "cylinder", "we", "respond", "collision", "use", "penalty", "force", "we", "quantitative", "convergence", "analysis", "qualitative", "evaluation", "we", "approach", "follow", "experiment", "demonstrate", "generality", "method", "full", "animation", "example", "show", "accompany", "video", "visualization", "we", "embed", "high-resolution", "triangle", "mesh", "deformation", "field", "which", "could", "however", "replace", "any", "sample-based", "geometry", "representation", "-lrb-", "triangle", "soup", "point", "cloud", "-rrb-", "convergence", "we", "perform", "series", "numerical", "evaluation", "verify", "accuracy", "we", "method", "Figure", "show", "representative", "plot", "solid", "shell", "rod", "which", "subject", "gravitational", "force", "-lrb-", "twist", "lower-right", "rod", "-rrb-", "cube", "constrain", "its", "top", "shell", "rod", "clamp", "left-hand", "side", "depict", "inset", "fig.", "thickness", "shell", "rod", "equal", "one", "percent", "object?s", "side", "length", "limit", "solution", "quadratic", "gml", "show", "good", "correspondence", "we", "reference", "solution", "we", "compare", "hexahedral", "fem", "solid", "Kirchhoff-Love", "shell", "analytic", "solution", "rod", "bend", "twist", "linear", "gml", "appear", "suffer", "from", "lock", "-lrb-", "artificial", "stiffness", "rod", "-rrb-", "convergence", "faster", "than", "simple", "finite", "element", "slower", "than", "highly-specialized", "method", "those", "however", "only", "valid", "specific", "application", "domain", "do", "cover", "same", "range", "different", "geometry", "we", "method", "qualitative", "verification", "we", "also", "verify", "qualitative", "behavior", "we", "model", "couple", "well-known", "test", "case", "shell", "rod", "Figure", "show", "thin", "cylinder", "develop", "expect", "buckle", "pattern", "compress", "Figure", "demonstrate", "we", "able", "reproduce", "characteristic", "dynamic", "behavior", "rod", "build", "plectoneme", "helical", "perversion", "show", "previously", "Spillmann", "Teschner", "-lsb-", "2007", "-rsb-", "Bergou", "et", "al.", "-lsb-", "2008", "-rsb-", "non-manifold", "Connections", "real-world", "object", "often", "consist", "complex", "assembly", "different", "form", "geometry", "we", "method", "able", "handle", "mixed", "case", "unified", "manner", "demonstrate", "fig.", "example", "would", "difficult", "realize", "combine", "several", "specialize", "method", "''", "``", "''", "''", "450.6-7839", "''", "-6", "517839", "''", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "''", "-rrb-", "450.6-7839", "-6", "517839", "''", "figure", "''", "convergence", "we", "method", "compare", "standard", "approach", "''", "analytic", "solution", "clamp", "solid", "shell", "rod", "subject", "''", "gravity", "twist", "plot", "show", "displacement", "value", "furthest", "''", "point", "increase", "-lrb-", "computational", "-rrb-", "complexity", "measure", "number", "non-zero", "stiffness", "matrix", "-rrb-", "-rrb-", "-rrb-", "-rrb-", "-lrb-", "-rrb-", "-rrb-", "plasticity", "object", "can", "only", "transition", "between", "solid", "shell", "rod", "space", "-lrb-", "fig.", "fig.", "-rrb-", "regime", "change", "can", "also", "develop", "over", "time", "-lsb-", "terzopoulo", "Fleischer", "1988", "-rsb-", "plastic", "viscous", "deformation", "instance", "material", "can", "stretch", "thin", "sheet", "strand", "-lrb-", "fig.", "-rrb-", "whose", "elastic", "behavior", "can", "correctly", "capture", "we", "approach", "we", "adapt", "additive", "plasticity", "model", "-lsb-", "O?Brien", "et", "al.", "2002", "M?ller", "et", "al.", "2004", "-rsb-", "we", "approach", "define", "plastic", "membrane", "bend", "strain", "elaston", "incorporate", "plastic", "strain", "we", "representation", "elastic", "energy", "-lrb-", "12", "-rrb-", "yield", "additional", "plastic", "force", "moreover", "order", "allow", "large", "plastic", "deformation", "we", "perform", "periodic", "resampling", "similar", "-lsb-", "Wojtan", "Turk", "2008", "-rsb-", "which", "can", "easily", "integrate", "thanks", "we", "meshless", "framework", "multiplicative", "model", "Gerszewski", "et", "al.", "-lsb-", "2009", "-rsb-", "would", "natural", "next", "step", "cut", "thin", "structure", "can", "also", "show", "up", "dynamically", "due", "cut", "fracture", "we", "handle", "cut", "adapt", "idea", "connectivity", "graph", "-lsb-", "Steinemann", "et", "al.", "2006", "-rsb-", "virtual", "node", "approach", "-lsb-", "Molino", "et", "al.", "2004", "-rsb-", "connectivity", "graph", "material", "point", "implicitly", "define", "connect", "two", "point", "two", "corresponding", "sphere", "-lrb-", "-rrb-", "overlap", "mapping", "material", "point", "elaston", "compute", "during", "Lloyd", "clustering", "define", "connectivity", "elaston", "we", "cut", "disconnect", "material", "point", "consequently", "update", "elaston", "connectivity", "when", "material", "region", "split", "through", "cutting", "we", "generate", "new", "elaston", "each", "result", "connected", "component", "gmls", "basis", "function", "-lrb-", "-rrb-", "resp", "its", "DOF", "position", "value", "duplicated", "its", "region", "influence", "contain", "multiple", "disconnect", "material", "component", "Figure", "show", "block", "material", "be", "cut", "twice", "very", "thin", "slice", "rod", "we", "renderer", "likewise", "cut", "embedded", "triangle", "mesh", "virtual", "node", "also", "enable", "efficient", "simulation", "spatially", "close", "feature", "introduce", "new", "elaston", "splitting", "gml", "sample", "we", "keep", "distinct", "motion", "close", "feature", "while", "avoid", "high", "sampling", "density", "-lrb-", "e.g.", "fish?s", "spike", "fig.", "-rrb-", "more", "detail", "implementation", "plasticity", "cutting", "can", "find", "accompany", "supplementary", "document", "merge", "merge", "object", "we", "simply", "resample", "per", "section", "9.1", "soon", "elaston", "object", "fall", "within", "influence", "another", "object?s", "gml", "basis", "resample", "merge", "object", "when", "merge", "desire", "we", "use", "virtual", "node", "approach", "describe", "above", "fig.", "depict", "four-bunny", "fusion", "Timings", "representative", "selection", "example", "Table", "show", "average", "timing", "matrix", "precomputation", "per-frame", "matrix", "assembly", "per-frame", "solution", "involve", "linear", "system", "can", "observe", "time", "require", "solve", "linear", "system", "depend", "only", "number", "dof", "also", "density", "stiffness", "matrix", "which", "decrease", "from", "solid", "over", "shell", "rod", "while", "measure", "timing", "comparably", "high", "we", "should", "expect", "very", "general", "method", "outperform", "specialized", "method", "sense", "accuracy", "vs.", "computational", "cost", "we", "believe", "when", "unify", "code", "desirable", "simplicity", "generality", "we", "approach", "outweigh", "limitation", "moreover", "note", "matrix", "assembly", "could", "easily", "speed", "up", "parallelize", "strain", "corotation", "over", "all", "elaston", "system", "solve", "-lrb-", "sol", "-rrb-", "take", "Intel", "Core2", "Duo", "2.4", "GHz", "first", "three", "column", "denote", "number", "elaston", "number", "gml", "sample", "number", "dof", "respectively", "synthesis", "elaston-based", "integration", "gmls-based", "displacement", "discretization", "open", "exciting", "avenue", "further", "exploration", "while", "interactive", "basic", "example", "we", "code", "benefit", "from", "optimization", "concrete", "improvement", "First", "we", "rudimentary", "collision", "handle", "framework", "should", "incorporate", "hierarchical", "detection", "acceleration", "stabler", "collision", "response", "second", "we", "implementation", "uniformly", "sample", "integration", "domain", "deformation", "mode", "vary", "widely", "space", "time", "suggest", "profitable", "use", "adaptive", "placement", "integration", "point", "guide", "geometric", "data-driven", "criterion", "-lsb-", "et", "al.", "2008", "-rsb-", "online", "adaptive", "refinement", "simulation", "dof", "would", "help", "detailed", "feature", "crease", "form", "lower", "cost", "expressive", "range", "we", "system", "could", "further", "explore", "we", "use", "simple", "embedded", "triangle", "mesh", "visualize", "detailed", "surface", "which", "complicate", "topological", "change", "cut", "symplectic", "reversible", "integration", "desire", "-lrb-", "e.g.", "eliminate", "numerical", "dissipation", "-rrb-", "geometrically", "nonlinear", "strain", "should", "introduce", "we", "model", "author", "grateful", "Petr", "Krysl", "anonymous", "reviewer", "helpful", "comment", "suggestion", "Sebastian", "Martin", "support", "Swiss", "National", "Science", "Foundation", "-lrb-", "grant", "no.", "200021-117756", "-rrb-", "Mario", "Botsch", "support", "Deutsche", "Forschungsgemeinschaft", "-lrb-", "Center", "Excellence", "cognitive", "interaction", "technology", "citec", "-rrb-", "Eitan", "Grinspun", "support", "Sloan", "Foundation", "NSF", "-lrb-", "MSPA", "award", "iis-05-28402", "CSR", "award", "cns-06-14770", "CAREER", "award", "ccf-06-43268", "-rrb-", "Adobe", "ATI", "Autodesk", "mental", "image", "NVIDIA", "Side", "Effects", "Software", "Walt", "Disney", "Company", "Weta", "Digital" ],
  "content" : "By unified, we mean that the code does not distinguish between forms. We draw motivation from previous unification efforts, but are set apart by our emphasis on physical correctness, specifically convergence to the continuum model. Contributions We derive a simple quadrature rule for volumetric deformation fields that stably and accurately resolves the stored deformation energy regardless of the (local) form. By evaluating this quadrature rule at points we call elastons, we obtain elastoplastic forces acting on the simulation degrees of freedom (DOFs). Our use of elastons is independent of the representation of the volumetric deformation field, or choice of DOFs. We demonstrate efficient, accurate simulations which converge to the smooth underlying continuum formulation, ensuring that simulations are consistent under resampling or refinement of the geometry. But the approach extends beyond the scope of standard benchmarks: without any modification to the implementation, we demonstrate compelling examples on non-manifold geometry (where classical rod or shell models break down) and on hybrid forms that cannot be discretely classified as rods, shells, or solids (where classical rod or shell models do not apply, and na?ve implementations of volumetric elastica suffer from poor numerics). This sets the stage for principled, specialized, efficient graphical models of rods [Pai 2002; Spillmann and Teschner 2007; Hadap et al. 2007], shells [Cirak et al. 2000; Grinspun et al. 2003], and vol umes [O?Brien and Hodgins 1999; Irving et al. 2007; Bargteil et al. 2007], and a more recent interest in mesh-free shells [Wicke et al. 2005; Guo et al. 2006] and volumes [M?ller et al. 2004; Gerszewski et al. 2009]. Sifakis et al. [2007] formulate an ?all-purpose glue? to pass forces and constraints between various physical models using soft and hard bindings; this method models the physics of interactions between two black-box codebases and also easily extends existing codes to handle non-manifold geometry, however it can require the computation of a non-physical mass associated to the binding particles. Stam?s Nucleus [2009] efficiently enforces competing constraints on arbitrary simplicial complexes capturing a diverse range of materials. The works of Wojtan et al. [2008], and Nesme et al. [2009] show that embedding a high resolution surface in a volumetric field yields a single, unified method that can efficiently and plausibly simulate a diverse range of viscous and plastic materials. Elastic materials might be well-captured by incorporating our proposed deformation field represented by GMLS and integrated using elastons. Notation Our derivation begins with the classical theory of solid elastica. Consider a material whose undeformed positions x(?) are  parameterized by curvilinear coordinates ? = (? 1 , ? 2 , ? 3 ) T over the material domain ?. Let the comma denote partial differentiation, e.g., x ,i ? ?x/?? i , u ,ik ? ?? ? i 2 ?? u k , while the dot (?), cross (?), and colon (:) denote the vector dot product, vector cross product, and tensor contraction, respectively. The Cauchy strain is valid only for small displacements; our implementation uses a corotational approach to handle large displacements [Veubeke 1976; M?ller et al. 2002; Hauth and Strasser 2004]. Forces In an elastic material, strain leads to restoring forces represented by a 3 ? 3 stress tensor ?. The internal elastic forces correspond to the variational derivative ?W/?u of the elastic energy. The dynamic behavior of the material is then described by the governing equation ?W ? ? + f d ( u)  ? ? = f , ?u where ? denotes second order time derivative (acceleration), ? the density of the material, f d a damping force, and f the external forces. These governing equations are typically discretized using volumetric (e.g., linear or quadratic tetrahedral) FEs [Hughes 2000], or using meshfree Galerkin formulations [Fries and Matthies 2004]. These difficulties motivate the development of resultant-based formulations, where thin bodies are treated by a reduced set of equations governing a lower-dimensional object?the thin shell middle surface?and specifying the displacement field both on the surface and in its (normal) vicinity. The reduced representation offers superior numerical conditioning, convergence, and more efficient allocation of DOFs [Naghdi 1972]. Strain about middle surface For notational convenience, let the middle surface S be parameterized by the material-domain surface ? 0 = (? 1 , ? 2 , 0). x(?) ? x(? 0 ) + ? 3 x ,3 (? 0 ) , u(?) ? u(? 0 ) + ? 3 u ,3 (? 0 ) . Substituting into (2) yields the strain about the mid-surface expressed in terms of the membrane strain Equation (4) is an approximation since higher order terms in the thin direction ? 3 have been discarded from (6). Departure from Kirchhoff-Love models Note that ? and ? k are volumetric 3 ? 3 tensors. At this point in the derivation, a typical resultant-based formulation would assume that a normal vector to the undeformed mid-surface is deformed such that it retains its orthogonality to the mid-surface. This Kirchhoff-Love assumption yields vanishing normal components for the strain, reducing the 3 ? 3 volumetric to 2 ? 2 surface strain tensors. Although not our primary concern at this point, we note this assumption is by nature restrictive, prohibiting the tangential shearing of a shell, an effect visually important for thick shells. The transition from a volumetric to a surface-based representation would be advantageous for an exclusive treatment of shells, but it is also the primary source of aches in the effort to consistently unite specialized models. By following the classical resultant-based derivation?but only halfway?we gain the notions of measuring stretching separately from bending, while keeping the unified volumetric displacement required for unification of the models. With that important remark, we are ready to resume the derivation. Energy Integration The elastic energy of our volumetric shell model can be derived straightforwardly from (3) by replacing the small strain by our approximation (4): 1 3 3 W = ?(? 0 ) + ? 3 ? (? 0 ) : C : ?(? 0 ) + ? 3 ? (? 0 ) d?. 2 ? The integration in normal direction can be performed analytically. In doing so, we observe that the cross-terms vanish, leading to an integral of the surface energy density over the mid-surface S: Here, h 3 denotes the shell?s thickness and S the mid-surface. Consider next a volumetric curve-like solid whose extent along ? 1 (the ?tangent direction?) is much greater than along ? 2 and ? 3 (the ?normal directions? spanning the ?cross-sectional plane?). We derive this special case of thin rods analogously, identifying the reduced geometry (the centerline curve), linearizing strain about the centerline (this time along the two directions spanning the crosssectional neighborhood), and again omitting the collapse of the strain tensor into a lower dimension. Strain about centerline For notational convenience, let the centerline curve ? be parameterized by the material-domain curve ? 0 = (? 1 , 0, 0). For small extents along both normals ? 2 and ? 3 , we linearly approximate positions and displacements by Performing the same steps for the derivation of the small strain yields its linearized version where the bending strains ? and ? are defined as in (6). Assuming cross-sections to stay normal would lead to the Kirchhoff rod model. However, we again do not further simplify our model, but instead keep the strains volumetric. Remark on Twist The twist of a rod can be computed as x ,12 ?x ,3 or x ,13 ? x ,2 , where the two values are identical (up to their sign) under the Kirchhoff assumptions. Using (1) and linearizing in u this becomes u ,12 ? x ,3 +u ,3 ? x ,12 . From (6) we see that these quantities are part of the strain entries ? 2 13 , ? 31 2 , ? 3 12 , and ? 21 3 , showing that our bending strain also incorporates a measurement for twisting deformations. Energy Integration Analytic integration in the normal directions ? 2 and ? 3 yields the remaining one-dimensional integral of axial energy density over the rod?s centerline ?: where h 2 and h 3 denote the thickness of the rod in the two normal directions ? 2 and ? 3 , respectively. Again, higher order terms in the thin directions ? 2 and ? 3 are discarded. We obtained the stored deformation energy of solids, shells, and rods deforming under the volumetric displacement field u. Perhaps more fundamental is the observation that because classifications are discrete decisions, a change in classification (e.g., due to cutting or extreme deformation) could result in a jump in elastic forces and consequently popping artifacts. For these reasons, we avoid classification altogether, by following the pattern of derivations of solids (zero normal directions), shells (one normal), and rods (two normals) to its logical conclusion, elastons (three normals). Consider a volumetric point-like solid whose extent along all three directions is small. This time the reduced geometry is a point, or elaston, and our notion of strain in the vicinity of this point will measure the linear deformations of stretch and shear at the center, as well as the quadratic deformations of bending and twist along all three ?normal? directions. Figure 1 , left, depicts these four essential deformation modes. Linearizing Strain For the elaston centered at ? 0 = (0, 0, 0), we perform a first-order Taylor approximation of positions and displacements, this time in all three normal directions ? 1 , ? 2 , ? 3 : 3 x(?) ? x(? 0 ) + ? k x ,k (? 0 ) , k=1 3 u(?) ? u(? 0 ) + ? k u ,k (? 0 ) . k=1 Substituting into (2) yields the strain centered about the elaston Observe that this expression naturally generalizes its shell (4) and rod (8) analogues; in particular, it captures stretching, shearing, bending, and twisting along all three axes. Energy Integration Recall the two steps we have taken to compute the total energy from the strain. First, we analytically integrate over the zero, one, and two normal directions of a solid, shell, or rod, respectively, to obtain the tangential energy density. Finally, we integrate the energy density over the remaining three, two, and one tangent directions of a solid, shell, or rod, respectively. Correspondingly, we compute the elaston?s energy by substituting (10) into (3) to obtain an integral over the elaston?s volume ? e , which?since all three directions have thin extent?we can analytically integrate, obtaining W = V ?(? 0 ) : C : ?(? 0 ) + 3 h k 2 ? k (? 0 ) : C : ? k (? 0 ) . 2 12 k=1 (11) Here h k denotes the thickness of the elaston along direction ? k and V = h 1 h 2 h 3 the volume of the elaston. As we are about to see, elastons serve as basic building blocks for assembling the elastic energy of any deformable object, independent of its form. The classical goal of resultant-based thin shell models is to reduce the dimensionality of the model from three to two dimensions, thereby simplifying its numerical treatment. The reduction simplifies the formulation because the energy integration can be performed analytically in normal direction. We adopt a rather unorthodox, alternative perspective: consider a volumetric solid discretized into a family of shells, like the layers of an onion. The deformation energy of each sheet can be measured using the thin shell model. Considering all sheets, such an integration scheme approximates the volumetric elastic energy. The accuracy of the approximation is governed by the resolution of the slicing and converges to the exact energy with increasing number of slices. Likewise, a rod model serves as an integration rule for shell energies, and by transitivity for volumetric solids. Therefore, elastons offer the most general integration rule. By placing the elastons along a rod?s centerline, or on a shell?s mid-surface, or throughout a solid?s volume, we can approximate the stored elastic energy of rods, shells, or solids, respectively. Formally, a set of elastons e ? E form an integration rule approximating the elastic energy (3) as W = V e ? e : C : ? e + 3 (h e k ) 2 ? ke : C : ? ke , 2 12 e?E k=1 (12) where V e denotes the volume associated with elaston e and ? e and ? ke are the membrane and bending strains of elaston e evaluated at its center ? e 0 . This equation describes a convenient approximation of the elastic energy, which allows the treatment of solids, shells, and rods in a unified manner. However, in order to use this integration rule in simulations, there are two further requirements: ? The elastons have to sample the material ? sufficiently densely, such that all relevant deformations are measured and no undesired modes can appear because they would not be captured by the integration rule. A dense sampling avoids these problems and at the same time guarantees an accurate integration of the elastic energy (see Section 9). ? We also have requirements for an admissible basis of the solution space. They need to reproduce constant and linear functions for accurate preservation of linear and angular momenta. We first discuss the second point. We consider the elaston to be a general-purpose integration rule for solids, shells, and rods. The remaining theoretical component is a discretization of the displacement field u(x); any discretization that is twice weakly differentiable (i.e., has square-integrable second derivatives) is sufficient. We could therefore discretize u using standard tetrahedral or hexahedral finite elements with quadratic shape functions. This volumetric tessellation, however, would be less suitable for shells and rods. A point-based discretization is not only philosophically compatible with our thinking of elastons as ?elastic points?, it also allows us to easily take advantage of the agnosticism of elastons to local form, topology (non-manifold junctions), and so forth. Most previous meshless simulations in graphics [M?ller et al. 2004; Pauly et al. 2005; Gerszewski et al. 2009] use a linear moving least squares (MLS) discretization due to its high flexibility and good approximation properties (see [Fries and Matthies 2004] for an overview). The undeformed object ? is sampled by points x 1 , . . . , x n , each of which is associated with a displacement DOF u i ? IR 3 . The displacement field u(x) is represented by a polynomial a T p(x) with a vector of monomials p(x, y, z) = (1, x, y, z) T and coefficients a = a(x). The latter are determined by a local least squares fit to the displacements u i , i.e., by minimizing where w(x ? x i ) denotes a classic MLS weighting kernel. We apply the commonly used weighting kernel w(d) = (1 ? d 2 ) 3 in our implementation [Fries and Matthies 2004]. Analytically minimizing J(a) by setting ?J/?a = 0 yields n u(x) = u i N i (x) , i=1 Motivation for GMLS The above equation reveals an important limitation of the classical MLS shape functions N i (x): To guarantee an invertible matrix G(x), there have to be sufficiently many samples x i supporting the point of evaluation x (determined by w(x ? x i )), and these samples x i must not be coplanar. This condition is unacceptable when simulating shells and rods, which are naturally represented by (locally nearly) coplanar and colinear samplings. We could perhaps artificially construct a volumetric sampling (away from the mid-surface or centerline) by adding points along the normal direction(s), but this too is littered with perils: too many DOFs in normal direction lead to rank-deficient systems, since they allow more deformation modes than can actually be measured by the (coplanar or colinear) elastons. Pursuing a simpler approach, we discretize the displacement field using generalized moving least squares (GMLS), an extension of classical MLS approximation to Hermite data [Atluri et al. 1999; Fries and Matthies 2004]. With GMLS we concentrate all displacement information for the normal direction(s) on point x i located on the mid-surface or centerline, sidestepping volumetric sampling. Linear GMLS In addition to its displacement DOF u i , each sample point x i is associated with derivative DOFs u i,j ? IR 3 (1 ? j ? 3) and the coefficients a(x) are determined by fitting the polynomial a T p(x) to both value and derivative DOFs. This simply amounts to adding to J(a) in (13) the error term i=1 n j=1 3 w(x ? x i ) a T p ,j (x i ) ? u i,j 2 . Minimizing the resulting H p -like norm leads to n 3 with additional basis functions for derivative information and an augmented, generalized matrix G used in the construction of N i,j (x) in (16) and N i (x) in (14): n 3 G(x) = w(x ? x i ) p(x i ) p(x i ) T + p ,j (x i ) p ,j (x i ) T . i=1 j=1 Compared to (14), the outer products of monomial derivatives p ,j guarantee a regular matrix G in any case?for coplanar and colinear samplings, even for a single sample point. This independence of the sampling makes GMLS the ideal choice for discretizing deformation fields of solids, shells, and rods, where each point x i now has the 12 DOFs u i , u i,1 , u i,2 , u i,3 ? IR 3 . Quadratic GMLS If higher accuracy and faster convergence are desired, we can alternatively use a quadratic polynomial p(x) = (1, x, y, z, xx, xy, xz, yy, yz, zz) T and additionally consider second order derivative DOFs u i,jk (1 ? j, k ? 3), providing 30 DOFs per sample point x i . This adds to J(a) a third error term i=1 n j,k=1 3 w(x ? x i ) a T p ,jk (x i ) ? u i,jk 2 and leads to\n        ? ? n 3 3 j jk u(x) = ? u i N i (x) + u i,j N i (x) + u i,jk N i (x) ? , i=1 j=1 j,k=1 with additional second-order derivative shape functions and a matrix G(x) (for N i , N i,j , and N i,jk ) that is augmented a second time by n i=1 j,k=1 3 w(x ? x i ) p ,jk (x i ) p ,jk (x i ) T . For notational convenience, we denote in the following all shape functions N i , N i,j , N i,jk and DOFs u i , u i,j , u i,jk simply by N i and u i , respectively. The discretization of the deformation field hence has the form u(x) ? i u i N i (x). In our simulation framework we integrated both first and second order GMLS. While the first order scheme allows for faster simulations (12 DOFs/sample), the second order discretization (30 DOFs/sample) provides more accurate results and converges to the physically correct solution (see Section 10). The first and second order methods have the same structure, so that a single code can offer an easy trade-off between speed and accuracy. The combination of a GMLS-based deformation field and elastonbased integration opens the door to simple and extendable pointbased simulation. Our implementation is outlined below. Input: Point-based material representation M 1 Precomputation 2 Generate GMLS points x i by sampling M (Sec. 9.1) 3 Generate elastons e by sampling M (Sec. 9.1) 4 Compute elaston stiffness matrices K e (Sec. 9.2) 5 Compute mass matrix M (Sec. 9.2) 6 Simulation loop 7 Assemble global stiffness matrix K (Sec. 9.2) 8 Boundary conditions assembly (Sec. 9.3) 9 Collision detection and handling (Sec. 9.3) 10 Time integration (Sec. 9.3)\n        We accept as input a high-resolution point cloud M = {m 1 , m 2 , . }, with associated radii {r 1 , r 2 , . }, i.e., we represent the material by a set of spheres B(m i , r i ). Devoid of connectivity, this format is a flexible intermediary between data that could exist in the form of a surface or volumetric mesh, implicit surface, triangle soup, range scan, or just points. Given an input cloud, we generate the positions {x 1 , . . . x n } of GMLS sample points and elaston centers {e 1 , . . . , e m } by subsampling the dense material point set M. For DOF positions x i , we use farthest point sampling of the material M, similar to [Adams et al. 2008]. Starting from x 1 = m 1 , subsequent samples x i+1 are picked in a greedy manner to maximize the distance to the points {x 1 , . . . , x i } already selected. This sampling strategy results in a uniform distribution, but favors samples at the boundary of the material. In our context, however, samples should ideally be located at the mid-surface or centerline. We therefore improve the sampling by Lloyd relaxation [Lloyd 1957]: The material M is partitioned into M 1 ? ? ? ? ? M n by associating each material point m j ? M to its closest sample x i , yielding a discrete Voronoi diagram. In a second step the samples x i are repositioned to the centroids of their Voronoi cells M i , and these two steps are iterated until convergence. For regions with few material samples in a certain direction, i.e., that locally are shellor rod-like, this approach leads to centered sample positions. For solid regions the samples are distributed regularly in the volume. Adaptive discretizations with varying sampling density can be achieved through a user-defined grading field. Simulation accuracy depends on the ratio of densities of elastons e i and of GMLS samples x i (see Figure 2 ). To capture all relevant deformation modes, elastons should be sampled at 2?3 times the axial density of x i . We begin with elaston positions e i = x i (1 ? i ? n) and add more elastons {e n+1 , . . . , e m } by farthest point sampling, followed by Lloyd relaxation to improve the sampling. For theoretical completeness, our derivation of elastons in Sections 4?7 assumed curvilinear coordinates x(?) for strain computations. In implementation we find it simpler to construct a perelaston local flat parameterization, so that each undeformed elaston is a small cuboid. Given the elaston center e i and Voronoi region M i , covariance analysis of the spheres B(m i , r i ) yields an orthogonal local frame and eigenvalues {? j }. These axes serve as the undeformed first derivatives x ,j (?tangent vectors?) for the computation of the strains in (5) and (6). Note that rotating two tangents of equal length around their common normal does not change the simulation accuracy ( Fig. 2 ,right). The incident figure shows material points m i (top), GMLS samples x i (bottom, red spheres), and elastons e i with their local frames (bottom, blue crosses). As a consequence of our assumption of a locally flat parameterization the second derivatives x ,jk used in the computation of the bending strain (6) vanish. The error introduced by this depends on the curvature of the undeformed state, and therefore can be reduced by a curvature-adaptive sampling of elastons, i.e., by adjusting the grading field of the Lloyd clustering. Our experiments have shown that the remaining errors of our discrete elaston integration scheme are insignificant compared to the model discretization error (see Figs. 2, 3). Furthermore, in the limit case the energy of a single elaston approaches the exact continuous energy density at that point, guaranteeing vanishing integration error under refinement. After setting up the discretization of the deformation field u(x) (samples x i , DOFs u i ) and of the elastic energy W (elaston centers e i and axes x ,j ), we proceed to compute the system matrices, i.e., the stiffness and mass matrix. Note that we can precompute the mass matrix and the local elaston stiffness matrices, since they remain constant throughout an elastic simulation. Using corotational strain requires global stiffness reassembly in each time step. Stiffness Matrix To integrate membrane and bending strains (see (5) and (6)), we need first and second order derivatives x ,j , x ,jk and u ,j , u ,jk . By construction of our local elaston parameterization, x ,j are the elaston?s axes and x ,jk vanish. Writing the deformation field as u( x(?)), we have the first derivatives where u is the deformation?s 3 ? 3 Jacobian matrix with respect to Cartesian coordinates. For the second order derivatives of u we apply the same projection procedure and exploit the vanishing second order derivatives of x, leading to where H u is the Hessian of u with respect to Cartesian coordinates. This allows us to compute both strains easily without constructing a global parameterization. We perform a classic Galerkin discretization and replace the continuous solution u(x) by our GMLS approximation i u i N i (x) of Section 8. For each elaston e ? E, this leads to a local stiffness matrix K e , which we construct using Voigt notation [Hughes 2000]. We identify all basis functions N i that have support at the elaston?s position; for each of these basis functions we compute 6 ? 3 matrices A i and B k i corresponding to the membrane strain ? and the bending strains ? k (k = 1, 2, 3), given in terms of their rows\n          A i = ( N i ? x ,a ) x ,a T , a A i = ( N i ? x ,b ) x T ,c + ( N i ? x ,c ) x T ,b , 3+a B i k = ( x ,a ? H N i x ,k ) x ,a T , a B i k = ( x ,c ? H N i x ,k ) x ,b T + ( x ,b ? H N i x ,k ) x T ,c , 3+a with 1 ? a ? 3, b = ((a + 1) mod 3), and c = ((a + 2) mod 3). Using the 6 ? 6 constitutive tensor C and considering (11), we compute 3 ? 3 blocks K e ij of the elaston?s stiffness matrix K e as We build such a 3 ? 3 block for all pairs of basis functions N i and N j having support at the elaston?s position, and assemble the elaston stiffness matrix K e from these blocks. As mentioned earlier, we employ linear strain measures, such that the Hessian of the energy becomes constant, which enables fast and stable simulations by means of corotation [M?ller et al. 2002; Hauth and Strasser 2004]. Mezger et al. [2008] present an alternative approach where corotation is performed at each integration point. Similarly, we estimate the local rotation matrix R e at each elaston by polar decomposition of the deformation gradient (I + u) and replace the blocks K ij e by their rotated versions R e K ij e R eT . The global stiffness matrix K can then be assembled from the rotated elaston stiffness matrices K e . Moreover, the vector R e K ij e (I ? R eT )x 0 j has to be added to the i-th vector component of the external force f . The x 0 j are the coefficients of the basis functions N j when representing the undeformed configuration. They are equal to DOF locations for positional DOFs, equal to the unit vectors e k for the first derivative DOFs in direction e k , and vanish for second order derivative DOFs. Mass Matrix The mass matrix can also be precomputed, since it does not change as long as the undeformed shape of the material remains unchanged. Because we have non-nodal basis functions we avoid simplifications such as mass lumping and instead compute the mass matrix classically by assembling 3 ? 3 blocks When numerically performing this integration, we have to pay attention to correctly measure the object?s inertia. Consider for instance a straight rod. Using simple Monte-Carlo integration points placed only on the rod?s axis leads to wrong dynamics, since no inertia can be measured with respect to rotations about the centerline. Our higher order elaston integration allows us to compute moments of inertia more accurately, thereby avoiding rotation artifacts. Linearizing the basis functions N i around each elaston?s center ? 0 = (0, 0, 0) yields 3 N i (?) ? N i (? 0 ) + ? k N i,k (? 0 ) . k=1 Computing the integral in (21) as a sum of elaston integrals of the linearized shape functions?which can again be evaluated analytically?results in the following approximation: M ij = I ? V e ? e N i N j + 3 (h k e ) 2 N i,k N j,k , 12 e?E k=1 where all functions are evaluated at the respective elaston centers. Moreover, the basis function derivatives N i,k are already known from the stiffness matrix integration. Time Integration We employ a simple semi-implicit Euler integration scheme to advance the simulation in time. The linear systems resulting from our discretizations are sparse, symmetric, and positive definite, which makes them ideally suited for efficient linear solvers. We choose a direct sparse Cholesky solver [Chen et al. 2008] due to its robustness and its good scaling properties. Boundary Conditions For simulations employing nodal basis functions (i.e., u(x i ) = u i ) prescribing Dirichlet constraints simply corresponds to fixing vertices. However, GMLS basis functions are not interpolating, requiring a different approach for imposing boundary conditions. In our framework we employ a penalty method, since it is simple to implement, gives satisfactory results, and does not introduce additional DOFs into the system. A target displacement u c can be imposed on a subdomain ? c ? ? by adding a term to the elastic energy that penalizes the deviation from the prescribed displacement, weighted by a coefficient ?:\n          W c (u) = ? u(x) ? u c (x) 2 d? . 2 ? c This leads to matrix blocks K ij c = ? I ? c N i (x)N j (x) d? and vectors f i c = ? ? c N i (x) u c (x) d? to be assembled into the stiffness matrix K and the force vector f , respectively. Collisions Collision detection and handling is point-based. Since the object is represented by a dense set of spheres B(m j , r j ), we detect collisions between material spheres B(m j + u(m j ), r j ) in the deformed configuration. We also detect collisions with analytically defined objects such as planes and cylinders. We respond to collisions using penalty forces. We start with a quantitative convergence analysis and qualitative evaluations of our approach, followed by experiments that demonstrate the generality of the method. The full animations for these examples are shown in the accompanying video. For visualization we embed a high-resolution triangle mesh into the deformation field, which could, however, be replaced by any sample-based geometry representation (triangle soups, point clouds). Convergence We performed a series of numerical evaluations to verify the accuracy of our method. Figure 3 shows representative plots for solids, shells, and rods, which are subjected to a gravitational force (and twist for the lower-right rod). The cube is constrained at its top, the shell and rod are clamped at their left-hand side as depicted in the insets of Fig. 3 . The thickness of the shell and rod is equal to one percent of the object?s side length. The limit solutions of quadratic GMLS show good correspondence with our reference solutions. We compare to hexahedral FEM for solids, Kirchhoff-Love shells, and analytic solutions for rod bending and twisting. Linear GMLS appears to suffer from locking (artificial stiffness for the rod). Convergence is faster than simple finite elements but slower than highly-specialized methods. Those, however, are only valid in their specific application domain and do not cover the same range of different geometries as our method. Qualitative Verification We also verified the qualitative behavior of our model on a couple of well-known test cases for shells and rods. Figure 4 shows a thin cylinder that develops the expected buckling patterns as it is compressed. Figure 5 demonstrates that we are able to reproduce the characteristic dynamic behavior of rods, building plectonemes and helical perversions as shown previously by Spillmann and Teschner [2007] and Bergou et al. [2008]. Non-manifold Connections Real-world objects often consist of complex assemblies of different forms of geometry. Our method is able to handle these mixed cases in a unified manner as demonstrated in Fig. 6 . These examples would be difficult to realize by combining several specialized methods. % '\"% '\"$ !\" $# '\"# ' -. % 450.6-7839: !\" # ;<6=-6>517839: !\" '()* '()$ '()+ '()% '(), $&'( $&') $&'# $&'* $&'+ !\" 2)3 450.6-7839: ;<6=-6>517839: !\" ' Figure !\" & 3: Convergence of our method compared to standard approaches !\" % or analytic solutions for a clamped solid, shell, and rod, subject !\" $ to gravity and twist. The plots show displacement values of the furthest !\" # point for increasing (computational) complexity, measured as ! the number of non-zeros of the stiffness matrix. #)*% #)*& #)*' #)*( #)*+ #)*,\n        Plasticity Objects can not only transition between solid, shell, and rod in space ( Fig. 6 and Fig. 8), regime changes can also develop over time [Terzopoulos and Fleischer 1988]. In plastic and viscous deformations, for instance, material can be stretched into thin sheets or strands ( Fig. 7 ), whose elastic behavior can correctly be captured by our approach. We adapted the additive plasticity model of [O?Brien et al. 2002; M?ller et al. 2004] to our approach by defining plastic membrane and bending strains at the elastons. Incorporating these plastic strains into our representation of the elastic energy (12) yields additional plastic forces. Moreover, in order to allow for large plastic deformations, we perform a periodic resampling similar to [Wojtan and Turk 2008], which can easily be integrated thanks to our meshless framework. The multiplicative model of Gerszewski et al. [2009] would be a natural next step. Cutting Thin structures can also show up dynamically due to cutting or fracturing. We handle cutting by adapting the idea of a connectivity graph of [Steinemann et al. 2006] and the virtual node approach of [Molino et al. 2004]. The connectivity graph for material points m j is implicitly defined by connecting two points if their two corresponding spheres B(m j , r j ) overlap. The mapping of material points m j to elastons e i computed during Lloyd clustering then defines the connectivity of the elastons. We cut by disconnecting material points, consequently updating elaston connectivity. When a material region M i is split through cutting, we generate new elastons for each of the resulting connected components. A GMLS basis function N i (x), resp. its DOF position x i and value u i , is then duplicated if its region of influence contains multiple disconnected material components. Figure 1 shows a block of material being cut twice into a very thin slice and rod. Our renderer likewise cuts the embedded triangle mesh. Virtual nodes also enable efficient simulation of spatially close features. By introducing new elastons and splitting GMLS samples, we keep distinct the motion of close features while avoiding high sampling density (e.g., the fish?s spikes in Fig. 8). More details on the implementation of plasticity and cutting can be found in the accompanying supplementary document. Merging To merge objects we simply resample as per Section 9.1. As soon as elastons of an object fall within influence of another object?s GMLS basis, resampling merges the objects. When merging is not desired, we use the virtual node approach described above. Fig. 8 depicts four-bunny fusion. Timings For a representative selection of examples, Table 1 shows average timings for matrix precomputation, per-frame matrix assembly, and per-frame solution of the involved linear system. It can be observed that the time required for solving the linear system depends not only on the number of DOFs, but also on the density of the stiffness matrix, which decreases from solids over shells to rods. While the measured timings are comparably high, we should not expect a very general method to outperform specialized methods in the sense of accuracy vs. computational costs. We believe that when a unified code is desirable, the simplicity and generality of our approach outweigh this limitation. Moreover, note that the matrix assembly could easily be sped up by parallelizing the strain corotation over all elastons. system solve (t sol ), taken on an Intel Core2 Duo 2.4 GHz. The first three columns denote the number of elastons, number of GMLS samples and the number of DOFs, respectively. The synthesis of elaston-based integration with GMLS-based displacement discretization opens exciting avenues for further exploration. While interactive for basic examples, our code will benefit from optimization and concrete improvements: First, our rudimentary collision handling framework should incorporate hierarchical detection accelerations and stabler collision response. Second, our implementation uniformly samples the integration domain. Deformation modes vary widely in space and time, suggesting the profitable use of adaptive placement of integration points guided by geometric or data-driven criteria [An et al. 2008]. Online adaptive refinement of the simulation DOFs would help detailed features such as creases to form at lower cost. The expressive range of our system could be further explored. We used a simple embedded triangle mesh to visualize a detailed surface, which complicates topological changes such as cutting. If symplectic or reversible integration is desired (e.g., to eliminate numerical dissipation), a geometrically nonlinear strain should be introduced into our model. The authors are grateful to Petr Krysl and the anonymous reviewers for their helpful comments and suggestions. Sebastian Martin is supported by the Swiss National Science Foundation (grant No. 200021-117756). Mario Botsch is supported by the Deutsche Forschungsgemeinschaft (Center of Excellence in ?Cognitive Interaction Technology?, CITEC). Eitan Grinspun is supported by  the Sloan Foundation, NSF (MSPA Award No. IIS-05-28402, CSR Award No. CNS-06-14770, CAREER Award No. CCF-06-43268), Adobe, ATI, Autodesk, mental images, NVIDIA, Side Effects Software, the Walt Disney Company, and Weta Digital.",
  "resources" : [ ]
}