{
  "uri" : "sig2006-p494-wonka_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2006/p494-wonka_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Guided Visibility Sampling",
    "published" : "2006",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Peter-Wonka",
      "name" : "Peter",
      "surname" : "Wonka"
    }, {
      "uri" : "http://drinventor/Michael-Wimmer",
      "name" : "Michael",
      "surname" : "Wimmer"
    }, {
      "uri" : "http://drinventor/Kaichi-Zhou",
      "name" : "Kaichi",
      "surname" : "Zhou"
    }, {
      "uri" : "http://drinventor/Stefan-Maierhofer",
      "name" : "Stefan",
      "surname" : "Maierhofer"
    }, {
      "uri" : "http://drinventor/Gerd-Hesina",
      "name" : "Gerd",
      "surname" : "Hesina"
    }, {
      "uri" : "http://drinventor/Alexander-Reshetov",
      "name" : "Alexander",
      "surname" : "Reshetov"
    } ]
  },
  "bagOfWords" : [ "visibility", "fundamental", "problem", "computer", "graphic", "visibility", "computation", "necessary", "occlusion", "culling", "shadow", "generation", "inside-outside", "classification", "image-based", "rendering", "motion", "-lcb-", "peter.wonka", "kaichi.zhou", "-rcb-", "@asu", "edu", "Tempe", "AZ", "85287-0112", "wimmer@cg.tuwien.ac.at", "1040", "Vienna", "Austria", "-lcb-", "sm", "hesina", "-rcb-", "@vrvis", "1220", "Vienna", "Austria", "alexander.reshetov@intel.com", "Santa", "Clara", "CA", "95054", "planning", "navigation", "name", "just", "few", "example", "while", "visibility", "from", "single", "viewpoint", "can", "calculate", "quite", "easily", "many", "application", "require", "potentially", "visible", "set", "-lrb-", "pv", "-rrb-", "region", "space", "which", "unfortunately", "much", "more", "complicated", "number", "excellent", "from-region", "visibility", "algorithm", "exist", "most", "they", "only", "applicable", "limited", "range", "scene", "require", "complex", "computation", "sometimes", "significant", "amount", "memory", "therefore", "sampling-based", "solution", "have", "become", "very", "popular", "practical", "application", "due", "robustness", "general", "applicability", "ease", "implementation", "paper", "we", "improve", "upon", "previous", "sampling-based", "algorithm", "significantly", "improve", "sampling", "efficiency", "i.e.", "number", "sample", "require", "detect", "certain", "set", "visible", "polygon", "motivate", "we", "design", "choice", "we", "look", "two", "key", "aspect", "any", "visibility", "algorithm", "behavior", "algorithm", "ray", "space", "datum", "structure", "use", "store", "acquire", "visibility", "information", "figure", "illustrate", "concept", "ray", "space", "2d", "give", "view", "cell", "show", "edge", "parameterize", "scene", "object", "show", "grey", "we", "can", "compute", "visibility", "consider", "all", "ray", "from", "view", "cell", "plane", "behind", "scene", "parameterize", "t.", "2d", "scene", "2d", "set", "ray", "3d", "scene", "4d", "set", "ray", "set", "ray", "sample", "densely", "enough", "we", "have", "good", "visibility", "solution", "inefficiency", "pure", "regular", "sampling", "approach", "show", "figure", "same", "surface", "sample", "over", "over", "again", "-lrb-", "note", "definition", "regular", "depend", "parameterization", "ray", "space", "therefore", "would", "beneficial", "we", "could", "only", "sample", "area", "have", "be", "sample", "before", "show", "Figure", "where", "after", "initial", "orthogonal", "sampling", "only", "few", "additional", "ray", "need", "find", "all", "visible", "surface", "total", "little", "more", "than", "1d", "subspace", "2d", "ray", "space", "need", "explore", "example", "due", "spatial", "coherence", "visibility", "paper", "we", "exploit", "coherence", "start", "from", "stochastically", "sample", "point", "we", "grow", "lower-dimensional", "subspace", "ray", "space", "use", "newly", "introduce", "strategy", "adaptive", "border", "sampling", "reverse", "sampling", "which", "guide", "property", "scene", "visibility", "second", "key", "aspect", "visibility", "algorithm", "what", "datum", "structure", "use", "store", "visibility", "information", "most", "complete", "also", "complex", "way", "store", "4d", "ray", "space", "large", "scene", "entail", "prohibitive", "level", "memory", "consumption", "conservative", "algorithm", "often", "store", "shadow", "volume", "whereas", "sampling", "algorithm", "use", "volume", "3d", "space", "have", "be", "sample", "yet", "-lrb-", "so-called", "void", "volume", "Figure", "-rrb-", "datum", "structure", "still", "require", "several", "time", "memory", "take", "scene", "description", "itself", "alternatively", "boundary", "void", "volume", "-lrb-", "void", "surface", "-lsb-", "Pito", "1999", "-rsb-", "-rrb-", "can", "use", "which", "easy", "sample", "from", "one", "point", "space", "difficult", "manipulate", "paper", "we", "do", "store", "visibility", "information", "beyond", "pv", "all", "rely", "we", "new", "reverse", "sampling", "approach", "penetrate", "void", "surface", "base", "current", "sample", "only", "key", "contribution", "paper", "intelligent", "sampling", "algorithm", "drastically", "improve", "performance", "previous", "sampling", "approach", "combine", "random", "sampling", "deterministic", "exploration", "phase", "algorithm", "require", "little", "memory", "simple", "implement", "accept", "any", "triangular", "test", "scene", "input", "can", "use", "general", "purpose", "visibility", "tool", "large", "volume", "research", "have", "be", "devote", "visibility", "problem", "due", "importance", "computer", "graphic", "computer", "vision", "robotic", "other", "field", "section", "compare", "various", "pect", "propose", "visibility", "sampling", "algorithm", "wider", "class", "from-region", "visibility", "algorithm", "general", "overview", "we", "can", "recommend", "excellent", "survey", "visibility", "problem", "algorithm", "-lsb-", "Durand", "1999", "Cohen-Or", "et", "al.", "2003", "-rsb-", "from-region", "visibility", "algorithm", "usually", "classify", "exact", "-lrb-", "potentially", "visible", "set", "pv", "exact", "visible", "set", "ev", "-rrb-", "conservative", "-lrb-", "pv", "ev", "-rrb-", "aggressive", "-lrb-", "pv", "ev", "-rrb-", "approximate", "-lrb-", "pv", "ev", "-rrb-", "exact", "solution", "compute", "visibility", "from", "region", "space", "have", "be", "rare", "-lsb-", "Duguet", "Drettakis", "2002", "Durand", "1999", "-rsb-", "recently", "two", "algorithm", "have", "be", "publish", "-lsb-", "Nirenstein", "et", "al.", "2002", "Bittner", "2003", "-rsb-", "further", "improve", "upon", "-lsb-", "Haumont", "et", "al.", "2005", "Mora", "et", "al.", "2005", "-rsb-", "both", "exact", "work", "general", "scene", "while", "exact", "algorithm", "have", "be", "holy", "grail", "visibility", "community", "long", "time", "two", "algorithm", "show", "complexity", "inherent", "visibility", "problem", "may", "obstacle", "make", "exact", "visibility", "widely", "applicable", "high", "run", "time", "high", "complexity", "implementation", "critical", "numerical", "robustness", "issue", "can", "actually", "make", "solution", "approximate", "sampling-based", "strategy", "-lrb-", "see", "-lsb-", "Bittner", "2003", "-rsb-", "-rrb-", "we", "believe", "sampling-based", "method", "exact", "method", "complement", "each", "other", "have", "different", "strength", "weakness", "several", "author", "stress", "importance", "conservative", "visibility", "computation", "i.e.", "never", "underestimate", "visible", "set", "since", "problem", "almost", "hard", "exact", "visibility", "problem", "practically", "all", "publish", "conservative", "from-region", "algorithm", "simplify", "problem", "impose", "certain", "restriction", "scene", "typical", "restriction", "limitation", "2.5", "visibility", "-lsb-", "Wonka", "et", "al.", "2000", "Bittner", "et", "al.", "2001", "Koltun", "et", "al.", "2001", "-rsb-", "architectural", "scene", "-lsb-", "Airey", "et", "al.", "1990", "Teller", "S?quin", "1991", "-rsb-", "restriction", "volumetric", "occluder", "-lsb-", "Schaufler", "et", "al.", "2000", "-rsb-", "restriction", "larger", "occluder", "close", "view", "cell", "-lsb-", "Leyvand", "et", "al.", "2003", "Durand", "et", "al.", "2000", "-rsb-", "last", "restriction", "imply", "nature", "datum", "structure", "use", "store", "visibility", "information", "while", "can", "argue", "larger", "occluder", "can", "synthesize", "from", "smaller", "one", "-lsb-", "Andujar", "et", "al.", "2000", "-rsb-", "possible", "general", "guarantee", "include", "all", "visible", "geometry", "pv", "may", "important", "some", "application", "ultimately", "sampling-based", "method", "can", "much", "more", "successful", "oppose", "publish", "conservative", "algorithm", "do", "make", "any", "assumption", "about", "scene", "allow", "they", "handle", "much", "larger", "variety", "scene", "due", "ease", "implementation", "robustness", "nonconservative", "algorithm", "more", "practical", "commercial", "product", "computer", "game", "-lsb-", "Aila", "Miettinen", "2004", "-rsb-", "already", "use", "context", "numerical", "issue", "often", "make", "conservative", "algorithm", "nonconservative", "practice", "since", "visibility", "fundamental", "problem", "general", "robust", "practical", "tool", "important", "complement", "specialize", "algorithm", "discuss", "before", "tool", "almost", "universally", "base", "sampling", "two", "most", "popular", "solution", "randomly", "select", "large", "number", "ray", "sample", "visibility", "-lsb-", "Schaufler", "et", "al.", "2000", "Airey", "et", "al.", "1990", "Shade", "et", "al.", "1998", "-rsb-", "first", "sample", "boundary", "view", "cell", "point", "sample", "visibility", "from", "each", "point", "-lsb-", "Levoy", "Hanrahan", "1996", "Stuerzlinger", "1999", "-rsb-", "context", "view", "planning", "laser", "range", "scanner", "sampling", "algorithm", "exist", "store", "void", "surface", "void", "volume", "compute", "next-best", "view", "-lsb-", "Pito", "1999", "-rsb-", "similar", "algorithm", "also", "use", "generation", "textured", "depth", "mesh", "-lsb-", "Wilson", "Manocha", "2003", "-rsb-", "another", "option", "shoot", "ray", "from", "scene", "triangle", "towards", "view", "cell", "-lsb-", "Gotsman", "et", "al.", "1999", "-rsb-", "which", "lead", "oversampling", "ray", "space", "most", "scene", "Nirenstein", "Blake", "-lsb-", "2004", "-rsb-", "be", "first", "realize", "full", "potential", "sampling", "visibility", "computation", "propose", "new", "approach", "which", "use", "graphic", "hardware", "sampling", "discuss", "section", "4.4", "algorithm", "aim", "reduce", "render", "time", "cull", "even", "visible", "triangle", "long", "do", "result", "significant", "render", "error", "oppose", "we", "algorithm", "which", "always", "try", "find", "best", "possible", "approximation", "exact", "visible", "set", "Ray", "space", "analysis", "introduction", "Figure", "we", "have", "argue", "desirable", "sample", "ray", "space", "regularly", "right", "image", "figure", "show", "only", "approximately", "1d", "subspace", "ray", "need", "consider", "simple", "2d", "example", "we", "new", "algorithm", "sample", "ray", "space", "more", "intelligently", "random", "sampling", "place", "initial", "seed", "point", "ray", "space", "stochastically", "search", "region", "ray", "space", "have", "be", "explore", "yet", "continue", "example", "2d", "figure", "adaptive", "border", "sampling", "correspond", "vertical", "expansion", "2d", "ray", "space", "-lrb-", "since", "viewpoint", "remain", "fixed", "-rrb-", "which", "only", "proceed", "yet", "unexplored", "area", "particular", "advantage", "adaptive", "border", "sampling", "method", "sampling", "rate", "adapt", "geometric", "complexity", "visible", "surface", "reverse", "sampling", "other", "hand", "movement", "horizontal", "direction", "-lrb-", "since", "hitpoint", "remain", "fixed", "-rrb-", "case", "where", "movement", "promise", "lead", "yet", "explore", "region", "full", "3d", "case", "instructive", "study", "we", "algorithm", "term", "visibility", "complex", "-lsb-", "Durand", "1999", "-rsb-", "visibility", "complex", "describe", "partition", "4d", "ray", "space", "4d", "region", "ray", "hit", "same", "object", "-lrb-", "note", "ray", "space", "strictly", "4d", "because", "we", "only", "interested", "ray", "start", "from", "view", "cell", "-rrb-", "3d", "boundary", "partition", "call", "tangency", "volume", "consist", "ray", "tangent", "scene", "object", "sample", "place", "along", "object", "border", "therefore", "correspond", "sample", "near", "tangency", "volume", "object", "dual", "space", "since", "we", "keep", "viewpoint", "-lrb-", "degree", "freedom", "-rrb-", "fix", "during", "deterministic", "ab", "exploration", "phase", "we", "need", "sample", "1d", "set", "only", "without", "ab", "we", "would", "ignore", "tangency", "volume", "have", "sample", "whole", "2d", "subset", "ray", "space", "define", "choose", "viewpoint", "reverse", "sampling", "other", "hand", "look", "line", "tangent", "two", "scene", "edge", "ray", "space", "line", "near", "intersection", "two", "tangency", "volume", "intersection", "call", "bitangent", "only", "2d", "reverse", "sampling", "viewpoint", "allow", "move", "along", "plane", "-lrb-", "1d", "-rrb-", "so", "total", "r", "also", "sample", "1d", "set", "combined", "ab", "r", "strategy", "therefore", "correspond", "exploration", "4d", "ray", "space", "along", "those", "1d", "curve", "most", "likely", "reveal", "new", "object", "explain", "high", "efficiency", "gv", "algorithm", "another", "useful", "interpretation", "ab", "sampling", "strategy", "3d", "base", "visibility", "map", "-lsb-", "Bittner", "2002", "-rsb-", "visibility", "map", "structure", "contain", "all", "visible", "line", "segment", "give", "view", "segment", "can", "characterize", "mainly", "flat", "corner", "-lrb-", "interior", "edge", "mesh", "-rrb-", "shadow", "-lrb-", "depth", "discontinuity", "-rrb-", "ab", "sampling", "strategy", "place", "sample", "all", "edge", "visibility", "map", "-lrb-", "without", "explicitly", "construct", "-rrb-", "sample", "interior", "edge", "mesh", "serve", "find", "connected", "set", "mesh", "-lrb-", "trivially", "adjacent", "region", "visibility", "complex", "-rrb-", "sample", "shadow", "edge", "serve", "discover", "depth", "discontinuity", "where", "object", "partly", "occlude", "other", "object", "Shadow", "edge", "where", "r", "sampling", "strategy", "use", "refine", "sampling", "-lrb-", "find", "bitangent", "visibility", "complex", "-rrb-", "term", "conservative", "-lrb-", "even", "exact", "-rrb-", "visibility", "actually", "quite", "misleading", "most", "algorithm", "though", "conservative", "theory", "conservative", "practice", "due", "numerical", "robustness", "problem", "especially", "true", "algorithm", "rely", "graphic", "hardware", "furthermore", "complex", "algorithm", "prone", "implementation", "problem", "due", "much", "improved", "sampling", "efficiency", "magnitude", "error", "introduce", "we", "algorithm", "comparable", "other", "error", "source", "error", "usually", "tolerate", "conservative", "algorithm", "-lrb-", "see", "Section", "-rrb-", "other", "algorithm", "often", "use", "conjunction", "visibility", "processing", "like", "level-of-detail", "algorithm", "shadow", "mapping", "additional", "source", "error", "scene", "complexity", "one", "distinguish", "feature", "we", "samplingbased", "algorithm", "can", "handle", "arbitrary", "type", "scene", "high", "overall", "visual", "complexity", "do", "rely", "occluder", "synthesis", "depend", "mostly", "size", "visible", "set", "total", "scene", "complexity", "although", "guide", "visibility", "sampling", "generally", "find", "major", "part", "PVS", "very", "quickly", "fact", "stochastic", "one", "hand", "guide", "visibility", "scene", "other", "hand", "make", "final", "accuracy", "dependent", "structure", "scene", "therefore", "we", "can", "give", "any", "hard", "guarantee", "pixel", "error", "calculate", "pv", "also", "ability", "explore", "connected", "ray", "space", "subset", "far", "distance", "limit", "numerical", "precision", "ray", "direction", "vector", "ab", "mean", "triangle", "have", "solid", "angle", "less", "than", "double", "precision", "accuracy", "when", "see", "from", "ray", "origin", "most", "likely", "miss", "worst", "case", "scene", "complexity", "scene", "consist", "large", "set", "small", "disconnect", "triangle", "forest", "scene", "synthetic", "scene", "random", "triangle", "visibility", "scene", "so", "complex", "even", "sampling-based", "solution", "either", "have", "high", "error", "take", "long", "time", "compute", "still", "important", "point", "out", "sampling-based", "algorithm", "only", "one", "able", "even", "process", "scene", "respect", "avenue", "future", "work", "incorporate", "geometric", "lod", "sampling", "framework", "similar", "vlod", "system", "propose", "Chhugani", "et", "al.", "-lsb-", "2005", "-rsb-", "geometric", "lod", "could", "potentially", "increase", "speed", "ray", "tracer", "make", "intersection", "computation", "more", "robust", "because", "small", "triangle", "distance", "get", "replace", "larger", "one", "however", "robust", "geometric", "lod", "available", "all", "scene", "integrate", "lod", "ray", "tracer", "current", "topic", "research", "furthermore", "error", "metric", "use", "create", "lod", "impact", "accuracy", "visibility", "algorithm", "therefore", "usable", "output", "resolution", "one", "important", "strength", "sampling-based", "method", "ease", "application", "we", "discuss", "number", "application", "scenario", "we", "algorithm", "visibility", "preprocessing", "real-time", "rendering", "game", "scenario", "already", "describe", "overview", "one", "most", "important", "application", "gv", "example", "scene", "current", "computer", "game", "become", "increasingly", "general", "so", "special", "purpose", "algorithm", "-lrb-", "cell", "portal", "2.5", "solution", "-rrb-", "can", "use", "anymore", "while", "exact", "algorithm", "difficult", "implement", "error-prone", "gv", "can", "use", "all", "stage", "game", "development", "during", "level", "design", "number", "ray", "can", "limit", "so", "coarse", "solution", "can", "provide", "almost", "instantaneously", "final", "production", "pv", "can", "calculate", "high", "accuracy", "very", "important", "create", "pv", "close", "EVS", "possible", "dependent", "particular", "output", "resolution", "since", "resolution", "application", "run", "know", "advance", "addition", "antialiasing", "method", "-lrb-", "supersampling", "multisampling", "-rrb-", "use", "information", "from", "subpixel", "triangle", "so", "virtual", "resolution", "even", "higher", "note", "although", "scene", "computer", "game", "inherently", "dynamic", "major", "part", "scene", "still", "static", "so", "huge", "gain", "render", "speed", "can", "obtain", "furthermore", "gv", "work", "arbitrary", "polyhedral", "view", "cell", "so", "view", "space", "can", "choose", "freely", "online", "networked", "visibility", "show", "result", "reasonable", "approximation", "ev", "low", "pixel", "error", "can", "find", "second", "less", "therefore", "gv", "can", "use", "online", "visibility", "culling", "run", "separate", "processor", "over", "network", "describe", "instant", "visibility", "system", "-lsb-", "Wonka", "et", "al.", "2001", "-rsb-", "case", "transmit", "pv", "per-object", "basis", "improve", "result", "because", "suffice", "one", "triangle", "object", "find", "gv", "order", "classify", "whole", "object", "visible", "furthermore", "small", "modification", "gv", "make", "algorithm", "better", "suitable", "progressive", "evaluation", "instead", "interleave", "ab", "random", "sample", "from", "beginning", "create", "certain", "number", "-lrb-", "e.g.", "1m", "-rrb-", "random", "sample", "startup", "phase", "only", "use", "those", "seed", "ABS", "ray", "give", "better", "distribution", "sample", "initial", "phase", "algorithm", "since", "ab", "systematically", "flood", "fill", "PVS", "around", "its", "seed", "point", "take", "some", "time", "until", "all", "image", "region", "have", "be", "reach", "impostor", "generation", "many", "scene", "visibility", "culling", "sufficient", "guarantee", "high", "frame", "rate", "everywhere", "model", "therefore", "image-based", "method", "can", "use", "replace", "complex", "scene", "part", "so-called", "impostor", "however", "since", "impostor", "trade", "render", "speed", "against", "memory", "consumption", "important", "find", "exact", "visible", "part", "scene", "avoid", "waste", "impostor", "memory", "invisible", "geometry", "-lsb-", "Jeschke", "et", "al.", "2005", "-rsb-", "gv", "ideally", "suit", "purpose", "since", "provide", "accurate", "per-triangle", "visibility", "information", "so", "only", "those", "object", "part", "actually", "visible", "need", "store", "impostor", "visibility", "decision", "basis", "many", "practical", "application", "require", "accurate", "visibility", "information", "part", "decision", "make", "process", "example", "include", "visibility", "analysis", "urban", "planning", "-lrb-", "do", "new", "skyscraper", "impact", "old", "town", "-rrb-", "military", "application", "-lrb-", "line", "sight", "culling", "tactical", "battlefield", "management", "-lsb-", "McDermott", "Gelsey", "1987", "-rsb-", "-rrb-", "telecommunications", "-lrb-", "visibility", "emitter", "-rrb-", "robotic", "many", "more", "gv", "advantageous", "problem", "because", "general", "purpose", "do", "have", "any", "parameter", "tweak", "do", "depend", "any", "special", "property", "scene", "exact", "solution", "compute", "visibility", "from", "region", "space", "have", "be", "rare", "-lsb-", "Duguet", "Drettakis", "2002", "Durand", "1999", "-rsb-", "recently", "two", "algorithm", "have", "be", "publish", "-lsb-", "Nirenstein", "et", "al.", "2002", "Bittner", "2003", "-rsb-", "further", "improve", "upon", "-lsb-", "Haumont", "et", "al.", "2005", "Mora", "et", "al.", "2005", "-rsb-", "both", "exact", "work", "general", "scene", "while", "exact", "algorithm", "have", "be", "holy", "grail", "visibility", "community", "long", "time", "two", "algorithm", "show", "complexity", "inherent", "visibility", "problem", "may", "obstacle", "make", "exact", "visibility", "widely", "applicable", "high", "run", "time", "high", "complexity", "implementation", "critical", "numerical", "robustness", "issue", "can", "actually", "make", "solution", "approximate", "sampling-based", "strategy", "-lrb-", "see", "-lsb-", "Bittner", "2003", "-rsb-", "-rrb-", "we", "believe", "sampling-based", "method", "exact", "method", "complement", "each", "other", "have", "different", "strength", "weakness", "several", "author", "stress", "importance", "conservative", "visibility", "computation", "i.e.", "never", "underestimate", "visible", "set", "since", "problem", "almost", "hard", "exact", "visibility", "problem", "practically", "all", "publish", "conservative", "from-region", "algorithm", "simplify", "problem", "impose", "certain", "restriction", "scene", "typical", "restriction", "limitation", "2.5", "visibility", "-lsb-", "Wonka", "et", "al.", "2000", "Bittner", "et", "al.", "2001", "Koltun", "et", "al.", "2001", "-rsb-", "architectural", "scene", "-lsb-", "Airey", "et", "al.", "1990", "Teller", "S?quin", "1991", "-rsb-", "restriction", "volumetric", "occluder", "-lsb-", "Schaufler", "et", "al.", "2000", "-rsb-", "restriction", "larger", "occluder", "close", "view", "cell", "-lsb-", "Leyvand", "et", "al.", "2003", "Durand", "et", "al.", "2000", "-rsb-", "last", "restriction", "imply", "nature", "datum", "structure", "use", "store", "visibility", "information", "while", "can", "argue", "larger", "occluder", "can", "synthesize", "from", "smaller", "one", "-lsb-", "Andujar", "et", "al.", "2000", "-rsb-", "possible", "general", "guarantee", "include", "all", "visible", "geometry", "pv", "may", "important", "some", "application", "ultimately", "sampling-based", "method", "can", "much", "more", "successful", "oppose", "publish", "conservative", "algorithm", "do", "make", "any", "assumption", "about", "scene", "allow", "they", "handle", "much", "larger", "variety", "scene", "due", "ease", "implementation", "robustness", "nonconservative", "algorithm", "more", "practical", "commercial", "product", "computer", "game", "-lsb-", "Aila", "Miettinen", "2004", "-rsb-", "already", "use", "context", "numerical", "issue", "often", "make", "conservative", "algorithm", "nonconservative", "practice", "since", "visibility", "fundamental", "problem", "general", "robust", "practical", "tool", "important", "complement", "specialize", "algorithm", "discuss", "before", "tool", "almost", "universally", "base", "sampling", "two", "most", "popular", "solution", "randomly", "select", "large", "number", "ray", "sample", "visibility", "-lsb-", "Schaufler", "et", "al.", "2000", "Airey", "et", "al.", "1990", "Shade", "et", "al.", "1998", "-rsb-", "first", "sample", "boundary", "view", "cell", "point", "sample", "visibility", "from", "each", "point", "-lsb-", "Levoy", "Hanrahan", "1996", "Stuerzlinger", "1999", "-rsb-", "context", "view", "planning", "laser", "range", "scanner", "sampling", "algorithm", "exist", "store", "void", "surface", "void", "volume", "compute", "next-best", "view", "-lsb-", "Pito", "1999", "-rsb-", "similar", "algorithm", "also", "use", "generation", "textured", "depth", "mesh", "-lsb-", "Wilson", "Manocha", "2003", "-rsb-", "another", "option", "shoot", "ray", "from", "scene", "triangle", "towards", "view", "cell", "-lsb-", "Gotsman", "et", "al.", "1999", "-rsb-", "which", "lead", "oversampling", "ray", "space", "most", "scene", "Nirenstein", "Blake", "-lsb-", "2004", "-rsb-", "be", "first", "realize", "full", "potential", "sampling", "visibility", "computation", "propose", "new", "approach", "which", "use", "graphic", "hardware", "sampling", "discuss", "section", "4.4", "algorithm", "aim", "reduce", "render", "time", "cull", "even", "visible", "triangle", "long", "do", "result", "significant", "render", "error", "oppose", "we", "algorithm", "which", "always", "try", "find", "best", "possible", "approximation", "exact", "visible", "set", "Ray", "space", "analysis", "introduction", "Figure", "we", "have", "argue", "desirable", "sample", "ray", "space", "regularly", "right", "image", "figure", "show", "only", "approximately", "1d", "subspace", "ray", "need", "consider", "simple", "2d", "example", "we", "new", "algorithm", "sample", "ray", "space", "more", "intelligently", "random", "sampling", "place", "initial", "seed", "point", "ray", "space", "stochastically", "search", "region", "ray", "space", "have", "be", "explore", "yet", "continue", "example", "2d", "figure", "adaptive", "border", "sampling", "correspond", "vertical", "expansion", "2d", "ray", "space", "-lrb-", "since", "viewpoint", "remain", "fixed", "-rrb-", "which", "only", "proceed", "yet", "unexplored", "area", "particular", "advantage", "adaptive", "border", "sampling", "method", "sampling", "rate", "adapt", "geometric", "complexity", "visible", "surface", "reverse", "sampling", "other", "hand", "movement", "horizontal", "direction", "-lrb-", "since", "hitpoint", "remain", "fixed", "-rrb-", "case", "where", "movement", "promise", "lead", "yet", "explore", "region", "full", "3d", "case", "instructive", "study", "we", "algorithm", "term", "visibility", "complex", "-lsb-", "Durand", "1999", "-rsb-", "visibility", "complex", "describe", "partition", "4d", "ray", "space", "4d", "region", "ray", "hit", "same", "object", "-lrb-", "note", "ray", "space", "strictly", "4d", "because", "we", "only", "interested", "ray", "start", "from", "view", "cell", "-rrb-", "3d", "boundary", "partition", "call", "tangency", "volume", "consist", "ray", "tangent", "scene", "object", "sample", "place", "along", "object", "border", "therefore", "correspond", "sample", "near", "tangency", "volume", "object", "dual", "space", "since", "we", "keep", "viewpoint", "-lrb-", "degree", "freedom", "-rrb-", "fix", "during", "deterministic", "ab", "exploration", "phase", "we", "need", "sample", "1d", "set", "only", "without", "ab", "we", "would", "ignore", "tangency", "volume", "have", "sample", "whole", "2d", "subset", "ray", "space", "define", "choose", "viewpoint", "reverse", "sampling", "other", "hand", "look", "line", "tangent", "two", "scene", "edge", "ray", "space", "line", "near", "intersection", "two", "tangency", "volume", "intersection", "call", "bitangent", "only", "2d", "reverse", "sampling", "viewpoint", "allow", "move", "along", "plane", "-lrb-", "1d", "-rrb-", "so", "total", "r", "also", "sample", "1d", "set", "combined", "ab", "r", "strategy", "therefore", "correspond", "exploration", "4d", "ray", "space", "along", "those", "1d", "curve", "most", "likely", "reveal", "new", "object", "explain", "high", "efficiency", "gv", "algorithm", "another", "useful", "interpretation", "ab", "sampling", "strategy", "3d", "base", "visibility", "map", "-lsb-", "Bittner", "2002", "-rsb-", "visibility", "map", "structure", "contain", "all", "visible", "line", "segment", "give", "view", "segment", "can", "characterize", "mainly", "flat", "corner", "-lrb-", "interior", "edge", "mesh", "-rrb-", "shadow", "-lrb-", "depth", "discontinuity", "-rrb-", "ab", "sampling", "strategy", "place", "sample", "all", "edge", "visibility", "map", "-lrb-", "without", "explicitly", "construct", "-rrb-", "sample", "interior", "edge", "mesh", "serve", "find", "connected", "set", "mesh", "-lrb-", "trivially", "adjacent", "region", "visibility", "complex", "-rrb-", "sample", "shadow", "edge", "serve", "discover", "depth", "discontinuity", "where", "object", "partly", "occlude", "other", "object", "Shadow", "edge", "where", "r", "sampling", "strategy", "use", "refine", "sampling", "-lrb-", "find", "bitangent", "visibility", "complex", "-rrb-", "term", "conservative", "-lrb-", "even", "exact", "-rrb-", "visibility", "actually", "quite", "misleading", "most", "algorithm", "though", "conservative", "theory", "conservative", "practice", "due", "numerical", "robustness", "problem", "especially", "true", "algorithm", "rely", "graphic", "hardware", "furthermore", "complex", "algorithm", "prone", "implementation", "problem", "due", "much", "improved", "sampling", "efficiency", "magnitude", "error", "introduce", "we", "algorithm", "comparable", "other", "error", "source", "error", "usually", "tolerate", "conservative", "algorithm", "-lrb-", "see", "Section", "-rrb-", "other", "algorithm", "often", "use", "conjunction", "visibility", "processing", "like", "level-of-detail", "algorithm", "shadow", "mapping", "additional", "source", "error", "scene", "complexity", "one", "distinguish", "feature", "we", "samplingbased", "algorithm", "can", "handle", "arbitrary", "type", "scene", "high", "overall", "visual", "complexity", "do", "rely", "occluder", "synthesis", "depend", "mostly", "size", "visible", "set", "total", "scene", "complexity", "although", "guide", "visibility", "sampling", "generally", "find", "major", "part", "PVS", "very", "quickly", "fact", "stochastic", "one", "hand", "guide", "visibility", "scene", "other", "hand", "make", "final", "accuracy", "dependent", "structure", "scene", "therefore", "we", "can", "give", "any", "hard", "guarantee", "pixel", "error", "calculate", "pv", "also", "ability", "explore", "connected", "ray", "space", "subset", "far", "distance", "limit", "numerical", "precision", "ray", "direction", "vector", "ab", "mean", "triangle", "have", "solid", "angle", "less", "than", "double", "precision", "accuracy", "when", "see", "from", "ray", "origin", "most", "likely", "miss", "worst", "case", "scene", "complexity", "scene", "consist", "large", "set", "small", "disconnect", "triangle", "forest", "scene", "synthetic", "scene", "random", "triangle", "visibility", "scene", "so", "complex", "even", "sampling-based", "solution", "either", "have", "high", "error", "take", "long", "time", "compute", "still", "important", "point", "out", "sampling-based", "algorithm", "only", "one", "able", "even", "process", "scene", "respect", "avenue", "future", "work", "incorporate", "geometric", "lod", "sampling", "framework", "similar", "vlod", "system", "propose", "Chhugani", "et", "al.", "-lsb-", "2005", "-rsb-", "geometric", "lod", "could", "potentially", "increase", "speed", "ray", "tracer", "make", "intersection", "computation", "more", "robust", "because", "small", "triangle", "distance", "get", "replace", "larger", "one", "however", "robust", "geometric", "lod", "available", "all", "scene", "integrate", "lod", "ray", "tracer", "current", "topic", "research", "furthermore", "error", "metric", "use", "create", "lod", "impact", "accuracy", "visibility", "algorithm", "therefore", "usable", "output", "resolution", "one", "important", "strength", "sampling-based", "method", "ease", "application", "we", "discuss", "number", "application", "scenario", "we", "algorithm", "visibility", "preprocessing", "real-time", "rendering", "game", "scenario", "already", "describe", "overview", "one", "most", "important", "application", "gv", "example", "scene", "current", "computer", "game", "become", "increasingly", "general", "so", "special", "purpose", "algorithm", "-lrb-", "cell", "portal", "2.5", "solution", "-rrb-", "can", "use", "anymore", "while", "exact", "algorithm", "difficult", "implement", "error-prone", "gv", "can", "use", "all", "stage", "game", "development", "during", "level", "design", "number", "ray", "can", "limit", "so", "coarse", "solution", "can", "provide", "almost", "instantaneously", "final", "production", "pv", "can", "calculate", "high", "accuracy", "very", "important", "create", "pv", "close", "EVS", "possible", "dependent", "particular", "output", "resolution", "since", "resolution", "application", "run", "know", "advance", "addition", "antialiasing", "method", "-lrb-", "supersampling", "multisampling", "-rrb-", "use", "information", "from", "subpixel", "triangle", "so", "virtual", "resolution", "even", "higher", "note", "although", "scene", "computer", "game", "inherently", "dynamic", "major", "part", "scene", "still", "static", "so", "huge", "gain", "render", "speed", "can", "obtain", "furthermore", "gv", "work", "arbitrary", "polyhedral", "view", "cell", "so", "view", "space", "can", "choose", "freely", "online", "networked", "visibility", "show", "result", "reasonable", "approximation", "ev", "low", "pixel", "error", "can", "find", "second", "less", "therefore", "gv", "can", "use", "online", "visibility", "culling", "run", "separate", "processor", "over", "network", "describe", "instant", "visibility", "system", "-lsb-", "Wonka", "et", "al.", "2001", "-rsb-", "case", "transmit", "pv", "per-object", "basis", "improve", "result", "because", "suffice", "one", "triangle", "object", "find", "gv", "order", "classify", "whole", "object", "visible", "furthermore", "small", "modification", "gv", "make", "algorithm", "better", "suitable", "progressive", "evaluation", "instead", "interleave", "ab", "random", "sample", "from", "beginning", "create", "certain", "number", "-lrb-", "e.g.", "1m", "-rrb-", "random", "sample", "startup", "phase", "only", "use", "those", "seed", "ABS", "ray", "give", "better", "distribution", "sample", "initial", "phase", "algorithm", "since", "ab", "systematically", "flood", "fill", "PVS", "around", "its", "seed", "point", "take", "some", "time", "until", "all", "image", "region", "have", "be", "reach", "impostor", "generation", "many", "scene", "visibility", "culling", "sufficient", "guarantee", "high", "frame", "rate", "everywhere", "model", "therefore", "image-based", "method", "can", "use", "replace", "complex", "scene", "part", "so-called", "impostor", "however", "since", "impostor", "trade", "render", "speed", "against", "memory", "consumption", "important", "find", "exact", "visible", "part", "scene", "avoid", "waste", "impostor", "memory", "invisible", "geometry", "-lsb-", "Jeschke", "et", "al.", "2005", "-rsb-", "gv", "ideally", "suit", "purpose", "since", "provide", "accurate", "per-triangle", "visibility", "information", "so", "only", "those", "object", "part", "actually", "visible", "need", "store", "impostor", "visibility", "decision", "basis", "many", "practical", "application", "require", "accurate", "visibility", "information", "part", "decision", "make", "process", "example", "include", "visibility", "analysis", "urban", "planning", "-lrb-", "do", "new", "skyscraper", "impact", "old", "town", "-rrb-", "military", "application", "-lrb-", "line", "sight", "culling", "tactical", "battlefield", "management", "-lsb-", "McDermott", "Gelsey", "1987", "-rsb-", "-rrb-", "telecommunications", "-lrb-", "visibility", "emitter", "-rrb-", "robotic", "many", "more", "gv", "advantageous", "problem", "because", "general", "purpose", "do", "have", "any", "parameter", "tweak", "do", "depend", "any", "special", "property", "scene" ],
  "content" : "Visibility is a fundamental problem in computer graphics: visibility computations are necessary for occlusion culling, shadow generation, inside-outside classifications, image-based rendering, motion ? {peter.wonka|kaichi.zhou}@asu.edu , Tempe, AZ 85287-0112 ? wimmer@cg.tuwien.ac.at , 1040 Vienna, Austria ? {sm|hesina}@vrvis.at , 1220 Vienna, Austria ? alexander.reshetov@intel.com , Santa Clara, CA 95054 planning, and navigation, to name just a few examples. While visibility from a single viewpoint can be calculated quite easily, many applications require the potentially visible set (PVS) for a region in space, which is, unfortunately, much more complicated. A number of excellent from-region visibility algorithms exist, but most of them are only applicable to a limited range of scenes, require complex computations, and sometimes significant amounts of memory. Therefore, sampling-based solutions have become very popular for practical applications due to their robustness, general applicability, and ease of implementation. In this paper we will improve upon previous sampling-based algorithms by significantly improving the sampling efficiency, i.e., the number of samples required to detect a certain set of visible polygons. To motivate our design choices, we will look at two key aspects of any visibility algorithm: the behavior of the algorithm in ray space, and the data structure used to store and acquire visibility information. Figure 2 illustrates the concept of ray space in 2D. Given a view cell, shown as edge parameterized with s, and a scene with objects shown in grey, we can compute visibility by considering all rays from the view cell to a plane behind the scene, parameterized with t. For a 2D scene, this is a 2D set of rays; for a 3D scene this is a 4D set of rays. If this set of rays is sampled densely enough, we will have a good visibility solution. The inefficiency of a pure regular sampling approach as shown in Figure 2 is that the same surfaces are sampled over and over again (note that the definition of regular depends on the parameterization of ray space! Therefore, it would be beneficial if we could only sample areas that have not been sampled before. This is shown in Figure 3 , where after an initial orthogonal sampling, only few additional rays are needed to find all visible surfaces. In total, little more than a 1D subspace of the 2D ray space needs to be explored in this example. This is due to the spatial coherence of visibility. In this paper, we exploit this coherence: starting from stochastically sampled points, we grow lower-dimensional subspaces of ray space using the newly introduced strategies of adaptive border sampling and reverse sampling, which are guided by the properties of scene visibility. The second key aspect of a visibility algorithm is what data structure is used to store visibility information. The most complete, but also complex, way is to store 4D ray space. For large scenes, this entails prohibitive levels of memory consumption. Conservative algorithms often store the shadow volume, whereas sampling algorithms use the volume of 3D space that has not been sampled yet (the so-called void volume, Figure 4 ); but these data structures still require several times the memory taken by the scene description itself. Alternatively, the boundary of the void volume (the void surface [Pito 1999]) can be used, which is easy to sample from one point in space, but difficult to manipulate. In this paper, we do not store visibility information beyond the PVS at all, relying on our new reverse sampling approach to penetrate the void surface based on the current sample only. The key contribution of this paper is an intelligent sampling algorithm that drastically improves the performance of previous sampling approaches by combining random sampling with deterministic exploration phases. The algorithm requires little memory, is simple to implement, accepts any triangular test scene as input, and can be used as a general purpose visibility tool. A large volume of research has been devoted to visibility problems due to their importance in computer graphics, computer vision, robotics and other fields. This section compares various as pects of the proposed visibility sampling algorithm to a wider class of from-region visibility algorithms. For a general overview, we can recommend excellent surveys of visibility problems and algorithms [Durand 1999; Cohen-Or et al. 2003]. From-region visibility algorithms are usually classified as exact (potentially visible set PVS = exact visible set EVS), conservative (PVS ? EVS), aggressive (PVS ? EVS), or approximate (PVS ? EVS). Exact solutions to compute visibility from a region in space have been rare [Duguet and Drettakis 2002; Durand 1999], but recently, two algorithms have been published [Nirenstein et al. 2002; Bittner 2003] and further improved upon [Haumont et al. 2005; Mora et al. 2005] that are both exact and work for general scenes. While exact algorithms have been the holy grail of the visibility community for a long time, these two algorithms show that the complexity inherent in the visibility problem may be an obstacle to make exact visibility widely applicable. The high running times and high complexity of implementation are critical, and numerical robustness issues can actually make the solution as approximate as a sampling-based strategy (see [Bittner 2003]). We believe that sampling-based methods and exact methods complement each other, as they have different strengths and weaknesses. Several authors stress the importance of conservative visibility computations, i.e., never underestimating the visible set. Since this problem is almost as hard as the exact visibility problem, practically all published conservative from-region algorithms simplify the problem by imposing certain restrictions on the scene. Typical restrictions are the limitation to 2.5D visibility [Wonka et al. 2000; Bittner et al. 2001; Koltun et al. 2001], architectural scenes [Airey et al. 1990; Teller and S?quin 1991], the restriction to volumetric occluders [Schaufler et al. 2000], or the restriction to larger occluders close to the view cell [Leyvand et al. 2003; Durand et al. 2000]?this last restriction is implied by the nature of the data structures used to store visibility information. While it can be argued that larger occluders can be synthesized from smaller ones [Andujar et al. 2000], this is not possible in general. The guarantee to include all visible geometry in the PVS may be important for some applications, but ultimately, sampling-based methods can be much more successful: 1. As opposed to the published conservative algorithms, they do not make any assumptions about the scene, allowing them to handle a much larger variety of scenes. Due to their ease of implementation and robustness, nonconservative algorithms are more practical for commercial products such as computer games [Aila and Miettinen 2004], and are already used in this context. Numerical issues often make conservative algorithms nonconservative in practice. Since visibility is such a fundamental problem, general, robust and practical tools are important to complement the specialized algorithms discussed before. These tools are almost universally based  on sampling. The two most popular solutions are to randomly select a large number of rays to sample visibility [Schaufler et al. 2000; Airey et al. 1990; Shade et al. 1998], or to first sample the boundary of the view cell with points and then sample visibility from each of these points [Levoy and Hanrahan 1996; Stuerzlinger 1999]. In the context of view planning for laser range scanners, sampling algorithms exist that store the void surface or the void volume to compute the next-best view [Pito 1999]. A similar algorithm was also used for the generation of textured depth meshes [Wilson and Manocha 2003]. Another option is to shoot rays from the scene triangles towards the view cell [Gotsman et al. 1999], which leads to oversampling of ray space for most scenes. Nirenstein and Blake [2004] were the first to realize the full potential of sampling for visibility computation. They proposed a new approach which uses graphics hardware for sampling. As discussed in Section 4.4, this algorithm aims to reduce the rendering time by culling even visible triangles as long as this does not result in significant rendering error. This is opposed to our algorithm, which always tries to find the best possible approximation of the exact visible set. Ray space analysis. In the introduction in Figure 3 , we have argued that it is desirable not to sample the ray space regularly. The right image in this figure shows that only an approximately 1D subspace of rays needs to be considered in this simple 2D example. Our new algorithm samples ray space more intelligently: random sampling places initial seed points in ray space to stochastically search for regions in ray space that have not been explored yet. To continue the example for 2D as in the figure, adaptive border sampling corresponds to a vertical expansion in 2D ray space (since the viewpoint remains fixed) which only proceeds into yet unexplored areas. A particular advantage of the adaptive border sampling method is that the sampling rate is adapted to the geometric complexity of the visible surfaces. Reverse sampling, on the other hand, is a movement in the horizontal direction (since the hitpoint remains fixed) in cases where these movements promise to lead to not yet explored regions. For the full 3D case, it is instructive to study our algorithm in terms of the visibility complex [Durand 1999]. The visibility complex describes a partition of the 4D ray space into 4D regions of rays that hit the same object (note that ray space is strictly 4D because we are only interested in rays starting from the view cell). The 3D boundaries of this partition are called tangency volume and consist of rays tangent to scene objects. Samples placed along the object borders therefore correspond to samples near the tangency volume of the object in dual space. Since we keep the viewpoint (2 degrees of freedom) fixed during the deterministic ABS exploration phase, we need to sample a 1D set only. Without ABS, we would ignore the tangency volumes and have to sample the whole 2D subset of ray space defined by the chosen viewpoint. Reverse sampling, on the other hand, looks for lines tangent to two scene edges. In ray space, these lines are near intersections of two tangency volumes. These intersections are called bitangents and are only 2D. For reverse sampling, the viewpoint is allowed to move along a plane (1D), so in total RS also samples a 1D set. The combined ABS and RS strategies therefore correspond to explorations of the 4D ray space along those 1D curves that are most likely to reveal new objects. This explains the high efficiency of the GVS algorithm. Another useful interpretation of the ABS sampling strategy in 3D is based on the visibility map [Bittner 2002]. The visibility map is a structure that contains all visible line segments in a given view. These segments can be characterized mainly as flat and corner (interior edges of a mesh), or shadow (depth discontinuities). The ABS sampling strategy places samples at all edges of the visibility map (without explicitly constructing it). Samples on interior edges of a mesh serve to find connected sets of a mesh (trivially adjacent regions in the visibility complex). Samples at the shadow edges serve to discover depth discontinuities, where objects are partly occluded by other objects. Shadow edges are where the RS sampling strategy is used to refine the sampling (by finding the bitangents in the visibility complex). The term conservative (or even exact) visibility is actually quite misleading. Most algorithms, though conservative in theory, are not conservative in practice due to numerical robustness problems. This is especially true for algorithms relying on graphics hardware. Furthermore, complex algorithms are prone to implementation problems. Due to the much improved sampling efficiency, the magnitude of error introduced by our algorithm is comparable to that of other error sources. Such errors are usually tolerated for conservative algorithms (see Section 4). Other algorithms that are often used in conjunction with visibility processing, like level-of-detail algorithms or shadow mapping, are an additional source of errors. Scene complexity. One distinguishing feature of our samplingbased algorithm is that it can handle arbitrary types of scenes with high overall and visual complexity. It does not rely on occluder synthesis, and depends mostly on the size of the visible set, not on the total scene complexity. Although guided visibility sampling generally finds the major part of the PVS very quickly, the fact that it is stochastic on the one hand and guided by the visibility in the scene on the other hand makes the final accuracy dependent on the structure of the scene. Therefore, we cannot give any hard guarantees for the pixel error of the calculated PVS. Also, the ability to explore connected ray space subsets in the far distance is limited by the numerical precision of the ray direction vector. For ABS, this means that triangles that have a solid angle of less than double precision accuracy when seen from the ray origin will most likely be missed. The worst case of scene complexity is in scenes that consist of a large set of small disconnected triangles, such as forest scenes or synthetic scenes of random triangles. The visibility of such scenes is so complex that even sampling-based solutions will either have high error or take a long time to compute. Still, it is important to point out that sampling-based algorithms are the only ones that are able to even process these scenes. In this respect, an avenue of future work is to incorporate geometric LOD into the sampling framework, similar to the vLOD system proposed by Chhugani et al. [2005]. Geometric LODs could potentially increase the speed of the ray tracer, and make intersection computations more robust because small triangles in the distance get replaced by larger ones. However, robust geometric LOD is not available for all scenes, and integrating LODs into ray tracers is a current topic of research. Furthermore, the error metric used to create the LODs impacts the accuracy of the visibility algorithm and therefore the usable output resolutions. One important strength of sampling-based methods is their ease of application. We will discuss a number of application scenarios for our algorithm. Visibility preprocessing for real-time rendering and games. This is the scenario already described in the overview, and one of the most important applications for GVS. For example, the scenes of current computer games are becoming increasingly general, so that special purpose algorithms (cells and portals, and 2.5D solutions) cannot be used anymore, while exact algorithms are difficult to implement and error-prone. GVS can be used in all stages of game development: During level design, the number of rays can be limited so that a coarse solution can be provided almost instantaneously. For the final production, the PVS can be calculated with high accuracy. It is very important to create a PVS that is as close to the EVS as possible and not dependent on a particular output resolution, since the resolution the application will be run at is not known in advance. In addition, antialiasing methods (supersampling and multisampling) use information from subpixel triangles, so that the virtual resolution is even higher. Note that although scenes in computer games are inherently dynamic, the major part of the scene is still static, so huge gains in rendering speeds can be obtained. Furthermore, GVS works on arbitrary polyhedral view cells, so that the view space can be chosen freely. Online and networked visibility. As shown in the results, a reasonable approximation to the EVS with low pixel error can be found in a second or less. Therefore, GVS can be used for online visibility culling by running it on a separate processor or over the network, as described in the Instant Visibility system [Wonka et al. 2001]. In this case, transmitting the PVS on a per-object basis will improve results because it suffices for one triangle of an object to be found by GVS in order to classify the whole object as visible. Furthermore, a small modification to GVS makes the algorithm better suitable to progressive evaluation: instead of interleaving ABS and random samples from the beginning, create a certain number (e.g., 1M) of random samples in a startup phase, and only then use those to seed the ABS rays. This will give a better distribution of samples in the initial phase of the algorithm, since ABS systematically ?flood fills? the PVS around its seed point, and it takes some time until all image regions have been reached. Impostor generation. In many scenes, visibility culling is not sufficient to guarantee a high frame rate everywhere in the model. Therefore, image-based methods can be used to replace complex scene parts by so-called impostors. However, since impostors trade rendering speed against memory consumption, it is important to find the exact visible parts of the scene to avoid wasting impostor memory on invisible geometry [Jeschke et al. 2005]. GVS is ideally suited for this purpose since it provides accurate per-triangle visibility information, so that only those object parts that are actually visible need to be stored in an impostor. Visibility as decision basis. Many practical applications require accurate visibility information as part of a decision making process. Examples include visibility analysis in urban planning (does the new skyscraper impact old town? ), military applications (line of sight culling, tactical battlefield management [McDermott and Gelsey 1987]), telecommunications (visibility of emitters), robotics and many more. GVS is advantageous for these problems because it is general purpose and does not have any parameters to tweak, and does not depend on any special properties of the scene. Exact solutions to compute visibility from a region in space have been rare [Duguet and Drettakis 2002; Durand 1999], but recently, two algorithms have been published [Nirenstein et al. 2002; Bittner 2003] and further improved upon [Haumont et al. 2005; Mora et al. 2005] that are both exact and work for general scenes. While exact algorithms have been the holy grail of the visibility community for a long time, these two algorithms show that the complexity inherent in the visibility problem may be an obstacle to make exact visibility widely applicable. The high running times and high complexity of implementation are critical, and numerical robustness issues can actually make the solution as approximate as a sampling-based strategy (see [Bittner 2003]). We believe that sampling-based methods and exact methods complement each other, as they have different strengths and weaknesses. Several authors stress the importance of conservative visibility computations, i.e., never underestimating the visible set. Since this problem is almost as hard as the exact visibility problem, practically all published conservative from-region algorithms simplify the problem by imposing certain restrictions on the scene. Typical restrictions are the limitation to 2.5D visibility [Wonka et al. 2000; Bittner et al. 2001; Koltun et al. 2001], architectural scenes [Airey et al. 1990; Teller and S?quin 1991], the restriction to volumetric occluders [Schaufler et al. 2000], or the restriction to larger occluders close to the view cell [Leyvand et al. 2003; Durand et al. 2000]?this last restriction is implied by the nature of the data structures used to store visibility information. While it can be argued that larger occluders can be synthesized from smaller ones [Andujar et al. 2000], this is not possible in general. The guarantee to include all visible geometry in the PVS may be important for some applications, but ultimately, sampling-based methods can be much more successful: 1. As opposed to the published conservative algorithms, they do not make any assumptions about the scene, allowing them to handle a much larger variety of scenes. Due to their ease of implementation and robustness, nonconservative algorithms are more practical for commercial products such as computer games [Aila and Miettinen 2004], and are already used in this context. Numerical issues often make conservative algorithms nonconservative in practice. Since visibility is such a fundamental problem, general, robust and practical tools are important to complement the specialized algorithms discussed before. These tools are almost universally based  on sampling. The two most popular solutions are to randomly select a large number of rays to sample visibility [Schaufler et al. 2000; Airey et al. 1990; Shade et al. 1998], or to first sample the boundary of the view cell with points and then sample visibility from each of these points [Levoy and Hanrahan 1996; Stuerzlinger 1999]. In the context of view planning for laser range scanners, sampling algorithms exist that store the void surface or the void volume to compute the next-best view [Pito 1999]. A similar algorithm was also used for the generation of textured depth meshes [Wilson and Manocha 2003]. Another option is to shoot rays from the scene triangles towards the view cell [Gotsman et al. 1999], which leads to oversampling of ray space for most scenes. Nirenstein and Blake [2004] were the first to realize the full potential of sampling for visibility computation. They proposed a new approach which uses graphics hardware for sampling. As discussed in Section 4.4, this algorithm aims to reduce the rendering time by culling even visible triangles as long as this does not result in significant rendering error. This is opposed to our algorithm, which always tries to find the best possible approximation of the exact visible set. Ray space analysis. In the introduction in Figure 3 , we have argued that it is desirable not to sample the ray space regularly. The right image in this figure shows that only an approximately 1D subspace of rays needs to be considered in this simple 2D example. Our new algorithm samples ray space more intelligently: random sampling places initial seed points in ray space to stochastically search for regions in ray space that have not been explored yet. To continue the example for 2D as in the figure, adaptive border sampling corresponds to a vertical expansion in 2D ray space (since the viewpoint remains fixed) which only proceeds into yet unexplored areas. A particular advantage of the adaptive border sampling method is that the sampling rate is adapted to the geometric complexity of the visible surfaces. Reverse sampling, on the other hand, is a movement in the horizontal direction (since the hitpoint remains fixed) in cases where these movements promise to lead to not yet explored regions. For the full 3D case, it is instructive to study our algorithm in terms of the visibility complex [Durand 1999]. The visibility complex describes a partition of the 4D ray space into 4D regions of rays that hit the same object (note that ray space is strictly 4D because we are only interested in rays starting from the view cell). The 3D boundaries of this partition are called tangency volume and consist of rays tangent to scene objects. Samples placed along the object borders therefore correspond to samples near the tangency volume of the object in dual space. Since we keep the viewpoint (2 degrees of freedom) fixed during the deterministic ABS exploration phase, we need to sample a 1D set only. Without ABS, we would ignore the tangency volumes and have to sample the whole 2D subset of ray space defined by the chosen viewpoint. Reverse sampling, on the other hand, looks for lines tangent to two scene edges. In ray space, these lines are near intersections of two tangency volumes. These intersections are called bitangents and are only 2D. For reverse sampling, the viewpoint is allowed to move along a plane (1D), so in total RS also samples a 1D set. The combined ABS and RS strategies therefore correspond to explorations of the 4D ray space along those 1D curves that are most likely to reveal new objects. This explains the high efficiency of the GVS algorithm. Another useful interpretation of the ABS sampling strategy in 3D is based on the visibility map [Bittner 2002]. The visibility map is a structure that contains all visible line segments in a given view. These segments can be characterized mainly as flat and corner (interior edges of a mesh), or shadow (depth discontinuities). The ABS sampling strategy places samples at all edges of the visibility map (without explicitly constructing it). Samples on interior edges of a mesh serve to find connected sets of a mesh (trivially adjacent regions in the visibility complex). Samples at the shadow edges serve to discover depth discontinuities, where objects are partly occluded by other objects. Shadow edges are where the RS sampling strategy is used to refine the sampling (by finding the bitangents in the visibility complex). The term conservative (or even exact) visibility is actually quite misleading. Most algorithms, though conservative in theory, are not conservative in practice due to numerical robustness problems. This is especially true for algorithms relying on graphics hardware. Furthermore, complex algorithms are prone to implementation problems. Due to the much improved sampling efficiency, the magnitude of error introduced by our algorithm is comparable to that of other error sources. Such errors are usually tolerated for conservative algorithms (see Section 4). Other algorithms that are often used in conjunction with visibility processing, like level-of-detail algorithms or shadow mapping, are an additional source of errors. Scene complexity. One distinguishing feature of our samplingbased algorithm is that it can handle arbitrary types of scenes with high overall and visual complexity. It does not rely on occluder synthesis, and depends mostly on the size of the visible set, not on the total scene complexity. Although guided visibility sampling generally finds the major part of the PVS very quickly, the fact that it is stochastic on the one hand and guided by the visibility in the scene on the other hand makes the final accuracy dependent on the structure of the scene. Therefore, we cannot give any hard guarantees for the pixel error of the calculated PVS. Also, the ability to explore connected ray space subsets in the far distance is limited by the numerical precision of the ray direction vector. For ABS, this means that triangles that have a solid angle of less than double precision accuracy when seen from the ray origin will most likely be missed. The worst case of scene complexity is in scenes that consist of a large set of small disconnected triangles, such as forest scenes or synthetic scenes of random triangles. The visibility of such scenes is so complex that even sampling-based solutions will either have high error or take a long time to compute. Still, it is important to point out that sampling-based algorithms are the only ones that are able to even process these scenes. In this respect, an avenue of future work is to incorporate geometric LOD into the sampling framework, similar to the vLOD system proposed by Chhugani et al. [2005]. Geometric LODs could potentially increase the speed of the ray tracer, and make intersection computations more robust because small triangles in the distance get replaced by larger ones. However, robust geometric LOD is not available for all scenes, and integrating LODs into ray tracers is a current topic of research. Furthermore, the error metric used to create the LODs impacts the accuracy of the visibility algorithm and therefore the usable output resolutions. One important strength of sampling-based methods is their ease of application. We will discuss a number of application scenarios for our algorithm. Visibility preprocessing for real-time rendering and games. This is the scenario already described in the overview, and one of the most important applications for GVS. For example, the scenes of current computer games are becoming increasingly general, so that special purpose algorithms (cells and portals, and 2.5D solutions) cannot be used anymore, while exact algorithms are difficult to implement and error-prone. GVS can be used in all stages of game development: During level design, the number of rays can be limited so that a coarse solution can be provided almost instantaneously. For the final production, the PVS can be calculated with high accuracy. It is very important to create a PVS that is as close to the EVS as possible and not dependent on a particular output resolution, since the resolution the application will be run at is not known in advance. In addition, antialiasing methods (supersampling and multisampling) use information from subpixel triangles, so that the virtual resolution is even higher. Note that although scenes in computer games are inherently dynamic, the major part of the scene is still static, so huge gains in rendering speeds can be obtained. Furthermore, GVS works on arbitrary polyhedral view cells, so that the view space can be chosen freely. Online and networked visibility. As shown in the results, a reasonable approximation to the EVS with low pixel error can be found in a second or less. Therefore, GVS can be used for online visibility culling by running it on a separate processor or over the network, as described in the Instant Visibility system [Wonka et al. 2001]. In this case, transmitting the PVS on a per-object basis will improve results because it suffices for one triangle of an object to be found by GVS in order to classify the whole object as visible. Furthermore, a small modification to GVS makes the algorithm better suitable to progressive evaluation: instead of interleaving ABS and random samples from the beginning, create a certain number (e.g., 1M) of random samples in a startup phase, and only then use those to seed the ABS rays. This will give a better distribution of samples in the initial phase of the algorithm, since ABS systematically ?flood fills? the PVS around its seed point, and it takes some time until all image regions have been reached. Impostor generation. In many scenes, visibility culling is not sufficient to guarantee a high frame rate everywhere in the model. Therefore, image-based methods can be used to replace complex scene parts by so-called impostors. However, since impostors trade rendering speed against memory consumption, it is important to find the exact visible parts of the scene to avoid wasting impostor memory on invisible geometry [Jeschke et al. 2005]. GVS is ideally suited for this purpose since it provides accurate per-triangle visibility information, so that only those object parts that are actually visible need to be stored in an impostor. Visibility as decision basis. Many practical applications require accurate visibility information as part of a decision making process. Examples include visibility analysis in urban planning (does the new skyscraper impact old town? ), military applications (line of sight culling, tactical battlefield management [McDermott and Gelsey 1987]), telecommunications (visibility of emitters), robotics and many more. GVS is advantageous for these problems because it is general purpose and does not have any parameters to tweak, and does not depend on any special properties of the scene.",
  "resources" : [ ]
}