{
  "uri" : "sig2011a-a135-sewall_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2011a/a135-sewall_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Interactive Hybrid Simulation of Large-Scale Traffic",
    "published" : "2011",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Jason-Sewall",
      "name" : "Jason",
      "surname" : "Sewall"
    }, {
      "uri" : "http://drinventor/David-Wilkie",
      "name" : "David",
      "surname" : "Wilkie"
    }, {
      "uri" : "http://drinventor/Ming C.-Lin",
      "name" : "Ming C.",
      "surname" : "Lin"
    } ]
  },
  "bagOfWords" : [ "we", "present", "novel", "real-time", "algorithm", "modeling", "large-scale", "realistic", "traffic", "use", "hybrid", "model", "both", "continuum", "agentbased", "method", "traffic", "simulation", "we", "key", "contribution", "efficient", "technique", "dynamic", "coupling", "discrete", "vehicle", "simulation", "aggregated", "behavior", "continuum", "technique", "traffic", "simulation", "technique", "demonstrate", "applicability", "hybrid", "technique", "efficient", "simulation", "large-scale", "flow", "complex", "dynamics", "two", "class", "simulation", "technique", "most", "commonly", "use", "modeling", "traffic", "flow", "we", "present", "technique", "base", "average", "well", "Poisson", "process", "handle", "transition", "vehicle", "representation", "between", "continuum", "discrete", "simulation", "area", "discuss", "how", "constituent", "simulation", "component", "adapt", "handle", "conversion", "demonstrate", "we", "method", "we", "show", "real-time", "visualization", "metropolitan-scale", "traffic", "flow", "urban", "scene", "augmented", "aerial", "street", "map", "those", "show", "Figure", "we", "also", "validate", "simulation", "result", "use", "real-world", "traffic", "datum", "stringdistance", "metric", "analyze", "performance", "we", "technique", "modern", "architecture", "more", "recently", "-lsb-", "aw", "rascle", "2000", "-rsb-", "-lsb-", "Zhang", "2002", "-rsb-", "each", "propose", "2-variable", "model", "traffic", "flow", "correct", "anisotropic", "behavior", "-lsb-", "Lebacque", "et", "al.", "2007", "-rsb-", "note", "two", "model", "could", "unify", "through", "change", "variable", "dub", "system", "Aw-Rascle-Zhang", "-lrb-", "arz", "-rrb-", "system", "equation", "forthcoming", "work", "-lsb-", "Wilkie", "et", "al.", "2011", "-rsb-", "describe", "technique", "synthesize", "useful", "road", "network", "from", "publicly-available", "gi", "datum", "low-cost", "accessibility", "further", "enhance", "value", "we", "work", "section", "we", "briefly", "discuss", "datum", "structure", "use", "we", "simulation", "present", "description", "we", "hybrid", "simulation", "technique", "real-time", "traffic", "visualization", "because", "we", "method", "visualize", "behavior", "vehicle", "both", "urban", "rural", "setting", "lane-changing", "scenario", "intersection", "crossing", "we", "require", "detailed", "road", "network", "datum", "we", "domain", "we", "use", "lane-based", "representation", "work", "well", "both", "agentbased", "continuum", "simulation", "we", "use", "representation", "base", "polyline", "fit", "circular", "arc", "simple", "efficient", "allow", "realistic", "visually", "smooth", "vehicle", "motion", "we", "hybrid", "traffic", "simulation", "both", "efficient", "flexible", "combine", "strength", "continuum", "agent-based", "technique", "any", "give", "point", "simulation", "road", "network", "consist", "mutually", "exclusive", "region", "two", "type", "one", "where", "we", "use", "continuum", "technique", "describe", "vehicle", "movement", "another", "where", "we", "use", "discrete", "agent-based", "technique", "simulation", "key", "component", "we", "hybrid", "simulation", "technique", "how", "two", "different", "type", "simulation", "couple", "together", "continuum", "traffic", "expect", "density-like", "quantity", "car", "per", "car", "length", "velocity", "component", "while", "discrete", "simulation", "carry", "out", "explicit", "position", "velocity", "each", "vehicle", "network", "step", "critical", "ensure", "artifact-free", "consistent", "transition", "vehicle", "cross", "boundary", "between", "two", "simulation", "model", "we", "proceed", "take", "discrete", "time", "step", "vary", "length", "wherein", "state", "traffic", "consider", "integrate", "forward", "time", "high", "level", "step", "we", "algorithm", "follow", "step", "Advance", "continuum", "region", "-lrb-", "-rrb-", "determine", "dynamics", "traffic", "flow", "also", "know", "flux", "between", "each", "adjacent", "cell", "-lrb-", "-rrb-", "compute", "minimum", "stable", "timestep", "use", "maximum", "speed", "from", "each", "cell", "solution", "step", "1a", "step", "Update", "flux", "capacitor", "-lrb-", "see", "Section", "4.3.1", "-rrb-", "add", "discrete", "car", "need", "step", "Advance", "agent-based", "region", "-lrb-", "use", "same", "compute", "step", "1b", "-rrb-", "step", "aggregate", "all", "discrete", "vehicle", "-lrb-", "section", "4.1", "-rrb-", "flow", "continuum", "region", "other", "word", "we", "separately", "advance", "continuum", "agentbased", "simulation", "manage", "transition", "vehicle", "between", "different", "simulation", "regime", "below", "we", "describe", "basic", "simulation", "technique", "use", "step", "later", "section", "we", "present", "we", "main", "contribution", "technique", "convert", "between", "different", "type", "simulation", "continuum", "model", "traffic", "simulation", "each", "lane", "divide", "discrete", "computational", "cell", "represent", "traffic", "continuum", "component", "network", "advance", "step", "before", "agent-based", "simulation", "component", "handle", "continuum", "simulation", "component", "have", "more", "stringent", "stability", "requirement", "than", "agent-based", "component", "perform", "continuum", "update", "prior", "agent-based", "we", "can", "use", "compute", "step", "1b", "later", "agent-based", "update", "perform", "step", "more", "detail", "continuum", "simulation", "technique", "traffic", "simulation", "can", "find", "any", "-lsb-", "aw", "rascle", "2000", "Zhang", "2002", "Sewall", "et", "al.", "2010", "-rsb-", "result", "present", "paper", "use", "ARZ", "model", "region", "we", "traffic", "network", "under", "agent-based", "regime", "handle", "discrete", "car-following", "method", "acceleration", "explicitly", "integrate", "vehicle?s", "velocity", "which", "integrate", "position", "we", "show", "below", "we", "only", "require", "each", "discrete", "vehicle", "have", "position", "-lrb-", "non-negative", "-rrb-", "velocity", "determine", "its", "velocity", "state", "vehicle", "ahead", "we", "demonstration", "paper", "use", "extend", "version", "method", "-lsb-", "Treiber", "et", "al.", "2000", "-rsb-", "consider", "representative", "modern", "approach", "agent-based", "traffic", "simulation", "we", "adaptation", "technique", "additionally", "support", "lane-changing", "inhomogeneous", "driver", "model", "vehicle", "response", "traffic", "signal", "intersection", "variable", "speed", "limit", "Lane", "change", "handle", "first", "apply", "behavior", "model", "determine", "vehicle", "desire", "change", "lane", "determine", "lane", "change", "safe", "finally", "transition", "vehicle", "between", "lane", "over", "time", "interval", "driver", "behavioral", "model", "vary", "across", "technique", "we", "have", "choose", "variety", "parameter", "we", "modulate", "over", "different", "agent", "effect", "variety", "driver", "make", "more", "realistic", "simulation", "take", "advantage", "agent-based", "continuum", "simulation", "we", "introduce", "hybrid", "technique", "allow", "road", "network", "simulated", "both", "simulation", "type", "network", "partition", "multiple", "disjoint", "-lrb-", "necessarily", "connect", "-rrb-", "region", "cover", "domain", "region", "we", "simulation", "dynamic", "we", "can", "adaptively", "change", "shape", "simulation", "method", "region", "need", "observe", "certain", "phenomenon", "meet", "performance", "requirement", "respond", "user", "input", "section", "4.1", "4.2", "establish", "fundamental", "conversion", "process", "describe", "how", "whole", "region", "convert", "from", "one", "regime", "other", "later", "section", "4.3", "we", "present", "how", "traffic", "flow", "from", "one", "type", "region", "another", "handle", "Vehicle", "support", "function", "straightforward", "compute", "continuum", "representation", "from", "list", "discrete", "vehicle", "-lsb-", "-rsb-", "store", "continuum", "simulation", "average", "quantity", "density", "relative", "flow", "traffic", "each", "discrete", "vehicle", "front-bumper", "position", "length", "velocity", "we", "define", "boxcar-like", "support", "function", "follow", "support", "all", "vehicle", "give", "sum", "exemplary", "plot", "function", "depict", "figure", "assume", "without", "loss", "generality", "continuum", "cell", "uniformly", "space", "give", "vehicle", "discretize", "traffic", "density", "each", "cell", "continuum", "weighted", "combination", "along", "vehicle", "velocity", "can", "use", "similarly", "determine", "traffic", "velocity", "derive", "relative", "velocity", "average", "algorithm", "practice", "can", "compute", "efficient", "manner", "linear", "number", "car", "iterate", "over", "each", "vehicle", "-lsb-", "-rrb-", "each", "we", "compute", "intersection", "nonzero", "portion", "continuum", "grid", "apply", "equation", "-lrb-", "-rrb-", "its", "analogue", "velocity", "we", "propose", "method", "inspire", "kinetic", "theory", "gas", "Poisson", "process", "deliver", "suitable", "result", "while", "remain", "simple", "efficient", "Poisson", "process", "well-known", "stochastic", "procedure", "use", "model", "occurrence", "-lrb-", "arrival", "time", "-rrb-", "independent", "event", "so", "we", "use", "poisson-like", "process", "determine", "location", "discrete", "vehicle", "continuum", "region", "give", "piecewiseconstant", "density", "cell", "comprise", "unknown", "region", "rather", "than", "determine", "how", "discrete", "event", "distribute", "time", "we", "model", "where", "discrete", "vehicle", "distribute", "space", "specifically", "how", "located", "along", "1-dimensional", "space", "lane", "can", "show", "-lsb-", "devroye", "1986", "-rsb-", "time", "between", "event", "+1", "homogeneous", "Poisson", "process", "rate", "satisfy", "exponential", "distribution", "probability", "density", "function", "-lrb-", "pdf", "-rrb-", "more", "precisely", "equation", "-lrb-", "-rrb-", "give", "probability", "each", "-lsb-", "-rrb-", "+1", "we", "can", "efficiently", "generate", "exponential", "random", "variable", "through", "inversion", "process", "we", "combine", "uniform", "random", "variable", "inverted", "cumulative", "density", "function", "-lrb-", "cdf", "-rrb-", "exponential", "distribution", "set", "equal", "uniform", "random", "variable", "solve", "we", "get", "exponentially-distributed", "random", "variable", "properly", "account", "continuum", "traffic", "density", "datum", "lane", "we", "would", "like", "model", "inhomogeneous", "Poisson", "process", "where", "equation", "-lrb-", "-rrb-", "longer", "constant", "indeed", "we", "wish", "have", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "where", "reflect", "representative", "car", "length", "scale", "convert", "-lrb-", "-rrb-", "from", "car", "per", "car", "length", "car", "per", "meter", "-lrb-", "i.e.", "spatial", "unit", "-rrb-", "capture", "variation", "generally", "occur", "continuum", "lane", "distribution", "separation", "between", "successive", "event", "longer", "describe", "equation", "-lrb-", "-rrb-", "follow", "pdf", "reflect", "inhomogeneous", "case", "here", "time", "last", "event", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "dt", "cumulative", "density", "function", "extend", "technique", "present", "equation", "-lrb-", "-rrb-", "generate", "event", "homogeneous", "Poisson", "process", "inhomogeneous", "case", "we", "compute", "cdf", "obtain", "following", "here", "we", "have", "assume", "lim", "-lrb-", "-rrb-", "??", "Inversion", "homogeneous", "case", "we", "invert", "cdf", "achieve", "formulum", "generate", "exponentially-distributed", "random", "variable", "match", "give", "-lrb-", "-rrb-", "recall", "above", "equation", "give", "separation", "time", "between", "two", "event", "first", "occur", "general", "we", "more", "interested", "actual", "time", "new", "event", "rather", "than", "differ", "observe", "we", "can", "generate", "event", "inhomogeneous", "Poisson", "process", "rate", "function", "-lrb-", "-rrb-", "we", "can", "compute", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "because", "we", "rate", "function", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "actually", "give", "discrete", "cell", "traffic", "density", "we", "rate", "function", "piecewiseconstant", "its", "integral", "-lrb-", "-rrb-", "integral", "inverse", "-lrb-", "-rrb-", "simple", "compute", "section", "4.2.4", "we", "give", "efficient", "algorithm", "compute", "position", "discrete", "vehicle", "give", "continuum", "region", "piecewise-constant", "density", "function", "-lrb-", "-rrb-", "however", "we", "first", "establish", "detail", "integral", "integral", "inverse", "piecewise-constant", "function", "we", "have", "continuum", "region", "discrete", "cell", "-lsb-", "-rsb-", "-lsb-", "-rrb-", "each", "cell", "length", "we", "restrict", "generate", "event", "correspond", "density", "continuum", "region", "so", "we", "must", "invert", "from", "equation", "-lrb-", "10", "-rrb-", "asymptotic", "behavior", "let", "we", "consider", "-lrb-", "-rrb-", "equation", "-lrb-", "-rrb-", "we", "assume", "lim", "-lrb-", "-rrb-", "important", "bex", "??", "cause", "argument", "equation", "-lrb-", "-rrb-", "take", "its", "value", "we", "range", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "equation", "so", "domain", "-lrb-", "10", "-rrb-", "??", "lim", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "must", "match", "Monotonicity", "finally", "while", "-lrb-", "-rrb-", "equation", "-lrb-", "10", "-rrb-", "monotone", "-lrb-", "because", "-rrb-", "strictly", "increase", "-lrb-", "-rrb-", "quantity", "-lrb-", "-rrb-", "ln", "strictly", "increase", "finite", "so", "must", "eventually", "occur", "some", "well", "define", "traditional", "sense", "however", "give", "we", "application", "we", "may", "easily", "deal", "issue", "-rrb-", "Whenever", "where", "conceptually", "-lrb-", "-rrb-", "any", "vehicle", "have", "cardinality", "we", "define", "sup", "-lrb-", "-rrb-", "process", "generate", "discrete", "car", "give", "cell", "density", "-lsb-", "-rrb-", "spacing", "base", "equation", "-lrb-", "-rrb-", "-lrb-", "10", "-rrb-", "give", "previous", "vehicle", "position", "uniformly", "distribute", "random", "variable", "we", "add", "ln", "integrate", "rate", "-lrb-", "-rrb-", "look", "up", "value", "sum", "give", "we", "when", "we", "generate", "value", "have", "value", "inverse", "integral", "we", "have", "exceed", "length", "region", "we", "finish", "we", "algorithm", "process", "give", "algorithm", "base", "Algorithm", "nstantiate", "ehicle", "nstantiate", "ehicle", "-lrb-", "-lsb-", "-rsb-", "-rrb-", "-lsb-", "-rsb-", "array", "density", "value", "length", "each", "grid", "cell", "-lsb-", "-rsb-", "last", "while", "true", "NIFORM", "andom", "umber", "-lrb-", "-lrb-", "-rsb-", "-rrb-", "cand", "last", "ln", "cand", "while", "cand", "cand", "cand", "-lsb-", "-rsb-", "-lsb-", "-rsb-", "cand", "+1", "10", "cand", "-lrb-", "cand", "??", "-lsb-", "-rsb-", "cand", "-rrb-", "i?x", "11", "cand", "n?x", "12", "return", "13", "cand", "-lsb-", "-rsb-", "14", "last", "cand", "15", "cand", "16", "-lsb-", "cand", "-rsb-", "algorithm", "vehicle", "instantiation", "from", "continuum", "datum", "several", "observation", "nature", "equation", "-lrb-", "-rrb-", "-lrb-", "10", "-rrb-", "first", "from", "we", "note", "previous", "event", "-lrb-", "-rrb-", "equation", "-lrb-", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "ln", "argument", "-rrb-", "-lrb-", "-rrb-", "ln", "therefore", "we", "never", "need", "explicitly", "compute", "-lrb-", "-rrb-", "compute", "previous", "iteration", "prevent", "we", "use", "rejection", "sampling", "-lrb-", "see", "line", "13", "16", "-rrb-", "furthermore", "we", "know", "instantiated", "vehicle", "have", "strictly", "increase", "value", "simplify", "computation", "each", "we", "know", "each", "last", "take", "its", "value", "i?x", "-lrb-", "last", "-rrb-", "where", "index", "grid", "cell", "last", "instantiation", "occur", "Figure", "show", "result", "run", "nstantiate", "ehicle", "continuum", "lane", "analysis", "performance", "nstantiate", "ehicle", "-lrb-", "-rrb-", "where", "number", "grid", "cell", "continuum", "region", "number", "instantiated", "vehicle", "outer", "while", "loop", "spanning", "line", "16", "algorithm", "execute", "time", "inner", "loop", "span", "line", "iterate", "more", "than", "time", "course", "entire", "execution", "nstantiate", "ehicle", "remain", "bind", "value", "call", "nstantiate", "ehicle", "randomized", "algorithm", "may", "theoretically", "arbitrarily", "large", "-lrb-", "although", "subject", "some", "upper", "bind", "base", "floating-point", "arithmetic", "-rrb-", "we", "can", "give", "conservative", "estimate", "follow", "consider", "case", "where", "-lsb-", "-rsb-", "-lsb-", "-rsb-", "-lsb-", "-rrb-", "clearly", "upper", "bind", "any", "real", "continuum", "region", "-lrb-", "-rrb-", "since", "expect", "value", "homogeneous", "exponential", "distribution", "rate", "parameter", "we", "average", "instantiated", "vehicle", "every", "meter", "bumper-to-bumper", "traffic", "precisely", "match", "saturation", "density", "give", "estimate", "we", "have", "just", "develop", "upper", "bind", "expect", "runtime", "nstantiate", "ehicle", "-lrb-", "-rrb-", "we", "introduce", "flux", "capacitor", "convert", "continuum", "flow", "discrete", "agent", "section", "4.3.1", "we", "describe", "how", "we", "adapt", "car", "average", "procedure", "from", "section", "4.1", "handle", "discrete", "vehicle", "flow", "continuum", "region", "section", "4.3.2", "give", "two", "adjacent", "cell", "continuum", "lane", "we", "use", "method", "describe", "-lsb-", "aw", "rascle", "2000", "Zhang", "2002", "Sewall", "et", "al.", "2010", "-rsb-", "solve", "flow", "interface", "between", "two", "cell", "when", "we", "do", "so", "we", "have", "compute", "flux", "between", "cell", "when", "continuum", "lane", "flow", "discrete", "one", "we", "first", "create", "virtual", "continuum", "cell", "agent-based", "lane", "use", "averaging", "-lrb-", "see", "Section", "4.1", "-rrb-", "we", "able", "use", "standard", "flux", "computation", "process", "last", "continuum", "cell", "virtual", "one", "flux", "can", "now", "use", "convert", "density", "flow", "out", "continuum", "region", "discrete", "vehicle", "enter", "agent-based", "lane", "simultaneously", "provide", "proper", "dynamics", "incoming", "continuum", "lane", "instantiate", "vehicle", "due", "flux", "we", "accumulate", "density", "until", "sufficient", "quantity", "have", "be", "retain", "we", "may", "emit", "vehicle", "we", "call", "flux", "capacitor", "formally", "accumulate", "density", "cap", "flux", "capacitor", "increase", "??", "cap", "during", "time", "step", "from", "per", "following", "where", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "component", "flux", "intermediate", "state", "time", "compute", "solution", "continuum", "lane", "vehicle", "length", "term", "necessary", "scale", "integrand", "from", "car", "per", "car", "length", "-lrb-", "-rrb-", "time", "meter", "per", "second", "-lrb-", "-rrb-", "car", "per", "second", "rate", "traffic", "flow", "because", "we", "consider", "intermediate", "state", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "constant", "during", "timestep", "integral", "trivial", "evaluate", "above", "discussion", "flux", "capacitor", "describe", "how", "translate", "flow", "from", "continuum", "region", "discrete", "vehicle", "how", "account", "downstream", "-lrb-", "agent-based", "-rrb-", "region?s", "effect", "upstream", "continuum", "region", "here", "we", "consider", "converse", "how", "vehicle", "discrete", "region", "flow", "continuum", "region", "may", "convert", "appropriate", "continuum", "quantity", "how", "state", "continuum", "region", "can", "account", "upstream", "-lrb-", "agent-based", "-rrb-", "region", "transfer", "discrete", "vehicle", "continuum", "region", "when", "agent-based", "region", "flow", "continuum", "region", "one", "must", "convert", "discrete", "vehicle", "continuum", "datum", "pass", "new", "regime", "we", "achieve", "manner", "similar", "we", "method", "accounting", "discrete", "downstream", "vehicle", "effect", "outflow", "continuum", "region", "-lrb-", "see", "Section", "4.3.1", "-rrb-", "single", "virtual", "grid", "cell", "end", "agent-based", "region", "fill", "accord", "averaging", "procedure", "Sec", "4.1", "use", "upstream", "boundary", "condition", "downstream", "lane?s", "-lrb-", "continuum", "-rrb-", "flux", "computation", "when", "motion", "vehicle", "carry", "from", "discrete", "region", "continuum", "one", "its", "discrete", "representation", "simply", "vanish", "vehicle", "immediately", "account", "continuum", "representation", "flux", "computation", "just", "describe", "when", "enter", "downstream", "continuum", "region", "vehicle", "have", "leader", "we", "must", "translate", "continuum", "quantity", "suitable", "position", "velocity", "pair", "virtual", "lead", "vehicle", "we", "use", "vehicle", "instantiation", "procedure", "describe", "section", "4.2", "except", "now", "terminate", "after", "find", "just", "one", "vehicle", "vehicle?s", "velocity", "determine", "continuum", "datum", "its", "location", "continuum", "technique", "can", "efficiently", "handle", "both", "large", "dense", "area", "network", "expense", "be", "coarse-grained", "precisely", "capture", "individual", "vehicle", "behavior", "whereas", "agentbased", "simulator", "flexible", "generally", "more", "computationally", "costly", "than", "continuum", "technique", "numerous", "criterion", "consider", "when", "choose", "which", "portion", "network", "should", "simulated", "continuum", "agentbased", "technique", "visual", "spatial", "real-time", "visualization", "we", "consider", "what", "area", "network", "visible", "-lrb-", "via", "view-frustum", "test", "more", "conservative", "bind", "-rrb-", "ensure", "only", "agent-based", "simulation", "perform", "except", "-lsb-", "Sewall", "et", "al.", "2010", "-rsb-", "continuum", "technique", "do", "admit", "ready", "visual", "representation", "Performance", "base", "performance", "need", "simulation", "region", "particularly", "expensive", "compute", "one", "regime", "can", "convert", "other", "where", "region", "region?s", "length", "number", "vehicle", "region", "weight", "associate", "computational", "regime", "-lcb-", "continuum", "agent-based", "-rcb-", "because", "continuum", "regime", "aggregate", "vehicle", "be", "specific", "vehicle", "absorb", "continuum", "regime", "either", "through", "region", "conversion", "process", "describe", "section", "4.1", "transfer", "process", "describe", "section", "4.3.2", "specific", "information", "associate", "vehicle", "would", "lose", "additionally", "time", "when", "we", "wish", "satisfy", "certain", "numerical", "condition", "govern", "nature", "simulation", "itself", "precisely", "Knudsen", "number", "give", "rigorous", "investigation", "applicability", "Knudsen", "number", "continuum", "traffic", "simulation", "have", "be", "perform", "should", "user", "wish", "ensure", "above", "scheme", "satisfied", "straightforward", "compute", "Knudsen", "number", "each", "lane", "force", "those", "have", "too", "large", "Knudsen", "number", "use", "agent-based", "regime", "we", "have", "implement", "we", "hybrid", "technique", "interactive", "visual", "simulation", "large-scale", "traffic", "demonstrate", "follow", "scenario", "virtual", "downtown", "metropolitan", "area", "we", "have", "recreate", "virtual", "downtown", "base", "Grid", "sequence", "Godfrey", "Reggio?s", "film", "koyaanisqatsus", "-lsb-", "Reggio", "1982", "-rsb-", "particular", "shot", "film", "show", "traffic", "move", "along", "busy", "city", "street", "play", "back", "greatly", "increase", "speed", "motion", "vehicle", "punctuate", "rhythmic", "cycling", "traffic", "signal", "cross-traffic", "emerge", "from", "behind", "skyscraper", "evenly", "space", "each", "block", "particular", "shot", "located", "52", "minute", "seconds", "theatrical", "release", "film", "supplemental", "video", "accompany", "paper", "have", "video", "similar", "traffic", "generate", "we", "technique", "still", "can", "see", "Figure", "reader", "most", "region", "can", "view", "YouTube", "http", "www.youtube.com/watch", "sps6c9u7ras", "#t", "0h52m03", "model", "illustrate", "here", "be", "create", "use", "GIS", "datum", "from", "Open", "Street", "Maps", "project", "use", "technique", "describe", "-lsb-", "Wilkie", "et", "al.", "2011", "-rsb-", "we", "hybrid", "technique", "able", "recreate", "real-time", "traffic", "flow", "individual", "vehicle", "motion", "complex", "metropolitan-scale", "road", "network", "which", "can", "visualize", "atop", "aerial", "imagery", "typically", "region", "interest", "would", "visible", "portion", "scene", "allow", "we", "technique", "perform", "simulation", "off-camera", "area", "without", "incur", "expense", "agent-based", "simulation", "everywhere", "we", "approach", "commonly", "available", "live", "traffic", "datum", "from", "sparsely", "located", "camera", "merely", "inexpensive", "in-road", "sensor", "-lrb-", "e.g.", "inductive", "loop", "-rrb-", "would", "sufficient", "initialize", "we", "simulation", "method", "real-time", "traffic", "visualization", "two", "approach", "however", "complimentary", "we", "work", "could", "easily", "integrate", "overall", "augmented", "reality", "framework", "one", "key", "objective", "work", "facilitate", "cooperative", "use", "disparate", "simulation", "strategy", "agent-based", "continuum", "traffic", "simulation", "traffic", "network", "extensive", "metropolitan", "area", "numerous", "reason", "desirable", "continuum", "technique", "have", "performance", "advantage", "over", "agentbased", "simulation", "many", "situation", "computational", "cost", "proportional", "size", "network", "traffic", "therein", "furthermore", "limited", "regular", "memory", "access", "pattern", "continuum", "algorithm", "much", "more", "amenable", "scalable", "parallelism", "than", "those", "find", "agent-based", "algorithm", "figure", "show", "performance", "-lrb-", "single-thread", "-rrb-", "agent-based", "continuum", "hybrid", "simulation", "city", "road", "network", "variety", "vehicle", "density", "pure", "continuum", "simulation", "outperform", "pure", "agent-based", "10", "20x", "we", "hybrid", "scheme", "which", "constant", "portion", "road", "network", "use", "agent-based", "simulation", "rest", "use", "continuum-based", "17x", "faster", "than", "pure", "agent-based", "result", "be", "collect", "Intel", "core", "tm", "i7", "980x", "processor", "run", "3.33", "GHz", "useful", "understand", "how", "traffic", "motion", "produce", "method", "describe", "work", "compare", "motion", "real-world", "traffic", "however", "comparison", "must", "perform", "deliberation", "care", "numerous", "subtlety", "play", "more", "detail", "validation", "experiment", "datum", "format", "source", "issue", "involve", "methodology", "comparison", "strategy", "consider", "evaluation", "effectiveness", "we", "hybrid", "approach", "please", "refer", "Appendix", "B.", "Below", "we", "summarize", "result", "from", "we", "validation", "experiment", "use", "datum", "from", "Next-Generation", "Simulation", "-lrb-", "NGSIM", "-rrb-", "project", "Federal", "Highway", "Administration", "agent-based", "overall", "agent-based", "simulation", "match", "NGSIM", "datum", "quite", "well", "near", "simulation", "region", "we", "expect", "all", "quantity", "match", "because", "we", "close", "incoming", "boundary", "condition", "detector", "further", "down", "highway", "continue", "match", "vehicle", "count", "well", "evident", "agent-based", "simulation", "technique", "which", "we", "use", "aggressively", "adjust", "vehicle", "preferred", "velocity", "final", "detector", "-lrb-", "620", "Figure", "-rrb-", "match", "velocity", "well", "we", "approach", "boundary", "condition", "where", "outgoing", "velocity", "set", "base", "lead", "vehicle", "from", "NGSIM", "datum", "we", "see", "some", "time", "shift", "feature", "we", "identify", "from", "NGSIM", "datum", "which", "can", "attribute", "different", "precede", "velocity", "value", "continuum", "result", "continuum", "simulation", "flux", "agent-based", "we", "see", "good", "match", "initial", "detector", "drift", "accumulate", "further", "down", "highway", "however", "despite", "shift", "overall", "magnitude", "phase", "overall", "pattern", "remain", "show", "primary", "feature", "flow", "preserve", "particular", "trough", "flux", "occur", "around", "800", "preserve", "hybrid", "because", "final", "leg", "hybrid", "validation", "scheme", "agent-based", "we", "have", "datum", "number", "car", "velocity", "flux", "final", "detector", "-lrb-", "620", "Figure", "-rrb-", "velocity", "match", "quite", "well", "pure", "agent-based", "case", "due", "outgoing", "boundary", "condition", "vehicle", "count", "demonstrate", "same", "feature", "those", "find", "original", "NGSIM", "datum", "albeit", "slight", "variation", "magnitude", "sequence", "comparison", "Computing", "number", "vehicle", "average", "velocity", "real-world", "datum", "corresponding", "simulation", "result", "comparable", "time-series", "datum", "number", "car", "average", "velocity", "flux", "examine", "visually", "can", "illuminating", "quantitative", "comparison", "datum", "provide", "more", "rigorous", "measure", "standard", "infinity", "norm", "might", "seem", "obvious", "choice", "rather", "harshly", "penalize", "noisy", "time-shifted", "datum", "discuss", "-lsb-", "Chen", "et", "al.", "2005", "-rsb-", "-lsb-", "Morse", "Patel", "2007", "-rsb-", "suitably", "modify", "string-distance", "metric", "longest", "common", "subsequence", "edit", "distance", "very", "useful", "when", "compare", "time", "series", "normalize", "subsequence", "length", "length", "shorter", "we", "can", "assign", "score", "distance", "similarity", "two", "sequence", "numerous", "technique", "fit", "aegis", "edit", "distance", "common", "theme", "score", "similarity", "effort", "require", "transform", "one", "other", "algorithm", "typically", "operate", "sequence", "consist", "element", "from", "finite", "set", "example", "Latin", "character", "string", "when", "deal", "sequence", "real", "number", "-lrb-", "velocity", "flux", "case", "-rrb-", "-lsb-", "Morse", "Patel", "2007", "-rsb-", "suggest", "identify", "two", "real", "number", "equal", "when", "min", "where", "min", "lesser", "standard", "deviation", "we", "propose", "adopt", "modify", "string-distance", "metric", "lcss", "edr", "compare", "different", "simulation", "method", "validate", "simulation", "result", "each", "simulation", "type", "-lrb-", "agent-based", "continuum", "hybrid", "-rrb-", "we", "have", "compare", "result", "flux", "time", "series", "corresponding", "NGSIM", "datum", "see", "Table", "datum", "620", "row", "show", "we", "simulation", "technique", "only", "slightly", "decrease", "score", "agent-based", "simulation", "while", "maintain", "overall", "performance", "comparable", "continuum", "method", "we", "have", "present", "novel", "method", "dynamically", "couple", "continuum", "discrete", "method", "interactive", "simulation", "largescale", "vehicle", "traffic", "virtual", "world", "augment", "aerial", "map", "adopt", "two", "disparate", "technique", "simultaneously", "different", "region", "allow", "flexible", "simulation", "framework", "where", "user", "can", "easily", "automatically", "trade", "off", "quality", "efficiency", "runtime", "we", "have", "apply", "technique", "simulation", "large", "network", "car", "traffic", "base", "real-world", "datum", "well", "synthetic", "urban", "setting", "achieve", "greater-than", "real-time", "performance", "while", "we", "have", "only", "investigate", "how", "we", "coupling", "technique", "may", "apply", "two", "model", "simulate", "visualize", "traffic", "flow", "potential", "application", "other", "area", "simulation", "other", "variety", "multi-agent", "simulation", "particularly", "attractive", "candidate", "we", "hybrid", "technique", "hybrid", "crowd", "simulation", "several", "important", "component", "need", "develop", "first", "agent-free", "continuum", "simulation", "technique", "crowd", "need", "do", "yet", "exist", "work", "-lsb-", "Narain", "et", "al.", "2009", "-rsb-", "do", "solve", "velocity", "continuum", "fashion", "technique", "use", "discrete", "agent", "provide", "goal", "one", "issue", "require", "careful", "consideration", "stability", "transition", "while", "traffic", "road", "method", "always", "move", "single", "direction", "forward", "along", "road", "people", "crowd", "free", "move", "many", "direction", "which", "may", "include", "backtrack", "freedom", "locomotion", "present", "issue", "wherein", "agent", "can", "become", "jitter", "between", "continuum", "agent", "region", "force", "region", "overlap", "some", "amount", "only", "perform", "transition", "where", "overlap", "area", "meet", "single", "region", "may", "reasonable", "way", "handle", "situation", "while", "we", "have", "emphasize", "flexibility", "technique", "have", "some", "limitation", "particular", "because", "statistical", "nature", "instantiation", "technique", "quickly", "alternate", "simulation", "type", "area", "likely", "result", "incoherent", "vehicle", "quantity", "distribution", "relatively", "stable", "actual", "position", "furthermore", "same", "instantiation", "stochasticity", "can", "result", "irregular", "lead", "distance", "velocity", "when", "compute", "acceleration", "lead", "vehicle", "agent-based", "region", "flow", "continuum", "one", "agent-based", "model", "we", "have", "consider", "have", "be", "issue", "certain", "unstable", "acceleration", "computation", "could", "require", "some", "further", "work", "sort", "car-following", "model", "far", "most", "prevalent", "conceivable", "other", "type", "model", "desirable", "some", "modification", "scheme", "present", "here", "necessary", "accommodate", "they", "would", "interesting", "exploration", "use", "we", "technique", "real-time", "traffic", "prediction", "examine", "how", "behavior", "individual", "vehicle", "arterial", "street", "level", "affect", "overall", "traffic", "flow", "freeway", "furthermore", "preliminary", "result", "have", "show", "aspect", "hybrid", "technique", "highly", "parallel", "we", "hope", "develop", "we", "technique", "effectively", "utilize", "today?s", "many-core", "parallel", "architecture", "tomorrow?s", "nascent", "parallel", "hardware", "research", "support", "part", "Army", "Research", "Office", "Intel", "Corporation", "National", "Science", "Foundation", "Carolina", "Development", "Foundation" ],
  "content" : "We present a novel, real-time algorithm for modeling large-scale, realistic traffic using a hybrid model of both continuum and agentbased methods for traffic simulation. Our key contributions are efficient techniques for the dynamic coupling of discrete vehicle simulation with the aggregated behavior of continuum techniques for traffic simulation. These techniques demonstrate the applicability of hybrid techniques to the efficient simulation of large-scale flows with complex dynamics. Two classes of simulation techniques are most commonly used in modeling traffic flows. We present techniques based on averaging as well as the Poisson process for handling the transition of vehicle representations between continuum and discrete simulation areas and discuss how the constituent simulation components are adapted to handle this conversion. To demonstrate our method, we show a real-time visualization of metropolitan-scale traffic flows on a urban scene and an augmented aerial street map, such as those shown in Figure 1 . We also validate the simulation results using real-world traffic data with stringdistance metrics and analyze the performance of our technique on modern architectures. More recently, [Aw and Rascle 2000] and [Zhang 2002] each proposed 2-variable models of traffic flow with correct anisotropic behavior. [Lebacque et al. 2007] noted that these two models could be unified through a change of variables, and dubbed the system the ?Aw-Rascle-Zhang? (ARZ) system of equations. The forthcoming work of [Wilkie et al. 2011] describes techniques for synthesizing useful road networks from publicly-available GIS data. Low-cost accessibility of such further enhances the value of our work. In this section, we briefly discuss the data structures used in our simulation and present a description of our hybrid simulation technique for real-time traffic visualization. Because our method visualizes the behavior of vehicles in both urban and rural settings, in lane-changing scenarios and intersection crossings, we require detailed road network data as our domain. We use a lane-based representation that works well for both agentbased and continuum simulations. We use a representation based on polylines with fitted circular arcs that is simple, efficient, and allows for realistic, visually smooth vehicle motion. Our hybrid traffic simulation is both efficient and flexible, combining the strengths of continuum and agent-based techniques. At any given point in simulation, the road network consists of mutually exclusive regions of two types: one where we use a continuum technique to describe vehicle movement and another where we use a discrete, agent-based technique for simulation. The key component of our hybrid simulation technique is how the two different types of simulations are coupled together; continuum traffic expects a density-like quantity of cars per car length with a velocity component, while discrete simulation is carried out with  the explicit position and velocity of each vehicle in the network. This step is critical to ensure artifact-free, consistent transitions as vehicles cross boundaries between two simulation models. We then proceed by taking discrete time steps of varying length ?t, wherein the state of traffic is considered and integrated forward in time. At a high level, the steps of our algorithm are as follows: Step 1: Advance continuum regions: (a) Determine the dynamics of traffic flow, also known as flux, between each adjacent cell. (b) Compute ?t, the minimum stable timestep, using the maximum speed from each cell solution in Step 1a. Step 2: Update flux capacitors (see Section 4.3.1) and add discrete cars as needed. Step 3: Advance agent-based regions (using the same ?t computed in Step 1b). Step 4: Aggregate all discrete vehicles (Section 4.1) that flow into a continuum region. In other words, we separately advance the continuum and agentbased simulations and manage the transition of vehicles between the different simulation regimes. Below, we describe the basic simulation techniques used in Steps 1 and 3. Later, in Section 4, we present our main contributions ? techniques for converting between different types of simulation. In continuum models of traffic simulation, each lane is divided into discrete computational cells that represent the traffic. The continuum components of the network are advanced in Step 1 before the agent-based simulation components are handled. The continuum simulation component has more stringent stability requirements than the agent-based component; by performing the continuum update prior to the agent-based, we can use the ?t computed in Step 1b in the later agent-based update performed in Step 3. More detail on continuum simulation techniques for traffic simulation can be found in any of [Aw and Rascle 2000; Zhang 2002; Sewall et al. 2010]; the results presented in this paper use the ARZ model. The regions of our traffic network under the agent-based regime are handled by a discrete ?car-following? method. This acceleration is explicitly integrated into the vehicle?s velocity, which is then integrated into position. As we show below, we only require that each discrete vehicle have a position and (non-negative) velocity and that it determine its velocity by the state of the vehicle ahead of it. Our demonstrations in this paper use an extended version of the method of [Treiber et al. 2000], considered to be a representative, modern approach to agent-based traffic simulation ? our adaptation of their technique additionally supports lane-changing, inhomogeneous driver models, and vehicle response to traffic signals, intersections, and variable speed limits. Lane changes are handled by first applying a behavior model that determines if vehicles desire to change lanes, then determining if such lane changes are safe, and finally transitioning the vehicle between the lanes over a time interval. Driver behavioral models vary across techniques; we have chosen a variety of parameters that we modulate over different agents to effect a variety of drivers and make a more realistic simulation. To take advantage of agent-based and continuum simulations, we introduce a hybrid technique that allows a road network to be simulated with both simulation types; the network is partitioned into multiple disjoint (and not necessarily connected) regions that cover the domain. These regions in our simulation are dynamic; we can adaptively change the shape of and the simulation method in a region as needed to observe certain phenomena, meet performance requirements, or to respond to user input. Sections 4.1 and 4.2 establish the fundamentals of the conversion process and describe how whole regions are converted from one regime to the other. Later, in Section 4.3, we present how traffic flowing from one type of region into another is handled. Vehicle support functions It is straightforward to compute a continuum representation from a list of discrete vehicles; the q k = [? k , y k ] T stored for continuum simulation are averaged quantities for densities and relative flows of traffic. For each discrete vehicle C i with front-bumper position p i , length l i , and velocity v i , we define a boxcar-like support function as follows: The support of all n vehicles is then given by the sum: An exemplary plot of this function is depicted in Figure 2 . Assume, without loss of generality, that the continuum cells are uniformly spaced by ?x; then given n vehicles to discretize, the traffic density ? k for each cell of the continuum is A weighted combination of such ? k along with the vehicles? velocities can be used to similarly determine traffic velocity, u k and the derived ?relative velocity? y k . Averaging algorithm In practice, the q k can be computed in an efficient manner ? linear in the number of cars n ? by iterating over each vehicle C i , i ? Z[0, n). For each i, we compute the intersection of the nonzero portions of S i with the continuum grid and apply Equation (3) and its analogues for velocity. We propose a method inspired by the kinetic theory of gases and Poisson processes that delivers suitable results while remaining simple and efficient. The Poisson process is a well-known stochastic procedure used to model occurrences (?arrival times?) of independent events t 0 , t 1 , t 2 , and so on. We use a Poisson-like process to determine the location of discrete vehicles in a continuum region given the piecewiseconstant density cells ? k that comprise the unknowns in that region. Rather than determining how discrete events are distributed in time, we model where discrete vehicles are distributed in space ? specifically, how they are located along the 1-dimensional space of the lane. It can be shown [Devroye 1986] that the times between events t i , t i+1 in a homogeneous Poisson process with rate ? satisfy an exponential distribution with probability density function (PDF): More precisely, Equation (4) gives the probability, for each x ? R[0, ?), that x = t i+1 ? t i . We can efficiently generate exponential random variables through the inversion process; that is, we combine uniform random variables U with the inverted cumulative density function (CDF) of the exponential distribution; setting this equal to a uniform random variable U and solving for x, we get an exponentially-distributed random variable: To properly account for the continuum traffic density data ? k in the lane, we would like to model an inhomogeneous Poisson process ? that is, where the ? in Equation (4) is no longer constant. Indeed, we wish to have ? (x) = 1 l ? (x), where l reflects a representative car length; this scaling converts ? (x) from cars per car length to cars per meter (i.e., to the spatial units of x). To capture the variation in ? that generally occurs in a continuum lane, the distribution of the separation between successive events is no longer described by Equation (4), but by the following PDF reflecting the inhomogeneous case: Here ? is the time of the last event and ? (x) = 0 ?(t) dt. Cumulative density function To extend the technique presented in Equation (5) for generating events in a homogeneous Poisson processes to the inhomogeneous case, we compute the CDF to obtain the following: Here we have assumed that lim ?(x) = ?. x??\n            Inversion As with the homogeneous case, we invert the CDF to achieve the formula for generating exponentially-distributed random variables that match the given ? (x): Recall that the above equation gives the separation time between two events with the first occurring at ? ; in general, we will be more interested in the actual time of the new event rather than this differ- Observe that we can generate events in an inhomogeneous Poisson process with rate function ? (x) if we can compute ? (x) and ? ?1 (?). Because our rate function ? (x) = 1 l ? (x) is actually given by discrete cells? traffic densities ? k , our rate function is piecewiseconstant ? its integral ? (x) and integral inverse ? ?1 (?) are simple to compute. In Section 4.2.4, we give an efficient algorithm  for computing the positions of discrete vehicles given a continuum region with a piecewise-constant density function ? (x) = ? k ; however, we first establish details of the integral and integral inverse of a piecewise-constant function. We have a continuum region with n discrete cells [? k , y k ] T , k ? Z[0, n). Each cell is ?x in length; then We restrict to generate events that correspond to the density ? in a continuum region, so we must invert ? from Equation (10). Asymptotic behavior Let us consider this ? (x); in Equation (7), we assumed that lim ?(x) = ?. This is important bex?? cause the argument to ? ?1 in Equation (9) takes its value in the our range ? (x) (0, ?), in Equation so the domain (10), x?? lim of ? ?(x) ?1 (?) = must 1 l ?x match. Monotonicity Finally, while the ? (x) in Equation (10) is monotone (because 1 l ? k ? 0 ?k), it is not strictly increasing and ? ?1 (?) 1 The quantity ? (? ) ? ln U is strictly increasing, and 1 l ?x P n?1 k=0 ? k is finite, so this must eventually occur for some ?\n            is not well defined in the traditional sense. However, given our application, we may easily deal with this issue. < n) Whenever where ? i X = = 0;  ? conceptually, ? ?1 (?)  ? for no any vehicles ? has cardinality |X| > 1, we define x = sup X = ?x (i + m + 1). The process for generating discrete cars given n cells of density ? k , k ? Z[0, n) with spacing ?x is based on Equations (9) and (10); given a previous vehicle position p i?1 and a uniformly distributed random variable U , we add ? ln U to the integrated rate ? (p i?1 ) and look up the x value of this sum in ? ?1 ; this gives us p i . When we generate a value that has no value in the inverse integral ? ?1 , we have exceeded the length of the region and we are finished. Our algorithm for this process is given in Algorithm 1; it is based\n            Algorithm 1 I NSTANTIATE -V EHICLES I NSTANTIATE -V EHICLES (?[n], ?x) / / ?[n] ? an array of n density values, / / ?x ? the length of each grid cell 1 p = [] 2 ? last , i, ? = 0 3 while true 4 U = U NIFORM -R ANDOM -N UMBER ((0, 1]) 5 ? cand = ? last ? ln U 6 ? cand = ? 8 7 while ? cand i < = n ? and cand ? + cand 1 l ?[i]?x + 1 l ?[i]?x < ? cand 9 i = i +1 10 p cand = (? cand 1 l ?? ?[i] cand ) + i?x 11 if p cand > n?x 12 return p 13 if p cand + l > p[?1] 14 ? last = ? cand 15 ? = ? cand 16 p = p + [p cand ] An algorithm for vehicle instantiation from continuum data\n            on several observations on the nature of Equations (9) and (10). First, ? ?1 from we note the that previous the ? event in ? (? ? ) ? in ` Equation ? ?1 (? (? (9) i?1 is ) the ? ln argument U i?1 )  ? = to ? (? i?1 ) ? ln U i?1 . Therefore, we never need to explicitly compute ? (? ); it was computed in the previous iteration. To prevent this, we use rejection sampling (see lines 13?16). Furthermore, we know that the instantiated vehicles have strictly increasing x values. This simplifies the computation of each ? ?1 ; we know that each ? last will take its value as i?x < ? ?1 (? last ), where i is the index of the grid cell the last instantiation occurred in. Figure 4 shows the result of running I NSTANTIATE -V EHICLES on a continuum lane. Analysis The performance of I NSTANTIATE -V EHICLES is O(n + k), where n is the number of grid cells in the continuum region and k is the number of instantiated vehicles. The outer while loop spanning lines 3?16 in Algorithm 1 is executed k times, and the inner loop spanning lines 7?9 will iterate no more than n times in the course of the entire execution of I NSTANTIATE -V EHICLES . It remains to bound the value of k for a call of I NSTANTIATE -V EHICLES ; this is a randomized algorithm and k may theoretically be arbitrarily large (although subject to some upper bound based on floating-point arithmetic). We can give a conservative estimate as follows: consider the case where ?[n] is such that ?[i] = 1 ?i ? Z[0, n) ? clearly an upper bound on any real continuum region. Then ? (? ) = 1 l , and since the expected value for a homogeneous exponential distribution with rate parameter ? is ? 1 , we average an instantiated vehicle every l meters ? bumper-to-bumper traffic that precisely matches saturation of density. Given that the estimate for k we have just developed is an upper bound, the expected runtime of I NSTANTIATE -V EHICLES is O(n). We introduce ?flux capacitors? to convert continuum flow to discrete agents in Section 4.3.1, and we describe how we adapt the car averaging procedure from Section 4.1 to handle discrete vehicles that flow into continuum regions in Section 4.3.2. Given two adjacent cells in a continuum lane, we use methods described in [Aw and Rascle 2000; Zhang 2002; Sewall et al. 2010] to solve for the flow at the interface between two cells; when we do so, we have computed the flux between the cells. When a continuum lane flows into a discrete one, we first create a ?virtual? continuum cell at the start of the agent-based lane using averaging (see Section 4.1). Then we are able to use the standard flux computation process on the last continuum cell and this virtual one; this flux can now be used to convert density flowing out of the continuum region into discrete vehicles entering the agent-based lane and simultaneously provide the proper dynamics for the incoming continuum lane. To instantiate vehicles due to this flux, we accumulate density until a sufficient quantity has been retained that we may emit a vehicle ? we call this a flux capacitor. Formally, the accumulated density\n            ? cap at a flux capacitor increases by ?? cap during the time step from t i?1 to t i as per the following: where ? 0 (t)u 0 (t) is the ?-component of the flux of the intermediate state at time t, as computed by the solution of a continuum lane, and l is vehicle length; this term is necessary to scale the integrand from cars per car length (?) times meters per second (u) to cars per second, or rate of traffic flow. Because we consider the intermediate state q 0 (t) = ? 0 (t)u 0 (t) to be constant during a timestep, this integral is trivial to evaluate. The above discussion on ?flux capacitors? describes how to translate flow from a continuum region into discrete vehicles, and how to account for the downstream (agent-based) region?s effect on the upstream continuum region. Here we consider the converse: how vehicles in discrete regions that flow into continuum regions may be converted into the appropriate continuum quantities, and how the state of this continuum region can be accounted for in the upstream (agent-based) region. Transfer of discrete vehicles into continuum regions When agent-based regions flow into continuum regions, one must convert discrete vehicles into continuum data as they pass into the new regime. We achieve this in a manner similar to our method for accounting for discrete downstream vehicles? effect on the outflow of continuum regions (see Section 4.3.1). A single ?virtual? grid cell at the end of the agent-based region is filled according to the averaging procedure in Sec 4.1; this is then used as the upstream boundary condition for the downstream lane?s (continuum) flux computation. When the motion of a vehicle carries it from a discrete region to a continuum one, its discrete representation simply vanishes; the vehicle is immediately accounted for in the continuum representation and flux computation just described. When entering a downstream continuum region, a vehicle will have no such leader; we must translate the continuum quantities into a suitable position and velocity pair ? a ?virtual? leading vehicle. We use the vehicle instantiation procedure described in Section 4.2, except that it now terminates after finding just one vehicle; this vehicle?s velocity is determined by the continuum data at its location. Continuum techniques can efficiently handle both large and dense areas of networks at the expense of being coarse-grained and not precisely capturing individual vehicle behaviors, whereas agentbased simulators are flexible and generally more computationally costly than continuum techniques. There are numerous criteria to consider when choosing which portions of the network should be simulated with continuum or agentbased techniques: Visual and spatial For real-time visualization, we consider what areas of the network are visible (via a view-frustum test or a more conservative bound) and ensure that only agent-based simulation is performed there ? except for [Sewall et al. 2010], continuum techniques do not admit a ready visual representation. Performance Based on the performance needs of the simulation, regions that are particularly expensive to compute in one regime can be converted to the other. where r is a region, |r| the region?s length, and C r the number of vehicles in that region. ? T and ? T are weights associated with the computational regimes T = {continuum, agent-based}. Because the continuum regime aggregates vehicles, were a specific vehicle to be absorbed into the continuum regime, either through the region conversion process described in Section 4.1 or the transfer process described in Section 4.3.2, the specific information associated with that vehicle would be lost. Additionally, there are times when we wish to satisfy certain numerical conditions governing the nature of the simulation itself. Precisely, the Knudsen number is given by A rigorous investigation of the applicability of the Knudsen number to continuum traffic simulation has not been performed, but should the user wish to ensure that the above scheme is satisfied, it is straightforward to compute the Knudsen number for each lane and force those that have too large a Knudsen number to use the agent-based regime. We have implemented our hybrid technique for interactive visual simulation of large-scale traffic and demonstrate the following scenarios:  Virtual downtown of a metropolitan area We have recreated a ?virtual downtown? based on the ?The Grid? sequence in Godfrey Reggio?s film Koyaanisqatsi [Reggio 1982]; a particular shot in this film shows traffic moving along a busy city street, played back at a greatly increased speed. The motion of the vehicles is punctuated by the rhythmic cycling of traffic signals and cross-traffic emerging from behind the skyscrapers evenly spaced at each block. This particular shot is located 52 minutes, 3 seconds into the theatrical release of the film 2 . The supplemental video accompanying this paper has video of similar traffic generated by our technique; a still can be seen in Figure 1 . 2 For readers in most regions, this can be viewed on YouTube: http: //www.youtube.com/watch? v=Sps6C9u7ras#t=0h52m03s The models illustrated here were created using GIS data from the Open Street Maps project using the technique described in [Wilkie et al. 2011]. Our hybrid technique is able to recreate real-time traffic flows and individual vehicle motion on complex, metropolitan-scale road networks, which can then be visualized atop aerial imagery. Typically, this region of interest would be the visible portion of the scene, allowing our technique to perform simulation in the off-camera areas without incurring the expense of agent-based simulation everywhere. With our approach, commonly available live traffic data from sparsely located cameras or merely inexpensive in-road sensors (e.g. inductive loops) would be sufficient to initialize our simulation method for real-time traffic visualization. The two approaches are, however, complimentary; our work could be easily integrated into their overall Augmented Reality framework. One of key objectives for this work is to facilitate the cooperative use of disparate simulation strategies ? agent-based and continuum traffic simulation ? in a traffic network for extensive metropolitan areas. There are numerous reasons this is desirable: continuum techniques have performance advantages over agentbased simulations in many situations; their computational cost is proportional to size of the network, not to the traffic therein. Furthermore, the limited and regular memory access patterns of continuum algorithms are much more amenable to scalable parallelism than those found in agent-based algorithms. Figure 7 shows the performance of (single-thread) agent-based, continuum, and hybrid simulations on a city road network for a variety of vehicle densities. Pure continuum simulation outperforms pure agent-based by 10?20x. Our hybrid scheme, in which a constant portion the road network uses agent-based simulation and the rest uses continuum-based, is 9?17x faster than pure agent-based. These results were collected on an Intel R Core TM i7 980X processor running at 3.33GHz. It is useful to understand how the traffic motion produced by the method described in this work compares to the motion of real-world traffic. However, this comparison must be performed with deliberation and care, as there are numerous subtleties at play. For more detail on the validation experiments, data formats and sources, issues involved, methodology, comparison strategies considered, and evaluation on the effectiveness of our hybrid approach, please refer to Appendix B. Below we summarize the results from our validation experiments using the data from the Next-Generation Simulation (NGSIM) project by the Federal Highway Administration. Agent-Based Overall, the agent-based simulation matches the NGSIM data quite well; near the start of the simulation region, we expect all quantities to match because we are close to the incoming boundary condition. ?Detectors? further down the highway continue to match the vehicle count well, but it is evident that the agent-based simulation technique which we are using aggressively adjusts vehicles to their preferred velocity. The final detector (x = 620; Figure 8 ) matches velocity well as we approach the boundary condition, where the outgoing velocity is set based on the leading vehicle from the NGSIM data. We see some time shifts in features we identify from the NGSIM data which can be attributed to the different preceding velocity values. Continuum The results of the continuum simulation are fluxes. As with agent-based, we see good matches for the initial detectors and drift accumulating further down the highway. However, despite shifts in overall magnitude and phase, the overall patterns remain, showing that the primary features of the flow are preserved ? in particular, the trough in flux that occurs around t = 800 is preserved. Hybrid Because the final leg of the hybrid validation scheme is agent-based, we have data for the number of cars, velocity, and flux for the final detector (x = 620, Figure 8 ). Velocity matches quite well as with the pure agent-based case due to the outgoing boundary condition. The vehicle counts demonstrate the same features as those found in the original NGSIM data, albeit with slight variations in magnitude. Sequence comparison Computing the number of vehicles and average velocities for the real-world data and corresponding simulation results in comparable time-series data ? numbers of cars, average velocity, and flux. Examining these visually can be illuminating, but a quantitative comparison of these data provides a more rigorous measure. A standard infinity? or 2? norm might seem an obvious choice, but these will rather harshly penalize noisy and time-shifted data. As discussed in [Chen et al. 2005] and [Morse and Patel 2007], suitably modified string-distance metrics, such as longest common subsequence and edit distance, are very useful when comparing time series. By normalizing this subsequence length by the length of the shorter of R and S, we can assign a ?score?, or distance, to the similarity of the two sequences. Numerous techniques fit into the aegis of edit distance; the common theme is scoring the similarity of R and S by the ?effort? required to transform one to the other. These algorithms typically operate on sequences consisting of elements from a finite set ? for example, Latin characters in a string. When dealing with sequences of real numbers (velocity and flux in this case), [Morse and Patel 2007] suggest identifying two real numbers x ? R and y ? S as ?equal? when |x ? y| < = ? min /2, where ? min is the lesser of the standard deviations of R and S. We propose to adopt and modify string-distance metrics, such as LCSS and EDR, for comparing different simulation methods and validating simulation results. For each of the simulation types (agent-based, continuum, hybrid), we have compared the resulting flux time series with the corresponding NGSIM data ? see Table 1 . As the data in the x = 620 row shows, our simulation technique only slightly decreases the score for agent-based simulation while maintaining overall performance comparable to that of the continuum methods. We have presented a novel method to dynamically couple continuum and discrete methods for interactive simulation of largescale vehicle traffic for virtual worlds and augmented aerial maps. Adopting these two disparate techniques simultaneously in different regions allows for a flexible simulation framework where the user can easily and automatically trade off quality and efficiency at runtime. We have applied this technique to the simulation of large networks of car traffic based on real-world data, as well as synthetic urban settings, and achieved greater-than real-time performance. While we have only investigated how our coupling technique may be applied to two models for simulating and visualizing traffic flows, there are potential applications to other areas of simulation. Other varieties of multi-agent simulation are particularly attractive candidates for our hybrid technique. For hybrid crowd simulation, there several important components that need to be developed ? first, an agent-free continuum simulation technique for crowds is needed. This does not yet exist ? the work of [Narain et al. 2009] does solve for velocity in a continuum fashion, but their technique uses discrete agents to provide goals. One issue that will require careful consideration is the stability of transitions; while the traffic in a road in this method always moves in a single direction ? forward along the road ? people in crowds are free to move in many directions, which may include backtracking. This freedom in locomotion presents an issue wherein agents can become ?jittered? between continuum and agent regions; forcing regions to overlap by some amount and only performing transitions where the overlap area meets a single region may be a reasonable way to handle this situation. While we have emphasized the flexibility of this technique, it has some limitations. In particular, because of the statistical nature of the instantiation technique, quickly alternating the simulation type of an area will likely result in incoherent vehicles ? quantities and distributions will be relatively stable, but actual positions will not. Furthermore, this same instantiation stochasticity can result in irregular leading distances and velocities when computing accelerations for the leading vehicle for agent-based regions flowing into continuum ones. For the agent-based models we have considered, this has not been an issue, but for certain unstable acceleration computations, it could require some further work. This sort of ?car-following? model is by far the most prevalent, but it is conceivable that other types of models are desirable; some modifications to the scheme presented here will be necessary to accommodate them. It would be an interesting exploration to use our technique for real-time traffic prediction to examine how the behaviors of individual vehicles at the arterial street level affect overall traffic flow on freeways. Furthermore, preliminary results have shown that aspects of the hybrid technique are highly parallel; we hope to develop our technique to effectively utilize today?s many-core parallel architectures and tomorrow?s nascent parallel hardware. This research is supported in part by Army Research Office, Intel Corporation, National Science Foundation, and Carolina Development Foundation.",
  "resources" : [ ]
}