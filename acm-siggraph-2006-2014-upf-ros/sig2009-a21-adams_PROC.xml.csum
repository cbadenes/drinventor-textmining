{
  "uri" : "sig2009-a21-adams_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2009/a21-adams_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Gaussian KD-Trees for Fast High-Dimensional Filtering",
    "published" : null,
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ ]
  },
  "bagOfWords" : [ "thanks", "also", "Justin", "Talbot", "Leonidas", "Guibas", "Jeremy", "Sugerman", "fruitful", "discussion", "advice", "Hao", "Li", "provide", "we", "mesh", "datum", "also", "we", "human", "canine", "figure", "subject", "work", "support", "Reed-Hodgson", "Stanford", "Graduate", "Fellowship", "NDSEG", "Graduate", "Fellowship", "from", "United", "States", "Department", "Defense", "NSF", "Graduate", "Fellowship", "from", "National", "Science", "Foundation", "more", "intelligent", "software", "caching", "portion", "tree", "other", "datum", "structure", "may", "speed", "up", "further", "finally", "tree", "traversal", "extremely", "irregular", "algorithm", "speedup", "we", "observe", "from", "we", "GPU", "implementation", "significantly", "less", "than", "theoretically", "possible", "would", "improve", "complexity", "algorithm", "remove", "distance", "evaluation", "currently", "require", "compute", "correct", "probability", "leaf", "node", "make", "importance", "sampling", "exact", "rather", "than", "weighted", "would", "compute", "different", "function", "value", "one", "far", "more", "dependent", "specific", "way", "which", "tree", "build", "may", "also", "beneficial", "store", "value", "leaf", "cell", "rather", "than", "point", "somewhere", "within", "they", "work", "we", "solve", "throw", "away", "least", "important", "dimension", "pca", "may", "other", "tree", "structure", "still", "amenable", "weighted", "importance", "sampling", "while", "more", "strongly", "constrain", "sample", "location", "secondly", "case", "value", "many", "more", "than", "log", "-lrb-", "-rrb-", "dimension", "splitting", "take", "place", "we", "tree", "do", "adequately", "constrain", "sample?s", "location", "before", "reach", "leaf", "many", "sample", "return", "very", "small", "weight", "attach", "possible", "more", "sophisticated", "building", "algorithm", "could", "improve", "runtime", "later", "stage", "enough", "justify", "its", "cost", "firstly", "we", "tree", "building", "take", "significant", "fraction", "we", "total", "runtime", "so", "we", "use", "very", "simple", "splitting", "scheme" ],
  "content" : "Thanks also to Justin Talbot, Leonidas Guibas, and Jeremy Sugerman for fruitful discussion and advice, to Hao Li for providing us with mesh data, and also to our human and canine figure subjects. This work was supported by a Reed-Hodgson Stanford Graduate Fellowship, an NDSEG Graduate Fellowship from the United States Department of Defense, and an NSF Graduate Fellowship from the National Science Foundation. More intelligent software caching of portions of the tree and other data structures may speed this up further. Finally, tree traversal is an extremely irregular algorithm, and the speedup we observed from our GPU implementation is significantly less than theoretically possible. This would improve the complexity of the algorithm by removing the distance evaluation currently required to compute the correct probabilities at the leaf nodes, and making the importance sampling exact rather than weighted, but it would compute a different function of the values one far more dependent on the specific way in which the tree was built. It may also be beneficial to store values at leaf cells, rather than at a point somewhere within them. In this work, we solved this by throwing away the least important dimensions with PCA, but it may be that other tree structures are still amenable to weighted importance sampling while more strongly constraining sample locations. Secondly, in cases with n values and many more than log(n) dimensions, the splitting that takes place in our tree does not adequately constrain a sample?s location before it reaches a leaf, and many samples are returned with very small weights attached. It is possible that a more sophisticated building algorithm could improve the runtime of later stages enough to justify its cost. Firstly, our tree building takes a significant fraction of our total runtime, and so we use a very simple splitting scheme.",
  "resources" : [ ]
}