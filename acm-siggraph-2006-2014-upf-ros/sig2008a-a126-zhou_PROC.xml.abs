{
  "uri" : "sig2008a-a126-zhou_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2008a/a126-zhou_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Real-Time KD-Tree Construction on Graphics Hardware",
    "published" : "2008",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Kun-Zhou",
      "name" : "Kun",
      "surname" : "Zhou"
    }, {
      "uri" : "http://drinventor/Qiming-Hou",
      "name" : "Qiming",
      "surname" : "Hou"
    }, {
      "uri" : "http://drinventor/Rui Wang-null",
      "name" : "Rui Wang",
      "surname" : null
    }, {
      "uri" : "http://drinventor/Baining-Guo",
      "name" : "Baining",
      "surname" : "Guo"
    } ]
  },
  "bagOfWords" : [ "we", "present", "algorithm", "construct", "kd-tree", "gpus", "algorithm", "achieve", "real-time", "performance", "exploit", "gpu?s", "streaming", "architecture", "all", "stage", "kd-tree", "construction", "unlike", "previous", "parallel", "kd-tree", "algorithm", "we", "method", "build", "tree", "node", "completely", "BFS", "-lrb-", "breadth-first", "search", "-rrb-", "order", "we", "also", "develop", "special", "strategy", "large", "node", "upper", "tree", "level", "so", "further", "exploit", "fine-grained", "parallelism", "gpus", "node", "we", "parallelize", "computation", "over", "all", "geometric", "primitive", "instead", "node", "each", "level", "finally", "order", "maintain", "kd-tree", "quality", "we", "introduce", "novel", "scheme", "fast", "evaluation", "node", "split", "cost", "far", "we", "know", "ours", "first", "real-time", "kd-tree", "algorithm", "GPU", "kd-tree", "build", "we", "algorithm", "comparable", "quality", "those", "construct", "off-line", "CPU", "algorithm", "term", "speed", "we", "algorithm", "significantly", "faster", "than", "well-optimized", "single-core", "CPU", "algorithm", "competitive", "multi-core", "CPU", "algorithm", "we", "algorithm", "provide", "general", "way", "handle", "dynamic", "scene", "GPU", "we", "demonstrate", "potential", "we", "algorithm", "application", "involve", "dynamic", "scene", "include", "GPU", "ray", "trace", "interactive", "photon", "mapping", "point", "cloud", "modeling", "keyword", "kd-tree", "programable", "graphic", "hardware", "ray", "trace", "photon", "mapping", "point", "cloud", "modeling" ],
  "content" : "We present an algorithm for constructing kd-trees on GPUs. This algorithm achieves real-time performance by exploiting the GPU?s streaming architecture at all stages of kd-tree construction. Unlike previous parallel kd-tree algorithms, our method builds tree nodes completely in BFS (breadth-first search) order. We also develop a special strategy for large nodes at upper tree levels so as to further exploit the fine-grained parallelism of GPUs. For these nodes, we parallelize the computation over all geometric primitives instead of nodes at each level. Finally, in order to maintain kd-tree quality, we introduce novel schemes for fast evaluation of node split costs. As far as we know, ours is the first real-time kd-tree algorithm on the GPU. The kd-trees built by our algorithm are of comparable quality as those constructed by off-line CPU algorithms. In terms of speed, our algorithm is significantly faster than well-optimized single-core CPU algorithms and competitive with multi-core CPU algorithms. Our algorithm provides a general way for handling dynamic scenes on the GPU. We demonstrate the potential of our algorithm in applications involving dynamic scenes, including GPU ray tracing, interactive photon mapping, and point cloud modeling. Keywords: kd-tree, programable graphics hardware, ray tracing, photon mapping, point cloud modeling",
  "resources" : [ ]
}