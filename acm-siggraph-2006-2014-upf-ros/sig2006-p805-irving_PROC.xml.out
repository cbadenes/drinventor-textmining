{
  "uri" : "sig2006-p805-irving_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2006/p805-irving_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Efficient Simulation of Large Bodies of Water by Coupling Two and Three Dimensional Techniques",
    "published" : "2006",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Geoffrey-Irving",
      "name" : "Geoffrey",
      "surname" : "Irving"
    }, {
      "uri" : "http://drinventor/Eran-Guendelman",
      "name" : "Eran",
      "surname" : "Guendelman"
    }, {
      "uri" : "http://drinventor/Frank-Losasso",
      "name" : "Frank",
      "surname" : "Losasso"
    }, {
      "uri" : "http://drinventor/Ronald-Fedkiw",
      "name" : "Ronald",
      "surname" : "Fedkiw"
    } ]
  },
  "bagOfWords" : [ "we", "present", "new", "method", "efficient", "simulation", "large", "body", "water", "especially", "effective", "when", "three-dimensional", "surface", "effect", "important", "fully", "three-dimensional", "navier-stoke", "solver", "produce", "stunning", "result", "do", "scale", "well", "large", "body", "water", "when", "simulation", "carry", "out", "uniform", "cartesian", "grid", "first", "current", "octree", "approach", "do", "make", "full", "use", "highly", "accurate", "MAC", "grid", "method", "-lsb-", "Enright", "et", "al.", "2002", "-rsb-", "instead", "rely", "too", "much", "nodal", "value", "interpolation", "result", "increase", "numerical", "dissipation", "also", "allow", "addition", "any", "other", "technique", "work", "uniform", "grid", "vortex", "particle", "-lsb-", "Selle", "et", "al.", "2005", "-rsb-", "since", "effect", "bottom", "topography", "diminish", "increase", "depth", "method", "most", "useful", "shallow", "water", "regime", "contrast", "octree", "method", "-lsb-", "Losasso", "et", "al.", "2004", "-rsb-", "suffer", "from", "increase", "dissipation", "due", "repeat", "back", "forth", "average", "even", "when", "fully", "refine", "while", "dissipation", "partially", "reduce", "-lsb-", "Guendelman", "et", "al.", "2005", "-rsb-", "use", "flip", "rather", "than", "PIC", "averaging", "-lrb-", "see", "also", "-lsb-", "Zhu", "Bridson", "2005", "-rsb-", "-rrb-", "we", "experience", "uniform", "grid", "indicate", "full", "MAC", "method", "still", "produce", "higher", "quality", "result", "although", "grid", "type", "could", "represent", "pointer", "structure", "-lrb-", "-lsb-", "Whitaker", "1998", "-rsb-", "-rrb-", "connect", "all", "tall", "short", "cell", "together", "require", "fashion", "could", "prove", "rather", "inefficient", "we", "tall", "cell", "only", "occur", "far", "from", "interface", "thus", "do", "participate", "particle", "level", "set", "method", "note", "all", "we", "tall", "cell", "vertical", "typical", "shallow", "water", "method", "because", "reasonable", "assume", "linear", "pressure", "variation", "vertical", "direction", "horizontal", "direction", "equation", "be", "combine", "method", "simulate", "water", "surface", "-lsb-", "Foster", "Metaxas", "1996", "Foster", "Metaxas", "1997a", "Foster", "Fedkiw", "2001", "-rsb-", "we", "use", "particle", "level", "set", "approach", "-lsb-", "Enright", "et", "al.", "2002", "-rsb-", "method", "choice", "three-dimensional", "surface", "layer", "water", "other", "work", "water", "liquid", "include", "viscoelastic", "fluid", "-lsb-", "Goktekin", "et", "al.", "2004", "-rsb-", "solid", "fluid", "coupling", "-lsb-", "Carlson", "et", "al.", "2004", "Guendelman", "et", "al.", "2005", "-rsb-", "control", "-lsb-", "McNamara", "et", "al.", "2004", "Shi", "Yu", "2005", "-rsb-", "contact", "angle", "-lsb-", "Wang", "et", "al.", "2005", "-rsb-", "sand", "-lsb-", "Zhu", "Bridson", "2005", "-rsb-", "two", "phase", "flow", "-lsb-", "Hong", "Kim", "2005", "-rsb-", "course", "deep", "water", "equation", "ignore", "bottom", "topography", "do", "resolve", "fully", "three-dimensional", "phenomenon", "surface", "-lsb-", "Thon", "Ghazanfarpour", "2001", "-rsb-", "also", "solve", "two-dimensional", "navierstoke", "equation", "horizontal", "velocity", "stream", "use", "noise", "function", "vertical", "velocity", "-lsb-", "Neyret", "Praizelin", "2001", "-rsb-", "propose", "simpler", "stream", "model", "use", "two-dimensional", "Laplace", "equation", "bulk", "flow", "we", "simulate", "uniform", "two-dimensional", "horizontal", "grid", "vertical", "column", "contain", "both", "uniform", "cell", "tall", "cell", "replace", "collection", "uniform", "cell", "e.g.", "see", "figure", "tall", "uniform", "cell", "can", "arbitrary", "each", "column", "particular", "we", "split", "tall", "cell", "ground", "match", "bottom", "topography", "-lrb-", "figure", "-rrb-", "uniform", "MAC", "grid", "scalar", "store", "cell", "center", "while", "velocity", "component", "store", "respective", "face", "-lrb-", "figure", "3a", "-rrb-", "tall", "cell", "contain", "two", "pressure", "value", "correspond", "cell", "center", "uppermost", "bottommost", "uniform", "cell", "tall", "cell", "replace", "-lrb-", "figure", "3b", "-rrb-", "Figure", "3e", "outline", "control", "volume", "around", "each", "minimal", "face", "note", "minimal", "face", "between", "tall", "cell", "may", "contain", "two", "horizontal", "velocity", "-lrb-", "show", "figure", "-rrb-", "between", "two", "velocity", "we", "interpolate", "horizontal", "velocity", "uniform", "face", "replace", "minimal", "face", "use", "linear", "interpolation", "consistent", "pressure", "its", "derivative", "vertical", "pressure", "derivative", "vertical", "velocity", "show", "Figure", "3d", "3f", "-lrb-", "also", "co-locate", "-rrb-", "along", "outline", "control", "volume", "vertical", "velocity", "center", "new", "tall", "cell", "set", "average", "value", "all", "vertical", "face", "replace", "whereas", "those", "uniform", "cell", "define", "interpolated", "value", "conserve", "vertical", "momentum", "example", "let", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "...", "-lrb-", "-rrb-", "sequence", "velocity", "value", "minimal", "face", "least", "square", "error", "-lrb-", "-rrb-", "differentiate", "respect", "set", "derivative", "zero", "give", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "use", "formula", "sum", "linear", "quadratic", "sequence", "equation", "simplify", "where", "system", "trivially", "invert", "find", "show", "-lsb-", "Houston", "et", "al.", "2006", "-rsb-", "entire", "process", "build", "new", "grid", "transfer", "datum", "between", "grid", "take", "linear", "time", "we", "use", "one", "grid", "cell", "band", "uniform", "cell", "around", "move", "object", "so", "special", "tall", "cell", "treatment", "require", "one-way", "twoway", "coupling", "solid", "-lrb-", "though", "we", "implement", "only", "one-way", "coupling", "so", "far", "-rrb-", "addition", "we", "define", "optical", "depth", "down", "which", "we", "want", "preserve", "much", "detail", "possible", "use", "uniform", "cell", "within", "distance", "from", "interface", "effect", "vary", "optical", "depth", "illustrate", "Figure", "sufficient", "optical", "depth", "satisfactory", "result", "obtain", "-lrb-", "middle", "-rrb-", "otherwise", "we", "fail", "resolve", "enough", "threedimensional", "flow", "structure", "obtain", "nonphysical", "result", "-lrb-", "right", "-rrb-", "simulation", "use", "processor", "grid", "-lrb-", "see", "section", "-rrb-", "take", "250", "116", "59", "seconds", "per", "frame", "respectively", "note", "fully", "refine", "splash", "-lrb-", "left", "-rrb-", "use", "essentially", "same", "method", "-lsb-", "Houston", "et", "al.", "2006", "-rsb-", "since", "computational", "cost", "tall", "cell", "independent", "its", "height", "all", "tall", "cell", "together", "equivalent", "cost", "few", "extra", "layer", "uniform", "cell", "regardless", "depth", "water", "certain", "optical", "depth", "uniform", "cell", "need", "another", "layer", "cell", "provide", "extra", "computation", "need", "we", "approach", "unlikely", "another", "adaptive", "method", "octree", "would", "make", "layer", "more", "efficient", "particular", "we", "can", "double", "depth", "water", "without", "incur", "factor", "two", "slowdown", "characteristic", "uniform", "grid", "previous", "rle", "technique", "-lrb-", "figure", "-lrb-", "left", "-rrb-", "-rrb-", "moreover", "result", "splash", "qualitatively", "different", "from", "shallow", "simulation", "which", "show", "importance", "water", "depth", "bulk", "flow", "deeper", "simulation", "take", "140", "seconds", "frame", "due", "increase", "surface", "area", "compare", "Figure", "-lrb-", "middle", "-rrb-", "Figure", "-lrb-", "right", "-rrb-", "show", "serial", "octree", "simulation", "same", "splash", "although", "Figure", "-lrb-", "middle", "-rrb-", "take", "same", "amount", "total", "computation", "-lrb-", "460", "seconds", "per", "frame", "-rrb-", "we", "method", "readily", "parallelize", "lead", "faster", "turnaround", "larger", "simulation", "excessive", "computational", "cost", "keep", "we", "from", "refine", "octree", "same", "resolution", "throughout", "entire", "optical", "depth", "region", "we", "instead", "be", "force", "coarsen", "away", "from", "typical", "three", "grid", "cell", "band", "which", "make", "simulation", "significantly", "more", "viscous", "fact", "straightforward", "implement", "place", "individual", "octree", "each", "we", "uniform", "cell", "just", "do", "-lsb-", "Losasso", "et", "al.", "2006", "-rsb-", "we", "use", "standard", "uniform", "MAC", "grid", "fluid", "solver", "band", "uniform", "cell", "together", "particle", "level", "set", "method", "-lsb-", "Enright", "et", "al.", "2002", "-rsb-", "both", "level", "set", "velocity", "field", "advect", "semi-lagrangian", "advection", "-lsb-", "stam", "1999", "-rsb-", "band", "contrast", "velocity", "define", "everywhere", "some", "semi-lagrangian", "ray", "ask", "information", "from", "tall", "cell", "velocity", "instead", "update", "same", "algorithm", "use", "update", "velocity", "tall", "cell", "-lrb-", "see", "section", "5.1", "-rrb-", "note", "pressure", "solve", "globally", "coupling", "uniform", "tall", "cell", "together", "-lrb-", "see", "section", "5.2", "-rrb-", "situation", "where", "additional", "turbulence", "desire", "we", "use", "vortex", "particle", "approach", "-lsb-", "Selle", "et", "al.", "2005", "-rsb-", "figure", "show", "simulation", "vortex", "particle", "seed", "behind", "boat", "represent", "turbulence", "generate", "propeller", "section", "we", "address", "advection", "velocity", "all", "tall", "cell", "uniform", "cell", "be", "update", "semilagrangian", "advection", "because", "be", "too", "close", "tall", "cell", "we", "use", "first", "order", "accurate", "conservative", "upwinding", "all", "tall", "cell", "any", "uniform", "cell", "update", "semi-lagrangian", "method", "since", "number", "cell", "need", "update", "method", "small", "subset", "total", "cell", "-lrb-", "even", "though", "can", "most", "volume", "-rrb-", "efficiency", "approach", "unimportant", "thus", "we", "choose", "conservative", "method", "preserve", "momentum", "very", "tall", "cell", "likely", "have", "large", "truncation", "error", "moreover", "conservative", "scheme", "quite", "popular", "two-dimensional", "nonlinear", "shallow", "water", "equation", "which", "have", "many", "similarity", "we", "tall", "cell", "we", "emphasize", "conservation", "do", "cure", "large", "truncation", "error", "only", "make", "result", "more", "physically", "plausible", "we", "begin", "put", "velocity", "term", "conservation", "form", "use", "transform", "equation", "-lrb-", "uu", "-rrb-", "g.", "ignore", "pressure", "force", "term", "we", "focus", "component", "velocity", "-lrb-", "-rrb-", "-lrb-", "vu", "-rrb-", "-lrb-", "wu", "-rrb-", "we", "place", "control", "volume", "around", "each", "face", "show", "dot", "line", "Figure", "3e", "equation", "can", "rewrite", "indicate", "velocity", "update", "base", "flux", "across", "control", "volume", "face", "i.e.", "where", "sign", "depend", "which", "side", "control", "volume", "flux", "flux", "compute", "average", "velocity", "control", "volume", "face", "use", "average", "velocity", "decide", "upwind", "direction", "flux", "itself", "construct", "multiply", "upwind", "component", "velocity", "we", "advecting", "up", "average", "value", "other", "component", "av", "av", "velocity", "component", "treat", "similarly", "while", "algorithm", "straightforward", "uniform", "grid", "few", "modification", "require", "tall", "cell", "motivation", "we", "point", "out", "we", "could", "refine", "tall", "cell", "uniform", "grid", "apply", "uniform", "grid", "method", "just", "discuss", "re-coarsen", "although", "would", "inefficient", "implement", "directly", "we", "approach", "achieve", "exactly", "result", "efficient", "manner", "simulate", "process", "refining", "advecting", "coarsening", "we", "consider", "each", "pair", "adjacent", "minimal", "face", "one", "time", "apply", "equation", "entire", "velocity", "profile", "produce", "piecewise", "linear", "quadratic", "each", "side", "use", "equation", "reduce", "back", "constant", "linear", "profile", "fact", "reduce", "each", "flux", "contribution", "separately", "have", "same", "result", "treat", "they", "all", "once", "follow", "from", "linearity", "equation", "example", "give", "two", "minimal", "face", "whose", "control", "volume", "intersect", "along", "direction", "average", "velocity", "profile", "av", "linear", "av", "change", "sign", "we", "split", "control", "volume", "face", "two", "section", "constant", "sign", "handle", "each", "section", "separately", "advect", "along", "between", "distinct", "minimal", "face", "simple", "since", "intersection", "single", "uniform", "control", "volume", "face", "however", "we", "must", "also", "account", "flux", "between", "top", "bottom", "sample", "linear", "profile", "average", "middle", "control", "volume", "face", "produce", "constant", "av", "every", "virtual", "control", "volume", "face", "so", "flux", "profile", "linear", "update", "can", "simplify", "note", "net", "flux", "every", "virtual", "uniform", "face", "except", "first", "last", "constant", "since", "difference", "consecutive", "term", "linear", "sequence", "first", "order", "upwinding", "require", "CFL", "condition", "time", "step", "stability", "namely", "max", "-lrb-", "-rrb-", "larger", "time", "step", "desire", "other", "part", "algorithm", "upwind", "phase", "advection", "can", "subcycle", "little", "extra", "cost", "since", "only", "need", "small", "fraction", "velocity", "after", "advection", "we", "refine/coarsen", "grid", "first", "instability", "sometimes", "ap", "pear", "near", "sharp", "change", "bottom", "topography", "wall", "canyon", "Figure", "can", "occur", "because", "final", "value", "affine", "combination", "start", "velocity", "since", "average", "control", "volume", "face", "break", "discrete", "incompressibility", "we", "avoid", "instability", "compute", "total", "weight", "use", "each", "value", "divide", "weight", "would", "larger", "than", "affine", "combination", "note", "weight", "can", "compute", "apply", "same", "advection", "algorithm", "constant", "field", "-lrb-", "i.e.", "substitute", "up", "everywhere", "-rrb-", "fix", "far", "from", "satisfactory", "especially", "since", "lack", "discrete", "incompressibility", "cause", "problem", "uniform", "grid", "second", "while", "first", "order", "method", "sufficient", "bulk", "motion", "would", "interesting", "generalize", "ENO", "WENO", "scheme", "typically", "use", "shallow", "water", "case", "tall", "cell", "reduce", "numerical", "dissipation", "after", "advection", "we", "solve", "pressure", "make", "velocity", "divergence", "free", "via", "-lrb-", "-rrb-", "+1", "t?p", "entire", "collection", "uniform", "tall", "cell", "once", "since", "variable", "density", "flow", "do", "have", "approximately", "linear", "vertical", "pressure", "profile", "we", "assume", "density", "spatially", "constant", "can", "move", "right", "hand", "side", "i.e.", "??", "component", "discrete", "pressure", "gradient", "MAC", "grid", "face", "between", "two", "MAC", "grid", "cell", "-lrb-", "-rrb-", "where", "z.", "horizontal", "derivative", "say", "direction", "consider", "two", "adjacent", "tall", "cell", "extend", "from", "respectively", "intersect", "minimal", "face", "from", "max", "-lrb-", "-rrb-", "min", "-lrb-", "-rrb-", "corresponding", "pressure", "component", "discrete", "gradient", "face", "between", "they", "linear", "profile", "value", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "give", "interpolate", "pressure", "each", "cell", "apply", "standard", "central", "differencing", "e.g.", "-lrb-", "-rrb-", "similarly", "-lrb-", "-rrb-", "derivative", "between", "vertically", "adjacent", "pressure", "sample", "simply", "-lrb-", "-rrb-", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "we", "generalize", "equation", "tall", "cell", "compute", "flux", "each", "virtual", "uniform", "cell", "tall", "cell", "divide", "each", "flux", "between", "bottom", "top", "sample", "cell", "add", "up", "contribution", "example", "give", "tall", "cell", "from", "minimal", "face", "from", "velocity", "total", "flux", "contribution", "from", "face", "give", "upper", "portion", "cell", "while", "y?z", "contribution", "lower", "portion", "cell", "vertical", "flux", "contribution", "always", "v?x?z", "horizontal", "direction", "get", "contribution", "from", "minimal", "face", "from", "top", "portion", "cell", "we", "substitute", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "equation", "collapse", "nested", "interpolation", "obtain", "y?z", "jb", "ja", "similarly", "y?z", "jb", "ja", "contribution", "bottom", "portion", "cell", "note", "coefficient", "first", "equation", "-lrb-", "which", "-rrb-", "identical", "coefficient", "second", "equation", "-lrb-", "which", "-rrb-", "since", "all", "symmetric", "pair", "contribution", "discretization", "matrix", "identical", "final", "result", "symmetric", "coefficient", "relate", "handle", "similarly", "moreover", "cross", "term", "relate", "also", "similarly", "treat", "vertical", "term", "we", "obtain", "-lrb-", "x?z", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "once", "again", "result", "identical", "contribution", "symmetric", "term", "result", "negative", "semi-definite", "linear", "system", "can", "treat", "same", "manner", "typical", "MAC", "grid", "discretization", "i.e.", "preconditioned", "conjugate", "gradient", "incomplete", "Cholesky", "preconditioner", "Neumann", "Dirichlet", "boundary", "condition", "anywhere", "tall", "uniform", "cell", "etc.", "we", "implement", "we", "method", "parallel", "use", "mpus", "decompose", "horizontal", "domain", "two-dimensional", "grid", "give", "each", "processor", "one", "fix", "rectangular", "piece", "domain", "before", "every", "stage", "fluid", "solve", "require", "neighbor", "datum", "we", "fill", "ghost", "cell", "side", "each", "processor", "from", "boundary", "datum", "its", "neighbor", "processor", "pressure", "solve", "each", "processor", "construct", "incomplete", "Cholesky", "preconditioner", "portion", "grid", "own", "participate", "global", "pcg", "solve", "block", "diagonal", "preconditioner", "form", "from", "incomplete", "Cholesky", "block", "each", "processor", "extend", "serial", "version", "algorithm", "use", "MPI", "relatively", "straightforward", "since", "domain", "decomposition", "apply", "only", "along", "uniform", "horizontal", "dimension", "use", "tall", "cell", "bulk", "fluid", "significantly", "reduce", "communication", "bandwidth", "require", "all", "simulation", "be", "run", "cluster", "processor", "2.6", "GHz", "Opteron", "machine", "boat", "simulation", "figure", "use", "16", "processor", "grid", "optical", "depth", "1/5", "water", "depth", "cost", "approximately", "minute", "frame", "boat", "example", "we", "use", "vortex", "particle", "-lsb-", "Selle", "et", "al.", "2005", "-rsb-", "render", "remove", "negative", "particle", "-lsb-", "Guendelman", "et", "al.", "2005", "-rsb-", "Figure", "show", "river", "simulation", "vary", "bottom", "topography", "use", "20", "processor", "20", "grid", "computational", "cost", "approximately", "25", "minute", "frame", "optical", "depth", "illustrate", "Figure", "memory", "consumption", "significant", "issue", "any", "simulation", "we", "have", "present", "novel", "method", "simulation", "large", "body", "water", "combine", "two-dimensional", "three-dimensional", "simulation", "technique", "bulk", "water", "volume", "represent", "tall", "cell", "similar", "height", "field", "method", "surface", "layer", "water", "simulated", "state", "art", "fully", "three-dimensional", "Navier-Stokes", "free", "surface", "solver", "algorithm", "work", "well", "capture", "detailed", "surface", "motion", "represent", "detailed", "bottom", "topography", "we", "general", "philosophy", "use", "best", "available", "method", "surface", "layer", "where", "we", "expect", "interesting", "detail", "coarsen", "mesh", "away", "from", "interface", "efficiency", "like", "shallow", "water", "we", "method", "only", "admit", "computational", "gain", "flow", "heavily", "dominate", "gravity", "where", "large", "portion", "water", "near", "vertical", "equilibrium", "against", "ground", "general", "we", "believe", "best", "approach", "any", "simulation", "uniform", "grid", "capture", "interesting", "flow", "feature", "coarsen", "vertically", "use", "we", "method", "area", "where", "linear", "pressure", "profile", "sufficient", "refine", "uniform", "cell", "use", "octree", "area", "where", "more", "resolution", "desirable", "finally", "we", "note", "effect", "bottom", "topography", "surface", "diminish", "increase", "depth", "deep", "water", "limit", "effect", "negligible", "however", "we", "interested", "problem", "shallow", "water", "regime", "where", "tall", "cell", "almost", "exclusively", "use", "Research", "support", "part", "ONR", "YIP", "award", "pecase", "award", "-lrb-", "onr", "n00014-01-1-0620", "-rrb-", "Packard", "Foundation", "Fellowship", "Sloan", "Research", "Fellowship", "ONR", "n00014-03-1-0071", "onr", "n00014-02-1-0720", "onr", "n00014-05-1-0479", "-lrb-", "SUN", "computing", "cluster", "-rrb-", "aro", "daad19-03-1-0331", "nsf", "iis-0326388", "nsf", "itr-0205671", "nsf", "itr-0121288", "nsf", "aci-0323866", "NIH", "u54-gm072970", "g.i.", "support", "part", "NSF", "Graduate", "Fellowship" ],
  "content" : "We present a new method for the efficient simulation of large bodies of water, especially effective when three-dimensional surface effects are important. Fully three-dimensional Navier-Stokes solvers produce stunning results, but do not scale well to large bodies of water when the simulation is carried out on a uniform Cartesian grid. First, the current octree approaches do not make full use of the highly accurate MAC grid method as in [Enright et al. 2002], instead relying too much on nodal values for interpolation resulting in increased numerical dissipation. This also allows for the addition of any other technique that works on a uniform grid, such as vortex particles [Selle et al. 2005]. Since the effects of bottom topography diminish with increasing depth, the method is most useful in the shallow water regime. In contrast, the octree method of [Losasso et al. 2004] suffers from increased dissipation due to repeated back and forth averaging even when fully refined. While this dissipation was partially reduced in [Guendelman et al. 2005] using FLIP rather than PIC averaging (see also [Zhu and Bridson 2005]), our experience with uniform grids indicates that the full MAC method still produces higher quality results. Although a grid of this type could be represented with pointer structures (as in [Whitaker 1998]) connecting all the tall and short cells together in the required fashion, this could prove rather inefficient. Our tall cells only occur far from the interface, and thus do not participate in the particle level set method. Note that all our tall cells are vertical as is typical for shallow water methods, because it is reasonable to assume linear pressure variation in the vertical direction but not in the horizontal directions. These equations were combined with methods for simulating a water surface in [Foster and Metaxas 1996; Foster and Metaxas 1997a; Foster and Fedkiw 2001], and we use the particle level set approach of [Enright et al. 2002] as the method of choice in the three-dimensional surface layer of water. Other work on water and liquids includes viscoelastic fluids [Goktekin et al. 2004], solid fluid coupling [Carlson et al. 2004; Guendelman et al. 2005], control [McNamara et al. 2004; Shi and Yu 2005], contact angles [Wang et al. 2005], sand [Zhu and Bridson 2005], and two phase flow [Hong and Kim 2005]. Of course, the deep water equations ignore bottom topography and do not resolve fully three-dimensional phenomena at the surface. [Thon and Ghazanfarpour 2001] also solved the two-dimensional NavierStokes equations for the horizontal velocity in streams, but used a noise function for the vertical velocity. [Neyret and Praizelin 2001] proposed a simpler stream model using a two-dimensional Laplace equation for the bulk flow. We simulate on a uniform two-dimensional horizontal grid of vertical columns that contain both uniform cells and tall cells that replace collections of uniform cells, e.g. see Figure 2 . The tall and uniform cells can be arbitrary in each column, and in particular we split tall cells at the ground to match bottom topography ( Figure 6 ). In a uniform MAC grid, scalars are stored at cell centers while velocity components are stored on their respective faces ( Figure 3a ). Tall cells contain two pressure values corresponding to the cell centers of the uppermost and bottommost uniform cells that the tall cell replaces ( Figure 3b ). Figure 3e outlines the control volume around each minimal face noting that minimal faces between tall cells may contain two horizontal velocities (as shown in the figure). Between these two velocities, we interpolate horizontal velocities on the uniform faces replaced by this minimal face using linear interpolation consistent with the pressure and its derivatives. Vertical pressure derivatives and vertical velocities are shown in Figure 3d and 3f (also co-located) along with outlined control volumes. The vertical velocities at the center of new tall cells are set to the average value of all the vertical faces replaced by it, whereas those for uniform cells are defined as their interpolated values. This conserves vertical momentum. For example, let u( j a ), u( j a + 1), . . . , u( j b ) be a sequence of velocity values on a minimal face. The least squares error is E = 2 1 j= ? j b j a j j b b ? ? j j a u a + j j b ? ? j j a a u b ? u( j) 2 Differentiating with respect to u a and u b and setting the derivatives to zero gives j= ? j b j a ( j j b b ? ? j) j a 2 u a + ( j b ? j b j)( ? j j a ? j a ) u b = j= ? j b j a ( j b ? j)u( j) j= ? j b j a ( j b ? j b j)( ? j j a ? j a ) u a + ( j j b ? ? j a j a ) 2 u b = j= ? j b j a ( j ? j a )u( j) Using the formulas for sums of linear and quadratic sequences, these equations simplify into where n = j b ? j a . This 2 ? 2 system is trivially inverted to find u a and u b . As shown in [Houston et al. 2006], the entire process of building a new grid and transferring data between grids takes linear time. We use a one grid cell band of uniform cells around moving objects, so that no special tall cell treatment is required for one-way or twoway coupling with solids (though we implemented only one-way coupling so far). In addition, we define an optical depth down to which we want to preserve as much detail as possible and use uniform cells within that distance from the interface. The effects of varying the optical depth are illustrated in Figure 4 . With a sufficient optical depth, satisfactory results are obtained (middle). Otherwise, we fail to resolve enough of the threedimensional flow structure and obtain nonphysical results (right). These simulations used 4 processors in a 2 ? 2 grid (see section 6), and took 250, 116, and 59 seconds per frame, respectively. Note that the fully refined splash (left) uses essentially the same method as [Houston et al. 2006]. Since the computational cost of a tall cell is independent of its height, all the tall cells together are equivalent in cost to a few extra layers of uniform cells regardless of the depth of the water. That is, if a certain optical depth of uniform cells is needed, then another layer of cells provides the extra computation needed for our approach. It is unlikely that another adaptive method such as an octree would make this layer more efficient. In particular, we can double the depth of the water without incurring the factor of two slowdown characteristic of uniform grids or previous RLE techniques ( Figure 5 (left)). Moreover, the resulting splash is qualitatively different from the shallow simulation, which shows the importance of water depth on the bulk flow. The deeper simulation took 140 seconds a frame due to the increased surface area compared to Figure 4 (middle). Figure 5 (right) shows a serial octree simulation of the same splash. Although Figure 4 (middle) takes the same amount of total computation (460 seconds per frame), our method is readily parallelized leading to faster turnaround and larger simulations. Excessive computational costs kept us from refining the octree to the same resolution throughout the entire optical depth region, and we instead were forced to coarsen away from the typical three grid cell band, which made the simulation significantly more viscous. In fact, this is straightforward to implement by placing individual octrees in each of our uniform cells just as was done in [Losasso et al. 2006]. We use a standard, uniform MAC grid fluid solver in the band of uniform cells, together with the particle level set method of [Enright et al. 2002]. Both the level set and velocity field are advected with semi-Lagrangian advection [Stam 1999] in this band. In contrast, velocity is defined everywhere, and some semi-Lagrangian rays will ask for information from tall cells. These velocities will instead be updated with the same algorithm used to update velocities in tall cells (see section 5.1). Note that the pressure is solved for globally, coupling the uniform and tall cells together (see section 5.2). In situations where additional turbulence is desired, we use the vortex particle approach of [Selle et al. 2005]. Figures 1 and 7 show simulations with vortex particles seeded behind a boat to represent the turbulence generated by a propeller. In this section, we address the advection of velocity on all the tall cells and on the uniform cells that were not updated with semiLagrangian advection because they were too close to the tall cells. We use first order accurate conservative upwinding for all tall cells and any uniform cells that are not updated with the semi-Lagrangian method. Since the number of cells that need to be updated with this method is a small subset of the total cells (even though it can be most of the volume), the efficiency of this approach is unimportant. Thus, we chose the conservative method to preserve momentum in these very tall cells that are likely to have large truncation errors. Moreover, conservative schemes are quite popular for the two-dimensional nonlinear shallow water equations, which have many similarities with our tall cells. We emphasize that conservation does not cure large truncation errors: it only makes the results more physically plausible. We begin by putting the velocity terms into conservation form using ? ? u = 0 to transform equation 2 into u t + ? ? (uu T ) + ?p/? = g. Ignoring the pressure and force terms, we focus on the u component of the velocity u t + (u 2 ) x + (vu) y + (wu) z = 0. If we place a control volume around each face as shown by the dotted lines in Figure 3e , then this equation can be rewritten to indicate that the velocity is updated based on the fluxes across the control volume faces, i.e. where the sign depends on which side of the control volume a flux is on. The fluxes are computed by averaging the velocities to the control volume faces, and then using these average velocities to decide on the upwind direction. The flux itself is constructed by multiplying the upwind component of the velocity we are advecting, u up , with the average values for the other components v av and w av : The v and w velocity components are treated similarly. While this algorithm is straightforward on a uniform grid, a few modifications are required for tall cells. For motivation, we point out that we could refine the tall cells into a uniform grid, apply the uniform grid method just discussed, and then re-coarsen. Although this would be inefficient to implement directly, our approach achieves exactly this result in an efficient manner. To simulate this process of refining, advecting, and coarsening, we consider each pair of adjacent minimal faces one at a time, apply equations 5 and 4 to the entire velocity profile to produce a piecewise linear or quadratic u ? on each side, and use equation 1 to reduce u ? back to a constant or linear profile. The fact that reducing each flux contribution to u ? separately has the same result as treating them all  at once follows from the linearity of equation 1. For example, given two minimal u faces whose control volumes intersect along the x direction, the averaged velocity profile u av will be linear. If u av changes sign, we split the control volume face into two sections with constant sign and handle each section separately. Advecting u along v between distinct minimal u faces is simple since the intersection is a single uniform control volume face. However, we must also account for flux between the top and bottom samples of a linear profile. Averaging v to the middle control volume face produces a constant v av at every virtual control volume face, so the flux profile F v will be linear. The update of u ? can be simplified by noting that the net flux into every virtual uniform face except for the first and last is constant, since it is the difference of consecutive terms in a linear sequence. First order upwinding requires a CFL condition on the time step for stability, namely ?t max(|u|/?x + |v|/?y + |w|/?z) ? 1. If a larger time step is desired for the other parts of the algorithm, the upwinding phase of advection can be subcycled for little extra cost since it is only needed for a small fraction of the velocities. After advection, we refine/coarsen the grid. First, instabilities sometimes ap- pear near sharp changes in bottom topography such as the walls of the canyon in Figure 9 . These can occur because the final u ? values are not affine combinations of the starting velocities, since averaging to control volume faces breaks discrete incompressibility. We avoided these instabilities by computing the total weight used for each u ? value, and dividing by this weight if u ? would be larger than an affine combination. Note that these weights can be computed by applying the same advection algorithm to the constant field 1 (i.e., substitute 1 for u up everywhere). This fix is far from satisfactory, especially since the lack of discrete incompressibility causes no problems for uniform grids. Second, while a first order method is sufficient for bulk motion, it would be interesting to generalize the ENO and WENO schemes typically used for shallow water to the case of tall cells to reduce numerical dissipation. After advection, we solve for the pressure and make the velocities divergence free via ? ? (?p/?) = ? ? u ? /?t u n+1 = u ? ? ?t?p/? for the entire collection of uniform and tall cells at once. Since variable density flows do not have approximately linear vertical pressure profiles, we assume that the density is spatially constant and can be moved to the right hand side, i.e. ? ? ?p = ?? ? u ? /?t. The component of the discrete pressure gradient on a MAC grid face between two MAC grid cells p 1 and p 2 is ? p/? l = (p 2 ? p 1 )/?l where l = x, y, or z. For the horizontal derivative, say in the x direction, consider two adjacent tall cells extending from j 1 to j 2 and j 3 to j 4 , respectively, intersecting in a minimal face from j a = max( j 1 , j 3 ) to j b = min( j 2 , j 4 ). If the corresponding pressures are p 1 , p 2 , p 3 , p 4 , then the component of the discrete gradient on the face between them is a linear profile with values (p x ) a and (p x ) b given by interpolating pressures to j a and j b in each cell and applying standard central differencing, e.g. (p x ) a = 1 j 4 ? j a p 3 + j a ? j 3 p 4 ? j 2 ? j a p 1 ? j a ? j 1 p 2 ?x j 4 ? j 3 j 4 ? j 3 j 2 ? j 1 j 2 ? j 1 and similarly for (p x ) b . The derivative between vertically adjacent pressure samples p 1 at j 1 and p 2 at j 2 is simply p y = (p 2 ? p 1 )/(( j 2 ? j 1 )?y). We generalize this equation to tall cells by computing the flux into each virtual uniform cell in the tall cell, dividing each flux between the bottom and top samples in the cell, and adding up the contributions. For example, given a tall cell from j 1 to j 2 and a minimal face from j a to j b with velocities u a and u b , the total flux contribution from the face given to the upper portion of the cell is while j b j 2 ? j j b ? j j ? j a j= ? j a j 2 ? j 1 j b ? j a u a + j b ? j a u b ?y?z. is the contribution to the lower portion of the cell. The vertical flux contribution is always v?x?z. For the horizontal direction, to get the contribution from the minimal face from j a to j b to the top portion of the cell, we substitute (p x ) a and (p x ) b for u a and u b in equation 6 and collapse the nested interpolation to obtain ?y?z jb j ? j 1 j 4 ? j j ? j 3 j 2 ? j j ? j 1 ?x j= ? ja j 2 ? j 1 j 4 ? j 3 p 3 + j 4 ? j 3 p 4 ? j 2 ? j 1 p 1 ? j 2 ? j 1 p 2 and similarly ?y?z jb j 2 ? j j 4 ? j j ? j 3 j 2 ? j j ? j 1 ?x j= ? ja j 2 ? j 1 j 4 ? j 3 p 3 + j 4 ? j 3 p 4 ? j 2 ? j 1 p 1 ? j 2 ? j 1 p 2 is the contribution to the bottom portion of the cell. Note that the coefficient of p 1 in the first equation (which is for p 2 ) is identical to the coefficient of p 2 in the second equation (which is for p 1 ). Since all symmetric pairs of contributions to the discretization matrix are identical, the final result is symmetric. The coefficients relating p 3 to p 4 are handled similarly. Moreover, the cross terms relating p 1 to p 3 , p 1 to p 4 , p 2 to p 3 and p 2 to p 4 are also similarly treated. For the vertical terms, we obtain (?x?z/?y)(p 2 ? p 1 )/( j 2 ? j 1 ) once again resulting in identical contributions for symmetric terms. The resulting negative semi-definite linear system can be treated in the same manner as a typical MAC grid discretization, i.e. preconditioned conjugate gradients, incomplete Cholesky preconditioner, Neumann and Dirichlet boundary conditions anywhere in tall or uniform cells, etc. We implemented our method in parallel using MPI by decomposing the horizontal domain into a two-dimensional grid and giving each processor one fixed rectangular piece of the domain. Before every stage of the fluid solve that requires neighboring data, we fill ghost cells on the sides of each processor from the boundary data of its neighboring processors. In the pressure solve, each processor constructs an incomplete Cholesky preconditioner for the portion of the grid that it owns, and participates in a global PCG solve with a block diagonal preconditioner formed from the incomplete Cholesky blocks on each processor. Extending the serial version of the algorithm to use MPI was relatively straightforward since the domain decomposition is applied only along uniform horizontal dimensions, and the use of tall cells for the bulk of the fluid significantly reduced the communication bandwidth required. All simulations were run on a cluster of 4 processor 2.6 GHz Opteron machines. The boat simulations in Figures 1 and 7 used 16 processors in an 8? 2 grid. The optical depth was 1/5 the water depth and the cost was approximately 3 minutes a frame. For the boat examples we used vortex particles [Selle et al. 2005] and rendered removed negative particles as in [Guendelman et al. 2005]. Figure 9 shows a river simulation with varying bottom topography using 20 processors in a 20 ? 1 grid. The computational cost was approximately 25 minutes a frame, and the optical depth is illustrated in Figure 6 . Memory consumption was not a significant issue in any of the simulations. We have presented a novel method for the simulation of large bodies of water by combining two-dimensional and three-dimensional simulation techniques. The bulk of the water volume is represented with tall cells similar to a height field method, and a surface layer of water is simulated with a state of the art, fully three-dimensional Navier-Stokes free surface solver. This algorithm works well for capturing detailed surface motion and for representing detailed bottom topography. Our general philosophy is to use the best available method in the surface layer where we expect interesting detail, and to coarsen the mesh away from the interface for efficiency. Like shallow water, our method only admits computational gains for flows heavily dominated by gravity, where a large portion of the water is in near vertical equilibrium against the ground. In general, we believe that the best approach for any simulation is to start with a uniform grid that captures the interesting flow features, coarsen vertically using our method in areas where linear pressure profiles are sufficient, and then refine uniform cells using an octree in areas where more resolution is desirable. Finally, we note that the effects of bottom topography on the surface diminish with increasing depth, and in the deep water limit the effects are negligible. However, we are interested in problems in the shallow water regime, where tall cells are almost exclusively used. Research supported in part by an ONR YIP award and a PECASE award (ONR N00014-01-1-0620), a Packard Foundation Fellowship, a Sloan Research Fellowship, ONR N00014-03-1-0071, ONR N00014-02-1-0720, ONR N00014-05-1-0479 (for a SUN computing cluster), ARO DAAD19-03-1-0331, NSF IIS-0326388, NSF  ITR-0205671, NSF ITR-0121288, NSF ACI-0323866 and NIH U54-GM072970. G.I. was supported in part by an NSF Graduate Fellowship.",
  "resources" : [ ]
}