{
  "uri" : "sig2012-a71-hildebrandt_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2012/a71-hildebrandt_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Interactive Spacetime Control of Deformable Objects",
    "published" : "2012",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Christian-Schulz",
      "name" : "Christian",
      "surname" : "Schulz"
    } ]
  },
  "bagOfWords" : [ "moreover", "spline", "design", "produce", "function", "high", "fairness", "-lrb-", "e.g.", "function", "few", "extrema", "inflection", "point", "-rrb-", "whereas", "motion", "object", "character", "often", "oscillatory", "time", "can", "have", "large", "impact", "state", "system", "later", "time", "technique", "calculate", "act", "force", "minimize", "objective", "functional", "while", "guarantee", "result", "motion", "satisfy", "prescribe", "spacetime", "constraint", "e.g.", "interpolate", "set", "keyframe", "resulting", "force", "optimally", "distribute", "over", "whole", "animation", "show", "effect", "like", "squash-and-stretch", "timing", "anticipation", "desire", "animation", "main", "feature", "we", "scheme", "achieve", "interactive", "response", "time", "produce", "explicit", "time-continuous", "parametrization", "motion", "thirdly", "we", "fully", "decouple", "linearize", "spacetime", "constraint", "problem", "reduce", "space", "heart", "we", "technique", "efficient", "algorithm", "computation", "wiggly", "spline", "base", "closed-form", "representation", "wiggly", "spline", "we", "show", "b-spline", "compose", "polynomial", "wiggly", "spline", "can", "assemble", "from", "function", "describe", "damp", "drive", "oscillation", "compute", "explicit", "representation", "wiggly", "spline", "we", "algorithm", "solve", "linear", "system", "band", "structure", "small", "size", "which", "depend", "number", "keyframe", "result", "computation", "robust", "-lrb-", "even", "extreme", "parameter", "value", "-rrb-", "produce", "10", "wiggly", "spline", "per", "second", "custom", "laptop", "-lrb-", "i7", "quad-core", "2.2", "GHz", "CPU", "-rrb-", "even", "without", "use", "parallelization", "example", "jump", "lamp", "Luxo", "nicely", "demonstrate", "benefit", "approach", "explicit", "derivative", "different", "physical", "system", "can", "obtain", "through", "adjoint", "method", "see", "-lsb-", "McNamara", "et", "al.", "2004", "Wojtan", "et", "al.", "2006", "Barbi", "et", "al.", "2009", "-rsb-", "-lsb-", "Nickell", "1976", "Idelsohn", "Cardona", "1985", "Krysl", "et", "al.", "2001", "-rsb-", "base", "efficient", "representation", "force", "reduce", "space", "Barbi", "James", "-lsb-", "2005", "-rsb-", "obtain", "real-time", "rate", "forward", "simulation", "elastic", "solid", "Kim", "James", "-lsb-", "2009", "-rsb-", "use", "model", "reduction", "speed", "up", "calculation", "large", "simulation", "animation", "skip", "full", "step", "reduced", "step", "satisfy", "accuracy", "condition", "reduce", "model", "build", "preprocess", "online", "simulation", "progress", "reduce", "space", "have", "also", "be", "use", "spacetime", "constraint", "however", "we", "method", "allow", "work", "larger", "reduce", "space", "theirs", "variational", "problem", "geodesic", "shape", "space", "have", "comparable", "complexity", "solver", "need", "deal", "vary", "curve", "shape", "space", "well", "we", "keep", "presentation", "we", "approach", "general", "so", "cover", "broad", "class", "discrete", "deformable", "object", "specific", "setting", "we", "use", "we", "experiment", "treat", "section", "where", "mass", "matrix", "represent", "inner", "force", "damp", "outer", "force", "act", "x.", "-lsb-", "Terzopoulos", "et", "al.", "1987", "Pentland", "Williams", "1989", "Shabana", "1997", "Baraff", "Witkin", "1998", "Barbi", "James", "2005", "Chao", "et", "al.", "2010", "-rsb-", "approximate", "around", "state", "we", "expand", "where", "-lrb-", "-rrb-", "stiffness", "matrix", "approximation", "equation", "motion", "take", "form", "matrix", "symmetric", "positive", "definite", "furthermore", "we", "assume", "symmetric", "which", "case", "most", "model", "elasticity", "consider", "graphic", "-lrb-", "e.g.", "hyperelastic", "material", "-rrb-", "most", "we", "experiment", "we", "use", "reduce", "shape", "space", "instead", "full", "space", "3n", "we", "reason", "do", "so", "threefold", "firstly", "accurate", "representation", "geometry", "usually", "need", "high", "dimensional", "discrete", "representation", "whereas", "animation", "often", "require", "only", "fraction", "degree", "freedom", "cf.", "-lsb-", "Kim", "James", "2009", "-rsb-", "thirdly", "reduce", "space", "cut", "off", "high", "frequency", "mode", "thereby", "lower", "stiffness", "optimization", "problem", "which", "turn", "increase", "numerical", "robustness", "result", "method", "we", "construction", "use", "keyframe", "mode", "oscillation", "around", "keyframe", "point", "we", "keep", "presentation", "independent", "particular", "choice", "basis", "postpone", "discussion", "we", "construction", "basis", "Section", "let", "3n", "d-matrix", "whose", "column", "basis", "vector", "map", "coordinate", "reduce", "space", "u-coordinate", "3n", "reduce", "mass", "stiffness", "matrix", "last", "equation", "follow", "from", "multiply", "-lrb-", "-rrb-", "use", "-lrb-", "-rrb-", "we", "purpose", "convenient", "choose", "specific", "basis", "reduce", "space", "namely", "basis", "which", "reduce", "mass", "stiffness", "matrix", "diagonal", "matrix", "can", "achieve", "solve", "-lrb-", "low-dimensional", "-rrb-", "generalize", "eigenvalue", "problem", "we", "assemble", "eigenvector", "form", "row", "matrix", "denote", "coordinate", "respect", "basis", "-lcb-", "-rcb-", "transformation", "from", "qand", "u-coordinate", "where", "representation", "mass", "stiffness", "matrix", "coordinate", "where", "diagonal", "matrix", "whose", "diagonal", "entry", "eigenvalue", "reduce", "equation", "motion", "take", "form", "where", "G.", "advantage", "use", "coordinate", "-lrb-", "-rrb-", "system", "independent", "ode", "whereas", "-lrb-", "-rrb-", "coupled", "system", "section", "we", "describe", "basis", "we", "approach", "model", "reduction", "spacetime", "constraint", "problem", "deformable", "object", "section", "4.1", "we", "formulate", "linearize", "spacetime", "constraint", "problem", "reduce", "space", "show", "coordinate", "decouple", "one-dimensional", "spacetime", "problem", "section", "4.2", "we", "derive", "scheme", "computation", "exact", "solution", "one-dimensional", "problem", "which", "amount", "solve", "lowdimensional", "linear", "system", "band", "structure", "section", "4.3", "describe", "how", "we", "construct", "final", "motion", "blend", "number", "solution", "linearized", "problem", "section", "4.4", "we", "give", "outline", "algorithm", "divide", "preprocess", "interactive", "phase", "which", "animation", "edit", "time", "...", "where", "motion", "optimal", "force", "require", "generate", "motion", "have", "minimal", "spacetime", "norm", "-lrb-", "integral", "over", "square", "norm", "force", "over", "all", "point", "deformable", "object", "time", "interval", "-rrb-", "among", "all", "competitor", "uniqueness", "solution", "we", "additionally", "impose", "boundary", "condition", "motion", "example", "we", "fix", "initial", "final", "velocity", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "alternatively", "interpolation", "second", "derivative", "boundary", "circular", "motion", "possible", "let", "we", "assume", "reduce", "space", "contain", "all", "keyframe", "vector", "restrict", "spacetime", "problem", "reduce", "space", "we", "allow", "only", "force", "contain", "reduce", "space", "linearize", "problem", "we", "assume", "dynamics", "describe", "linearize", "equation", "motion", "component", "keyframe", "basis", "satisfy", "which", "follow", "from", "-lrb-", "-rrb-", "multiply", "equation", "use", "-lrb-", "-rrb-", "show", "equivalent", "-lrb-", "-rrb-", "similarly", "vector", "transform", "norm", "we", "use", "-lrb-", "10", "-rrb-", "simply", "standard", "norm", "since", "mass", "matrix", "coordinate", "identity", "matrix", "norm", "discrete", "norm", "function", "deformable", "object", "advantage", "use", "coordinate", "problem", "decouple", "i.e.", "component", "function", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "do", "influence", "each", "other", "-lrb-", "-rrb-", "hence", "we", "only", "need", "solve", "one-dimensional", "problem", "subject", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lcb-", "...", "-rcb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "all", "-lcb-", "...", "here", "we", "set", "-lrb-", "-rrb-", "once", "solution", "-lrb-", "-rrb-", "reduce", "space", "compute", "matrix", "map", "-lrb-", "-rrb-", "motion", "-lrb-", "-rrb-", "3n", "see", "also", "eq", "Kass", "Anderson", "-lsb-", "2008", "-rsb-", "consider", "one-dimensional", "spacetime", "constraint", "problem", "-lrb-", "11", "-rrb-", "call", "solution", "wiggly", "spline", "here", "we", "propose", "alternative", "scheme", "solve", "problem", "base", "closed-form", "representation", "wiggly", "spline", "euler-lagrange", "equation", "one-dimensional", "problem", "-lrb-", "11", "-rrb-", "fourth", "order", "ODE", "can", "verify", "lengthy", "straightforward", "calculation", "solution", "equation", "form", "4-dimensional", "-lrb-", "affine", "-rrb-", "vector", "space", "type", "function", "space", "depend", "relation", "we", "classify", "different", "type", "six", "case", "explicitly", "list", "basis", "function", "-lcb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-rcb-", "span", "space", "solution", "all", "case", "appendix", "follow", "restriction", "minimizer", "any", "interval", "-lsb-", "-rsb-", "combination", "basis", "function", "we", "denote", "-lrb-", "-rrb-", "restriction", "-lrb-", "-rrb-", "interval", "-lsb-", "-rsb-", "every", "-lcb-", "...", "-rcb-", "four", "coefficient", "-lrb-", "-rrb-", "-lsb-", "-rsb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "where", "-rcb-", "-lcb-", "-rcb-", "all", "-lcb-", "...", "together", "linear", "equation", "determine", "unique", "spline", "-lrb-", "-rrb-", "since", "typically", "small", "-lrb-", "e.g.", "10", "-rrb-", "solve", "system", "require", "only", "fraction", "m", "even", "custom", "laptop", "without", "parallelization", "one", "can", "compute", "10", "wiggly", "spline", "within", "second", "we", "algorithm", "directly", "generalize", "calculation", "complex", "wiggly", "spline", "space", "complex", "solution", "Euler-Lagrange", "propose", "computation", "wiggly", "spline", "have", "three", "major", "advantage", "over", "finite", "difference", "scheme", "first", "result", "wiggly", "spline", "closed", "form", "just", "approximation", "second", "significantly", "lower", "computational", "cost", "roughly", "speak", "problem", "stability", "continuous", "equation", "stable", "once", "continuous", "derivative", "replace", "finite", "difference", "stability", "longer", "guarantee", "frequency", "higher", "than", "those", "representable", "use", "sampling", "rate", "can", "destabilize", "equation", "throughout", "discussion", "stability", "problem", "we", "refer", "Kass", "Anderson", "-lsb-", "2008", "-rsb-", "counteract", "problem", "we", "use", "fact", "desire", "motion", "interpolate", "keyframe", "we", "expand", "inner", "force", "around", "every", "keyframe", "get", "-lrb-", "-rrb-", "linearize", "equation", "motion", "we", "solve", "corresponding", "linearized", "spacetime", "problem", "compute", "-lrb-", "-rrb-", "motion", "-lrb-", "-rrb-", "we", "implementation", "we", "use", "only", "motion", "-lrb-", "-rrb-", "interval", "-lsb-", "-lrb-", "-rrb-", "-lrb-", "+1", "-rrb-", "-rsb-", "blended", "interval", "-lsb-", "-lrb-", "+1", "-rrb-", "+1", "-lrb-", "+1", "-rrb-", "-rsb-", "however", "we", "example", "we", "do", "use", "technique", "we", "divide", "computation", "two", "part", "preprocess", "interactive", "editing", "phase", "following", "shift", "preprocess", "basis", "reduce", "space", "calculate", "store", "matrix", "every", "keyframe", "mass", "stiffness", "matrix", "reduce", "counterpart", "set", "up", "every", "pair", "reduce", "matrix", "eigenvalue", "problem", "-lrb-", "-rrb-", "fully", "solve", "matrix", "well", "vector", "set", "up", "interactive", "phase", "begin", "compute", "animation", "we", "only", "need", "compute", "-lrb-", "-rrb-", "motion", "blend", "they", "get", "final", "motion", "editing", "operation", "change", "physical", "parameter", "like", "material", "stiffness", "damp", "coefficient", "boundary", "condition", "time", "keyframe", "position", "space", "keyframe", "require", "only", "recomputation", "wiggly", "spline", "hence", "take", "only", "fraction", "second", "well", "additional", "effort", "require", "modeling", "add", "keyframe", "however", "we", "do", "need", "rerun", "whole", "preprocess", "instead", "we", "can", "keep", "reduce", "space", "which", "compute", "preprocess", "add", "some", "basis", "vector", "similarly", "we", "only", "need", "compute", "stiffness", "matrix", "mass", "matrix", "new", "-lrb-", "modify", "-rrb-", "keyframe", "we", "keep", "-lrb-", "unreduced", "-rrb-", "matrix", "all", "other", "keyframe", "only", "operation", "reduce", "space", "-lrb-", "set", "up", "reduce", "matrix", "solve", "reduce", "eigenvalue", "problem", "-rrb-", "must", "carry", "out", "all", "keyframe", "since", "reduce", "space", "low-dimensional", "operation", "come", "low", "computational", "cost", "alternatively", "augment", "reduce", "space", "one", "can", "project", "new", "-lrb-", "model", "-rrb-", "keyframe", "reduce", "space", "strategy", "further", "reduce", "computation", "effort", "modify", "keyframe", "nice", "approach", "create", "model", "new", "keyframe", "directly", "reduce", "space", "we", "technique", "can", "use", "different", "type", "discrete", "elastic", "object", "we", "implementation", "we", "decide", "use", "Discrete", "Shells", "-lsb-", "Grinspun", "et", "al.", "2003", "Bergou", "et", "al.", "2007", "-rsb-", "Discrete", "shell", "formulate", "triangle", "mesh", "which", "represent", "middle", "surface", "elastic", "shell", "potential", "energy", "inner", "force", "split", "two", "part", "flexural", "-lrb-", "bend", "-rrb-", "membrane", "-lrb-", "stretch", "-rrb-", "energy", "explicit", "formula", "we", "refer", "-lsb-", "Grinspun", "et", "al.", "2003", "-rsb-", "compute", "derivative", "we", "use", "automaticdifferentiation", "library", "adol-c", "see", "-lsb-", "Griewank", "et", "al.", "1996", "-rsb-", "most", "we", "experiment", "we", "set", "both", "material", "parameter", "-lrb-", "weighting", "flexural", "membrane", "energy", "-rrb-", "value", "additionally", "we", "scale", "mesh", "diameter", "10", "latter", "important", "since", "membrane", "flexural", "energy", "scale", "differently", "advantage", "use", "Discrete", "shell", "compare", "use", "elastic", "solid", "we", "could", "directly", "use", "keyframe", "gener", "ate", "surface", "modeler", "thus", "avoid", "need", "generate", "model", "keyframe", "tet", "mesh", "construct", "reduce", "space", "we", "collect", "vector", "set", "use", "svd", "obtain", "orthonormal", "basis", "linear", "span", "we", "store", "basis", "matrix", "set", "consist", "two", "part", "one", "collect", "vector", "point", "keyframe", "other", "contain", "5-30", "vibration", "mode", "each", "keyframe", "computation", "vibration", "mode", "follow", "-lsb-", "Hildebrandt", "et", "al.", "2012", "-rsb-", "we", "set", "keyframe", "rest", "state", "discrete", "shell", "potential", "energy", "set", "up", "hessian", "mass", "matrix", "we", "compute", "mode", "correspond", "lowest", "eigenfrequency", "solution", "generalize", "sparse", "eigenvalue", "problem", "we", "experiment", "construction", "produce", "good", "result", "we", "do", "observe", "typical", "artifact", "one", "get", "when", "work", "reduce", "space", "construct", "from", "vibration", "mode", "around", "only", "one", "state", "small-size", "mesh", "one", "can", "solve", "full", "problem", "instead", "use", "reduce", "space", "example", "we", "compute", "motion", "block", "see", "Figure", "450", "vertex", "full", "1350", "dimensional", "space", "demonstrate", "we", "can", "work", "larger", "space", "compare", "method", "solve", "non-linear", "problem", "reduce", "space", "like", "-lsb-", "Barbi", "et", "al.", "2009", "-rsb-", "use", "20-30", "dimensional", "reduce", "space", "attach", "video", "show", "five", "example", "motion", "produce", "propose", "technique", "Table", "show", "size", "mesh", "reduce", "space", "well", "run", "time", "section", "wiggly", "spline", "mean", "vector-valued", "spline", "describe", "motion", "one-dimensional", "spline", "first", "example", "jump", "block", "compose", "three", "wiggly", "spline", "interpolate", "four", "keyframe", "divide", "motion", "three", "part", "prepare", "jump", "jump", "landing", "during", "first", "last", "part", "base", "block", "fix", "ground", "equality", "constraint", "each", "three", "wiggly", "spline", "interpolate", "two", "successive", "keyframe", "satisfy", "boundary", "condition", "which", "prescribe", "first", "derivative", "-lrb-", "velocity", "-rrb-", "all", "vertex", "both", "keyframe", "prescribe", "velocity", "first", "keyframe", "vanish", "all", "vertex", "second", "keyframe", "except", "those", "base", "have", "same", "upward", "point", "velocity", "second", "keyframe", "first", "second", "wiggly", "spline", "meet", "therefore", "compound", "curve", "differentiable", "keyframe", "result", "motion", "anticipate", "jump", "force", "require", "accelerate", "block", "distribute", "over", "time", "interval", "model", "collision", "ground", "since", "base", "block", "fix", "third", "wiggly", "spline", "compound", "curve", "continuous", "differentiable", "third", "keyframe", "effect", "anticipation", "landing", "block", "collide", "ground", "we", "show", "two", "motion", "jump", "block", "vary", "material", "stiffness", "-lrb-", "i.e.", "membrane", "flexural", "energy", "scale", "up", "same", "parameter", "-rrb-", "comparison", "motion", "generate", "cubic", "b-spline", "satisfy", "same", "interpolation", "boundary", "condition", "show", "whereas", "we", "motion", "show", "physical", "behavior", "like", "wave", "travel", "up", "down", "block", "b-spline", "animation", "only", "vary", "length", "block", "some", "still", "animation", "show", "fig.", "we", "want", "note", "since", "all", "four", "keyframe", "have", "same", "geometry", "animation", "produce", "from", "one", "linearize", "spacetime-constraint", "problem", "second", "example", "run", "bug", "show", "walk", "cycle", "enrich", "secondary", "motion", "primary", "motion", "interpolate", "12", "keyframe", "form", "walk", "cycle", "which", "we", "take", "from", "book", "-lsb-", "Ritchie", "et", "al.", "2005", "-rsb-", "circular", "wiggly", "spline", "use", "here", "do", "require", "any", "boundary", "condition", "fully", "determine", "interpolation", "condition", "second", "motion", "we", "use", "two", "keyframe", "constrain", "part", "model", "-lrb-", "gray", "area", "Fig.", "-rrb-", "have", "be", "carefully", "craft", "should", "affect", "secondary", "motion", "we", "compute", "reduce", "space", "add", "simple", "vector", "field", "keyframe", "-lrb-", "black", "arrow", "-rrb-", "we", "use", "projection", "vector", "field", "reduce", "space", "derivative", "motion", "force", "wiggly", "spline", "interpolate", "they", "third", "example", "show", "piece", "cloth", "first", "hang", "line", "blow", "air", "finally", "get", "stick", "cylinder", "motion", "assemble", "from", "three", "wiggly", "spline", "first", "last", "wiggly", "spline", "satisfy", "equality", "constraint", "fix", "part", "piece", "cloth", "line", "respectively", "cylinder", "keyframe", "be", "generate", "take", "snapshot", "from", "three", "different", "forward", "simulation", "cloth", "hanging", "line", "cloth", "blow", "air", "cloth", "stick", "cylinder", "forth", "example", "show", "walk", "dinosaur", "-lrb-", "fig.", "-rrb-", "motion", "compose", "five", "wiggly", "spline", "one", "each", "step", "each", "step", "model", "three", "keyframe", "foot", "ground", "fix", "equality", "constraint", "boundary", "condition", "each", "wiggly", "spline", "finite", "difference", "keyframe", "comparison", "we", "show", "result", "non-linear", "method", "Barbi", "et", "al.", "-lsb-", "2009", "-rsb-", "increase", "comparability", "we", "use", "reduce", "space", "approximately", "same", "size", "difference", "method", "scheme", "do", "interpolate", "approximate", "keyframe", "original", "keyframe", "use", "tet", "mesh", "enclose", "dinosaur", "use", "triangle", "mesh", "only", "render", "animation", "tet", "mesh", "have", "1.8", "vertex", "hence", "coarser", "triangle", "mesh", "which", "have", "28", "vertex", "we", "animation", "we", "use", "higher", "resolve", "triangle", "mesh", "explain", "why", "we", "need", "500", "construct", "reduce", "space", "whole", "animation", "while", "need", "only", "25", "after", "preprocess", "we", "method", "need", "0.6", "compute", "update", "animation", "while", "optimization", "take", "15", "min", "last", "example", "live", "demo", "show", "how", "we", "generate", "animation", "dancing", "flour", "sack", "motion", "generate", "circular", "wiggly", "spline", "interpolate", "eight", "keyframe", "-lrb-", "make", "from", "pose", "-rrb-", "video", "show", "how", "time", "keyframe", "adjust", "material", "parameter", "vary", "demonstrate", "interactive", "response", "time", "we", "technique", "offer", "live", "demo", "follow", "demo", "wiggly", "spline", "editor", "illustrate", "effect", "variation", "frequency", "damp", "coefficient", "interpolation", "constraint", "boundary", "condition", "well", "constant", "-lrb-", "gravitational", "-rrb-", "force", "when", "create", "keyframe", "surface", "modeler", "preferable", "use", "physical-based", "modeler", "take", "Discrete", "shell", "energy", "account", "when", "use", "keyframe", "be", "generate", "other", "modeler", "-lrb-", "e.g.", "bug", "dino", "model", "-rrb-", "we", "do", "optimization", "routine", "lower", "Discrete", "shell", "energy", "shape", "explicitly", "we", "minimize", "weighted", "sum", "Discrete", "shell", "energy", "least-square", "distance", "vertex", "original", "position", "we", "present", "technique", "implement", "spacetime", "constraint", "paradigm", "animation", "deformable", "object", "combine", "physical", "realism", "control", "over", "animation", "main", "novelty", "approach", "offer", "interactive", "response", "time", "hence", "allow", "interactive", "adjustment", "physical", "parameter", "editing", "control", "parameter", "like", "time", "keyframe", "after", "reduction", "number", "one-dimensional", "variational", "problem", "need", "solve", "solution", "problem", "know", "wiggly", "spline", "second", "main", "contribution", "paper", "fast", "robust", "numerical", "scheme", "compute", "wiggly", "spline", "base", "explicit", "representation", "wiggly", "spline", "without", "efficient", "numerical", "scheme", "we", "method", "would", "hardly", "interactive", "we", "current", "implementation", "do", "use", "parallelization", "graphic", "card", "still", "preprocess", "well", "computation", "wiggly", "spline", "highly", "parallelizable", "its", "current", "form", "we", "scheme", "require", "every", "keyframe", "prescribe", "pose", "whole", "object", "furthermore", "we", "want", "extend", "scheme", "motion", "do", "interpolate", "only", "approximate", "keyframe", "can", "produce", "challenge", "we", "scheme", "-lrb-", "scheme", "follow", "spacetime", "constraint", "paradigm", "general", "-rrb-", "integration", "contact", "collision", "handling", "currently", "only", "limited", "handling", "contact", "possible", "we", "experiment", "we", "prescribe", "incoming", "outgoing", "velocity", "keyframe", "fix", "part", "object", "space", "equality", "constraint", "model", "contact", "landing", "block", "walk", "dino", "-lrb-", "whose", "foot", "hit", "ground", "-rrb-", "cloth", "hit", "cylinder", "furthermore", "we", "expect", "see", "more", "application", "wiggly", "spline", "we", "see", "they", "powerful", "alternative", "traditional", "spline", "offer", "oscillatory", "behavior", "acknowledgement", "we", "would", "like", "thank", "Jernej", "Barbi", "Kiaran", "Ritchie", "share", "animation", "keyframe", "anonymous", "reviewer", "comment", "suggestion", "work", "support", "DFG", "Research", "Center", "atheon", "mathematics", "Key", "Technologies", "Berlin", "appendix", "we", "explicitly", "describe", "basis", "function", "span", "-lrb-", "real", "-rrb-", "space", "solution", "euler?lagrange", "equation", "-lrb-", "12", "-rrb-", "we", "distinguish", "between", "two", "main", "case", "we", "note", "four", "special", "case", "brevity", "we", "set", "which", "frequency", "case", "oscillation", "first", "case", "mesh", "oscillate", "direction", "mode", "-lrb-", "square", "root", "-lrb-", "16", "-rrb-", "imaginary", "-rrb-", "basis", "function", "-lrb-", "-rrb-", "??", "cos", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "??", "sin", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "cos", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "sin", "-lrb-", "-rrb-", "second", "case", "mesh", "exponentially", "decay", "grow", "direction", "basis", "function", "-lrb-", "-rrb-", "-lrb-", "??", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "??", "??", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "??", "-rrb-", "special", "case", "-lrb-", "-rrb-", "cos", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "sin", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "cos", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "sin", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "case", "-lrb-", "-rrb-", "b-spline", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-" ],
  "content" : "Moreover, splines are designed to produce functions with high fairness (e.g. functions with few extrema and inflection points), whereas the motion of objects or characters is often oscillatory. time can have a large impact on the state of the system at a later time. Such techniques calculate acting forces that minimize an objective functional while guaranteeing that the resulting motion satisfies prescribed spacetime constraints, e.g. interpolates a set of keyframes. Resulting forces are optimally distributed over the whole animation and show effects like squash-and-stretch, timing, or anticipation that are desired in animation. The main features of our scheme are that it achieves interactive response times and produces explicit time-continuous parametrizations of the motion. Thirdly, we fully decouple the linearized spacetime constraint problems in the reduced space. At the heart of our technique is an efficient algorithm for the computation of wiggly splines based on a closed-form representation of the wiggly splines. We show that, as B-splines are composed of polynomials, wiggly splines can be assembled from functions that describe damped and driven oscillations. To compute the explicit representation of a wiggly spline, our algorithm solves a linear system with a band structure and of small size, which depends on the number of keyframes. As a result, the computation is robust (even for extreme parameter values) and produces ? 10 k wiggly splines per second on a custom laptop (with an i7 quad-core 2.2 GHz CPU) even without using parallelization. Their example of a jump of the lamp Luxo nicely demonstrates the benefits of this approach. Explicit derivatives for different physical systems can be obtained through the adjoint method, see [McNamara et al. 2004; Wojtan et al. 2006; Barbi c et al. 2009]. [Nickell 1976; Idelsohn and Cardona 1985; Krysl et al. 2001]. Based on an efficient representation of the forces in the reduced space, Barbi c and James [2005] obtained real-time rates for forward simulation of elastic solids. Kim and James [2009] used model reduction to speed up the calculation of large simulations for animation, by skipping full steps if the reduced step satisfies an accuracy condition. The reduced model is not built in a preprocess, but online as the simulation progresses. Reduced spaces have also been used for spacetime constraints. However, our method allows working with larger reduced spaces then theirs. The variational problem for geodesics in shape spaces has a comparable complexity and solvers need to deal with varying curves in a shape spaces, as well. We keep the presentation of our approach general so that it covers a broad class of discrete deformable objects; the specific setting we use for our experiments is treated in Section 5. where M is a mass matrix and G,D, and F represent the inner forces, the damping, and the outer forces that act on x. [Terzopoulos et al. 1987; Pentland and Williams 1989; Shabana 1997; Baraff and Witkin 1998; Barbi c and James 2005; Chao et al. 2010]. To approximate G around a state x, we expand where u = x ? x, G ? = G( x), and K = ?u ? G | x is the stiffness matrix. ? With these approximations the equations of motion take the form The matrix M is symmetric and positive definite. Furthermore, we assume that K is symmetric, which is the case for most models of elasticity considered in graphics (e.g. for hyperelastic materials). In most of our experiments, we used a reduced shape space instead of the full space R 3n . Our reasons for doing so are threefold. Firstly, the accurate representation of a geometry usually needs high dimensional discrete representation whereas animations often require only a fraction of the degrees of freedom, cf. [Kim and James 2009]. Thirdly, reduced spaces cut off high frequency modes and thereby lower the stiffness of the optimization problem which, in turn, increases the numerical robustness of the resulting method. Our construction uses the keyframes and modes of oscillation around the keyframes. At this point, we keep the presentation independent of the particular choice of a basis and postpone the discussion of our construction of such a basis to Section 5. Let U be a 3n?d-matrix whose columns are the basis vectors. Then, U maps coordinates q in the reduced space to the u-coordinates in R 3n u = U q. The reduced mass and stiffness matrices are This last equation follows from multiplying (3) with U T and using (4). For our purposes it is convenient to choose a specific basis in the reduced space, namely a basis in which the reduced mass and stiffness matrices are diagonal matrices. This can be achieved by solving the (low-dimensional) generalized eigenvalue problem We assemble the eigenvectors ? i to form the rows of a matrix ? and denote coordinates with respect to the basis {? i } by ?. The transformations from ? to the qand the u-coordinates are where U  ? = U ?, and the representation of the mass and the stiffness matrix in the ?-coordinates is where ? is the diagonal matrix whose diagonal entries are the eigenvalues ? i . Then, the reduced equations of motion take the form where g = U  ? T G. ? The advantage of using the ?-coordinates is that (9) is a system of d independent ODEs, whereas (5) is a coupled system. In this section, we describe the basis of our approach: a model reduction of the spacetime constraint problem for deformable objects. In Section 4.1, we formulate a linearized spacetime constraint problem in the reduced space and show that in the ?-coordinates it decouples to d one-dimensional spacetime problems. In Section 4.2, we derive a scheme for the computation of the exact solution of the one-dimensional problem, which amounts to solving a lowdimensional linear system with a band structure. Section 4.3 describes how we construct the final motion by blending a number of solutions of linearized problems. In Section 4.4 we give an outline of the algorithm and divide it into a preprocess and an interactive phase in which the animation is edited. , X m at times t 0 , t 1 , ... , t m , where a motion is optimal if the forces required to generate the motion have minimal spacetime L 2 -norm (integral over the squared norm of the forces over all points of the deformable object and the time interval) among all competitors. For uniqueness of the solution, we additionally impose boundary conditions on the motion. For example, we fix the initial and final velocities x(t  ? 0 ) = Y 0 and x(t  ? m ) = Y m . Alternatively, interpolation of second derivatives at the boundary and circular motions are possible. Let us assume that the reduced space contains all keyframes X k and the vectors Y 0 and Y m . To restrict the spacetime problem to a reduced space, we allow only forces that are contained in the reduced space, and to linearize the problem, we assume that the dynamics are described by linearized equations of motion. The components ? k of the keyframes in this basis satisfy U  ? ? k = X k ? x, which follows from (7). Multiplying the equation with U  ? T M and using (8) shows that this is equivalent to ? k = U  ? T M (X k ? x). Similarly, the vectors Y 0 and Y m transform by ? 0 = U  ? T M Y 0 and ? m = U  ? T M Y m . The norm we use in (10) is simply the standard norm of R d . Since the mass matrix in the ?-coordinates is the identity matrix, this norm is a discrete L 2 -norm for functions on the deformable object. The advantage of using the ?-coordinates is that the problem decouples, i.e. component functions ? i (t) and ? j (t) do not influence each other (for i = j). Hence, we only need to solve the one-dimensional problems subject to ? i (t k ) = (? k ) i ? k ? {0, 1, ... , m}, ?  ? i (t 0 ) = (? 0 ) i , and ?  ? i (t m ) = (? m ) i , for all i ? {1, 2, ... Here we set ? i = 2 1 (? + ? ? i ). Once a solution ?(t) in the reduced space is computed, the matrix U  ? maps ?(t) to a motion u(t) in R 3n , see also eq. Kass and Anderson [2008] considered the one-dimensional spacetime constraint problem (11) and called the solutions wiggly splines. Here we propose an alternative scheme to solve the problem based on a closed-form representation of the wiggly splines. The Euler-Lagrange equation of the one-dimensional problem (11) is the fourth order ODE This can be verified by a lengthy but straightforward calculation. The solutions of this equation form a 4-dimensional (affine) vector space. The type of functions that are in this space depends on relations of ? i and ? i . We classify these different types into six  cases and explicitly list basis functions {b i 1 (t), b 2 i (t), b 3 i (t), b i 4 (t)} that span the spaces of solutions for all cases in the appendix. It follows that the restriction of the minimizer to any interval [t k?1 , t k ] is a combination of the basis functions. We denote by ? i,k (t) the restriction of ? i (t) to the interval [t k?1 , t k ]. Then, for every k ? {1, 2, ... , m} there are four coefficients w i,k 1 , w i,k 2 , w i,k 3 , and w i,k 4 such that ? i (t) |[t k?1 ,t k ] = ? i,k (t) = l=1 4 w i,k l b l i (t) ? c i , where c i = g i / |? i | if ? i = 0 and c i = 0 if ? i = 0. , m} and l ? {1, 2, 3, 4}. for all k ? {1, 2, ... Together these 4 m linear equations determine a unique spline ? i (t). Since m is typically small (e.g. m = 10), solving such a system requires only fractions of a ms; even on a custom laptop and without parallelization, one can compute 10 k wiggly splines within a second. Our algorithm directly generalizes to the calculation of complex wiggly splines. The space of complex solutions of the Euler-Lagrange The proposed computation of the wiggly splines has three major advantages over a finite difference scheme. The first is that the result is a wiggly spline in closed form, not just an approximation. The second is a significantly lower computational cost. Roughly speaking, the problem with stability is that the continuous equation is stable, but once continuous derivatives are replaced by finite differences, stability is no longer guaranteed. Frequencies higher than those representable at the used sampling rate can destabilize the equation. For a throughout discussion of the stability problem, we refer to Kass and Anderson [2008]. To counteract such problems, we use the fact that the desired motion interpolates the keyframes. We expand the inner forces around every keyframe X j and get (m + 1) linearized equations of motion. Then, we solve the corresponding linearized spacetime problems to compute (m + 1) motions x j (t). In our implementation, we used only the motion x j (t) in the interval [t j ?(t j ?t j?1 )/4, t j +(t j+1 ? t j )/4] and blended in the intervals [t j + (t j+1 ? t j )/4, t j+1 ? (t j+1 ? t j )/4]. However, for our examples, we did not use such a technique. We divide the computation into two parts: a preprocess and an interactive editing phase. The following is shifted to the preprocess 1. a basis of the reduced space is calculated and stored in the matrix U 2. for every keyframe, the mass and stiffness matrices M and K and their reduced counterparts M  ? and K  ? are set up 3. for every pair of reduced matrices M  ? and K  ? the eigenvalue problem (6) is fully solved and the matrices ? and ? as well as the vector g are set up Then, the interactive phase begins. To compute the animation, we only need to compute the (m + 1) motions and blend them to get the final motion. Editing operations to change ? physical parameters, like material stiffness or damping coefficients  ? boundary conditions ? times of the keyframes ? positions in space of keyframes require only a recomputation of the wiggly splines, hence take only fractions of a second, as well. Additional effort is required for modeling or adding a keyframe. However, we do not need to rerun the whole preprocess. Instead, we can keep the reduced space, which was computed in the preprocess, and add some basis vectors. Similarly, we only need to compute the stiffness matrix K and mass matrix M of the new (or modified) keyframe and we keep the (unreduced) matrices of all other keyframes. Only the operations in the reduced space (that is setting up the reduced matrices and solving the reduced eigenvalue problems) must be carried out for all keyframes. Since the reduced space is low-dimensional, these operations come at low computational costs. Alternatively to augmenting the reduced space, one can project the new (or modeled) keyframe into the reduced space. Such a strategy further reduces the computation effort but modifies the keyframe. A nice approach is to create or model new keyframes directly in the reduced space. Our technique can be used for different types of discrete elastic objects; for our implementation, we decided to use Discrete Shells [Grinspun et al. 2003; Bergou et al. 2007]. Discrete Shells are formulated for triangle meshes, which then represent the middle surface of an elastic shell. The potential energy of the inner forces splits into two parts, a flexural (or bending) and a membrane (or stretching) energy. For explicit formulae we refer to [Grinspun et al. 2003]. To compute the derivatives, we used the automaticdifferentiation library ADOL-C, see [Griewank et al. 1996]. In most of our experiments, we set both material parameters (weighting of the flexural and membrane energies) to the value 1, and, additionally, we scaled the meshes to a diameter of 10. The latter is important since the membrane and flexural energies scale differently. An advantage of using the Discrete Shells, compared to using elastic solids, is that we could directly use keyframes gener ated with a surface modeler, thus avoiding the need to generate and model keyframes with tet meshes. To construct the reduced space, we collect vectors in a set S and then use a SVD to obtain an orthonormal basis of the linear span of S. We store the basis in the matrix U . The set S consists of two parts: one collects the vectors pointing to the keyframes and the other contains 5-30 vibration modes of each of the keyframes. The computation of the vibration modes follows [Hildebrandt et al. 2012]. For this we set the keyframe to be the rest state of the discrete shells? potential energy and set up the Hessian K and the mass matrix. Then, we compute the modes corresponding to the lowest eigenfrequencies. These are solutions of the generalized sparse eigenvalue problem K ? i = ? i M ? i . In our experiments, this construction produced good results. We did not observe the typical artifacts that one gets when working with reduced spaces constructed from vibration modes around only one state. For small-size meshes, one can solve the full problem instead of using a reduced space. For example, we computed the motion of the block, see Figure 3 , with 450 vertices in the full 1350 dimensional space. This demonstrates that we can work with larger spaces compared to methods that solve the non-linear problem in a reduced space, like [Barbi c et al. 2009], and use 20-30 dimensional reduced spaces. The attached video shows five examples of motions produced with the proposed technique and Table 1 shows the size of the meshes and the reduced spaces as well as run times. In this section, a wiggly spline means a vector-valued spline that describes a motion and not a one-dimensional spline. The first example, the jumping block, is composed of three wiggly splines that interpolate four keyframes. This divides the motion into three parts: preparing the jump, jumping, and landing. During the first and the last part, the base of the block is fixed to the ground with equality constraints. Each of the three wiggly splines interpolates two successive keyframes and satisfies boundary conditions, which prescribe first derivatives (velocities) at all vertices of both keyframes. The prescribed velocities at the first keyframe vanish, and all vertices of the second keyframe, except those at the base, have a the same upwards pointing velocity. At the second keyframe the first and second wiggly spline meet. Therefore, the compound curve is differentiable at this keyframe. As a results, the motion anticipates the jump and the force required to accelerate the block is distributed over the time interval. This models a collision with ground. Since the base of the block is fixed in the third wiggly spline, the compound curve is continuous but not differentiable at the third keyframe. The effect is that there is no anticipation of the landing, the block collides with the ground. We show two motions of the jumping block with varying material stiffness (i.e., membrane and flexural energy scaled up with the same parameter). For comparison, a motion generated with cubic B-splines that satisfy the same interpolation and boundary conditions is shown. Whereas our motions show physical behavior, like waves that are traveling up and down the block, the B-spline animation only varies the length of the block. Some stills of the animation are shown in Fig. 3 . We want to note that since all four keyframes have the same geometry, this animation is produced from one linearized spacetime-constraint problem. The second example, the running bug, shows a walking cycle that is enriched with secondary motion. The primary motion interpolates 12 keyframes that form a walking cycle, which we took from the book [Ritchie et al. 2005]. The circular wiggly spline used here does not require any boundary conditions and is fully determined by the interpolation conditions. For this second motion, we used two keyframes and constrained a part of the models (gray area in Fig. 5 ) that has been carefully crafted and should not be affected by secondary motion. Then we computed a reduced space and added simple vector fields to the keyframes (black arrows). We used the projections of these vector fields into the reduced space as derivatives of the motion and forced the wiggly splines to interpolate them. The third example, shows a piece of cloth that first hangs on a line, then is blown into the air, and finally gets stuck on a cylinder. The motion is assembled from three wiggly splines. The first and the last wiggly spline satisfy equality constraints that fix parts of the piece of cloth to the line respectively the cylinder. The keyframes were generated by taking snapshots from three different forward simulations: cloth hanging on a line, cloth blown in the air, and cloth stuck on a cylinder. The forth example, shows a walking dinosaur ( Fig. 6 ). The motion is composed of five wiggly splines, one for each step. Each step is modeled with three keyframes and the foot on the ground is fixed with equality constraints. The boundary conditions for each of the wiggly splines are finite differences of the keyframes. For comparison we show results of the non-linear method of Barbi c et al. [2009]. To increase comparability, we used reduced spaces of approximately the same size. A difference of the methods is that their scheme does not interpolate, but approximates the keyframes. The original keyframes, they used are tet meshes that enclose the dinosaur; they used the triangle meshes only for rendering the animation. These tet meshes have 1.8 k vertices, hence are coarser then the triangle meshes, which have 28 k vertices. For our animation, we used the higher resolved triangle meshes. This explains why we need 500 s to construct the reduced space for the whole animation, while they need only 25 s. After the preprocess, our method needs 0.6 s to compute or update the animation, while their optimization takes 15 min. The last example is a live demo. It shows how we generate an animation of a dancing flour sack. The motion is generated by a circular wiggly spline that interpolates eight keyframes (made from 4 poses). The video shows how times of keyframes are adjusted and material parameters are varied. This demonstrates the interactive response times that our technique offers. The live demo is followed by demo of a wiggly spline editor. It illustrates the effect of variations of the frequency, the damping coefficient, the interpolation constraints, and the boundary conditions as well as a constant (gravitational) force. When creating keyframes with a surface modeler, it is preferable to use a physical-based modeler that takes the Discrete Shells energy into account. When using keyframes that were generated with other modelers (e.g. the bug and the dino models), we did an optimization routine to lower the Discrete Shells energy of the shapes. Explicitly, we minimize a weighted sum of the Discrete Shells energy and the least-squares distances of the vertices to their original position. We presented a technique that implements the spacetime constraints paradigm for animations of deformable objects. It combines physical realism with control over the animation. The main novelty of the approach is that it offers interactive response times, hence allows for interactive adjustment of physical parameters or editing of control parameters, like times of keyframes. After reduction, a number of one-dimensional variational problems need to be solved. The solutions of these problems are known as wiggly splines. A second main contribution of this paper is a fast and robust numerical scheme for computing wiggly splines that is based on an explicit representation of the wiggly splines. Without this efficient numerical scheme, our method would hardly be interactive. Our current implementation does not use parallelization or graphic cards. Still, the preprocess as well as the computation of the wiggly splines are highly parallelizable. In its current form, our scheme requires that every keyframe prescribes a pose for the whole object. Furthermore, we want to extend the scheme such that motions that do not interpolate, but only approximate the keyframes can be produced. A challenge for our scheme (and for schemes that follow the spacetime constraint paradigm in general) is the integration of contact and collision handling. Currently, only limited handling of contact is possible. In our experiments, we prescribe incoming and outgoing velocities at a keyframe and fix parts on the object in space by equality constraints to model the contacts of the landing block, the walking dino (whose feet hit the ground), and the cloth hitting the cylinder. Furthermore, we expect to see more application of the wiggly splines. We see them as a powerful alternative to traditional splines that offers oscillatory behavior. Acknowledgements. We would like to thank Jernej Barbi c and Kiaran Ritchie for sharing their animations and keyframes and the anonymous reviewers for their comments and suggestions. This work was supported by the DFG Research Center M ATHEON ?Mathematics for Key Technologies? in Berlin. In this appendix, we explicitly describe the basis functions spanning the (real) spaces of solutions of the Euler?Lagrange equation (12). We distinguish between the two main cases and we note four special cases. For brevity, we set ? i = |? i 2 ? ? i |, which is the frequency in the case of oscillation. In the first case, ? i 2 ? ? i < 0, the mesh oscillates in the direction of the mode ? i (the square root in (16) is imaginary) and the basis functions are: b 1 i (t) = e ?? i t cos (? i t) b i 2 (t) = e ?? i t sin (? i t) b 3 i (t) = e ? i t cos (? i t) b i 4 (t) = e ? i t sin (? i t) In the second case, ? i 2 ? ? i > 0, the mesh exponentially decays or grows in the direction of ? i and the basis functions are:\n        b 1 i (t) = e (?? i +? i )t b 2 i (t) = e (?? i ?? i )t b 3 i (t) = e (? i +? i )t b i 4 (t) = e (? i ?? i )t The special cases are 1. ? i = 0 and ? i > 0 : b 1 i (t) = cos (? i t) b 2 i (t) = sin (? i t) b 3 i (t) = t cos (? i t) b i 4 (t) = t sin (? i t) 2. ? i = 0 and ? i < 0 or ? i = 0 and ? i > 0 : ? ? b i 1 (t) = e ? ? |? i |t b 2 i (t) = e ? |? i |t b 3 i (t) = t e ? |? i |t b 4 i (t) = t e |? i |t 3. ? i = 0 and ? i = 0 : b 1 i (t) = 1 b 2 i (t) = t b 3 i (t) = e ?2? 4? i 2 i t b i 4 (t) = e 4? 2? i 2 i t 4. ? i = ? i = 0 : in this case ? i (t) is a B-spline b i 1 (t) = 1 b i 2 (t) = t b 3 i (t) = t 2 b i 4 (t) = t 3",
  "resources" : [ ]
}