{
  "uri" : "sig2006-p519-weiss_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2006/p519-weiss_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Fast Median and Bilateral Filtering",
    "published" : "2006",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Ben-Weiss",
      "name" : "Ben",
      "surname" : "Weiss"
    } ]
  },
  "bagOfWords" : [ "median", "filter", "introduce", "tukey", "-lsb-", "1977", "-rsb-", "over", "year", "tremendous", "effort", "have", "go", "its", "optimization", "refinement", "provide", "mechanism", "reduce", "image", "noise", "while", "preserve", "edge", "more", "effectively", "than", "linear", "smoothing", "filter", "many", "common", "image-processing", "technique", "rank-order", "morphological", "processing", "variation", "basic", "median", "algorithm", "filter", "can", "use", "steppingstone", "more", "sophisticated", "effect", "however", "due", "exist", "algorithm", "fundamental", "slowness", "its", "practical", "use", "have", "typically", "be", "restrict", "small", "kernel", "size", "and/or", "low-resolution", "image", "________________________________________", "ben@shellandslate.com", "Adobe", "Photoshop", "cs2", "de", "facto", "standard", "highperformance", "image", "processing", "median", "filter", "scale", "radius", "100", "filter", "exhibit", "roughly", "-lrb-", "-rrb-", "runtime", "per", "pixel", "constraint", "which", "significantly", "reduce", "its", "performance", "large", "filter", "kernel", "variety", "-lrb-", "-rrb-", "algorithm", "well", "know", "-lrb-", "e.g.", "huang", "1981", "-rrb-", "obvious", "faster", "algorithm", "should", "exist", "median", "filter", "separable", "nor", "linear", "iterative", "strategy", "produce", "final", "result", "e.g.", "gaussian", "blur", "-lsb-", "heckbert", "1986", "-rsb-", "fast", "fourier", "transform", "-lsb-", "Cooley", "et", "al.", "1965", "-rsb-", "fast", "high-radius", "implementation", "would", "considerable", "theoretical", "practical", "value", "Gil", "et", "al.", "-lsb-", "1993", "-rsb-", "make", "significant", "progress", "tree-based", "-lrb-", "log", "-rrb-", "median-filtering", "algorithm", "its", "per-pixel", "branch", "nature", "render", "ill-suited", "deep-pipelined", "vector-capable", "modern", "processor", "other", "effort", "have", "resort", "massive", "parallelism", "presumption", "single", "processor", "insufficient", "accord", "Wu", "et", "al.", "-lsb-", "2003", "-rsb-", "...", "design", "parallel", "algorithm", "process", "-lsb-", "median", "filter", "-rsb-", "only", "way", "get", "real-time", "response", "Ranka", "et", "al.", "-lsb-", "1989", "-rsb-", "propose", "parallel", "algorithm", "processor-time", "complexity", "-lrb-", "log", "-rrb-", "curve", "actually", "scale", "worse", "than", "linear", "55", "-lrb-", "-rrb-", "point", "which", "increase", "radius", "correspond", "increase", "computation", "we", "algorithm", "overcome", "all", "limitation", "achieve", "-lrb-", "log", "-rrb-", "runtime", "per", "pixel", "8-bit", "datum", "both", "median", "bilateral", "filter", "fully", "vectorizable", "use", "just", "-lrb-", "-rrb-", "storage", "also", "adapt", "-lrb-", "log", "-rrb-", "algorithm", "arbitrary-depth", "image", "which", "run", "up", "twenty", "time", "fast", "photoshop?s", "16-bit", "median", "filter", "we", "knowledge", "present", "-lrb-", "log", "-rrb-", "algorithm", "most", "efficient", "2d", "median", "filter", "yet", "develop", "process", "8-bit", "datum", "up", "fifty", "time", "faster", "than", "Photoshop?s", "median", "filter", "bilateral", "filter", "introduce", "Tomasi", "et", "al.", "-lsb-", "1998", "-rsb-", "non-iterative", "means", "smooth", "image", "while", "retain", "edge", "detail", "involve", "weighted", "convolution", "which", "weight", "each", "pixel", "depend", "only", "its", "distance", "from", "center", "pixel", "also", "its", "relative", "intensity", "describe", "bilateral", "filter", "have", "nominal", "-lrb-", "-rrb-", "computational", "cost", "per", "pixel", "Photoshop", "cs2?s", "16-bit", "surface", "blur", "filter", "reflect", "-lrb-", "-rrb-", "complexity", "become", "unusably", "slow", "even", "moderate", "radius", "8-bit", "datum", "Photoshop?s", "surface", "blur", "exhibit", "performance", "curve", "nearly", "identical", "its", "8-bit", "median", "filter", "suggest", "share", "same", "core", "-lrb-", "-rrb-", "algorithm", "Durand", "et", "al.", "-lsb-", "2002", "-rsb-", "develop", "much", "more", "efficient", "technique", "refine", "accelerate", "Paris", "et", "al.", "-lsb-", "2006", "-rsb-", "durand?s", "method", "approximate", "bilateral", "filter", "subsampled", "copy", "image", "discrete", "intensity", "kernel", "recombine", "result", "use", "linear", "interpolation", "have", "paradoxical", "property", "become", "faster", "radius", "increase", "-lrb-", "due", "greater", "subsampling", "-rrb-", "also", "have", "some", "potential", "drawback", "one", "translation-invariant", "exact", "output", "dependent", "phase", "subsampling", "grid", "also", "discretization", "may", "lead", "further", "loss", "precision", "particularly", "high-dynamic-range", "image", "narrow", "intensity-weighting", "function", "we", "bilateral", "filter", "algorithm", "maintain", "high", "resolution", "both", "space", "intensity", "translation-invariant", "base", "box", "spatial", "kernel", "which", "can", "iterate", "yield", "smooth", "spatial", "falloff", "derive", "from", "same", "core", "algorithm", "we", "fast", "-lrb-", "log", "-rrb-", "median", "filter", "adapt", "16-bit", "HDR", "datum", "minimal", "loss", "precision", "we", "approach", "paper", "first", "illustrate", "conventional", "-lrb-", "-rrb-", "median", "algorithm", "8-bit", "image", "analyze", "its", "performance", "limitation", "we", "show", "step", "how", "improve", "first", "constant", "factor", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "algorithm", "from", "-lrb-", "log", "-rrb-", "algorithm", "we", "show", "how", "we", "approach", "adapt", "higher", "bit-depth", "datum", "16-bit", "HDR", "floating-point", "finally", "we", "show", "how", "algorithm", "can", "adapt", "perform", "bilateral", "filter", "compare", "previous", "method" ],
  "content" : "The median filter was introduced by Tukey [1977], and over the years tremendous effort has gone into its optimization and refinement. It provides a mechanism for reducing image noise, while preserving edges more effectively than a linear smoothing filter. Many common image-processing techniques such as rank-order and morphological processing are variations on the basic median algorithm, and the filter can be used as a steppingstone to more sophisticated effects. However, due to existing algorithms? fundamental slowness, its practical use has typically been restricted to small kernel sizes and/or low-resolution images. ________________________________________ ? ben@shellandslate.com Adobe ? Photoshop ? CS2 is the de facto standard for highperformance image processing, with a median filter that scales to radius 100. This filter exhibits roughly O(r) runtime per pixel, a constraint which significantly reduces its performance for large filtering kernels. A variety of O(r) algorithms are well known (e.g. Huang 1981), but it is not obvious that a faster algorithm should exist. The median filter is not separable, nor is it linear, and there is no iterative strategy for producing the final result, as there is with e.g. Gaussian Blur [Heckbert 1986], or the Fast Fourier Transform [Cooley et al. 1965]. A fast, high-radius implementation would be of considerable theoretical and practical value. Gil et al. [1993] made significant progress with a tree-based O(log 2 r) median-filtering algorithm, but its per-pixel branching nature renders it ill-suited for deep-pipelined, vector-capable modern processors. Other efforts have resorted to massive parallelism on the presumption that a single processor is insufficient: according to Wu et al. [2003], ?... designing a parallel algorithm to process [the median filter] is the only way to get a real-time response. ? Ranka et al. [1989] proposed a parallel algorithm with a processor-time complexity of O(log 4 r), but this curve actually scales worse than linear for r < 55 (= e 4 ), the point at which a 1% increase in radius corresponds to a 1% increase in computation. Our algorithm overcomes all of these limitations and achieves O(log r) runtime per pixel on 8-bit data, for both median and bilateral filtering. It is fully vectorizable and uses just O(r) storage. It also adapts as an O(log 2 r) algorithm to arbitrary-depth images, on which it runs up to twenty times as fast as Photoshop?s 16-bit Median filter. To our knowledge, the presented O(log r) algorithm is the most efficient 2D median filter yet developed, and processes 8-bit data up to fifty times faster than Photoshop?s Median filter. The Bilateral filter was introduced by Tomasi et al. [1998] as a non-iterative means of smoothing images while retaining edge detail. It involves a weighted convolution in which the weight for each pixel depends not only on its distance from the center pixel, but also its relative intensity. As described, the bilateral filter has nominal O(r 2 ) computational cost per pixel. Photoshop ? CS2?s 16-bit Surface Blur filter reflects this O(r 2 ) complexity, and becomes unusably slow for even moderate radii. On 8-bit data, Photoshop?s Surface Blur exhibits a performance curve nearly identical to its 8-bit Median filter, suggesting that they share the same core O(r) algorithm. Durand et al. [2002] developed a much more efficient technique, refined and accelerated by Paris et al. [2006]. Durand?s method approximates the bilateral by filtering subsampled copies of the image with discrete intensity kernels, and recombining the results using linear interpolation. It has the paradoxical property of becoming faster as the radius increases (due to greater subsampling), but also has some potential drawbacks. For one, it is not translation-invariant: the exact output is dependent on the phase of the subsampling grid. Also, the discretization may lead to a further loss of precision, particularly on high-dynamic-range images with narrow intensity-weighting functions. Our bilateral filtering algorithm maintains high resolution in both space and intensity, and is translation-invariant. It is based on a box spatial kernel, which can be iterated to yield smooth spatial falloff. It is derived from the same core algorithm as our fast O(log r) median filter, and adapts to 16-bit and HDR data with minimal loss of precision. Our approach in this paper will be first to illustrate the conventional O(r) median algorithm for 8-bit images, and analyze its performance and limitations. Then we will show in steps how to improve it; first by constant factors, then into O(?r) and O(?r) algorithms, and from there into an O(log r) algorithm. We will show how our approach adapts to higher bit-depth data, such as 16-bit and HDR floating-point. Finally, we will show how the algorithm can be adapted to perform bilateral filtering, and compare it with previous methods.",
  "resources" : [ ]
}