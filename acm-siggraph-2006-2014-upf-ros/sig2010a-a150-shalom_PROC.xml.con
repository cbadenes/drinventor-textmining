{
  "uri" : "sig2010a-a150-shalom_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2010a/a150-shalom_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Cone Carving for Surface Reconstruction",
    "published" : "2010",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Shy-Shalom",
      "name" : "Shy",
      "surname" : "Shalom"
    }, {
      "uri" : "http://drinventor/Ariel-Shamir",
      "name" : "Ariel",
      "surname" : "Shamir"
    }, {
      "uri" : "http://drinventor/Hao Zhang-null",
      "name" : "Hao Zhang",
      "surname" : null
    }, {
      "uri" : "http://drinventor/Daniel-Cohen-Or",
      "name" : "Daniel",
      "surname" : "Cohen-Or"
    } ]
  },
  "bagOfWords" : [ "we", "have", "test", "we", "algorithm", "several", "challenging", "example", "term", "miss", "part", "self", "occlusion", "where", "test", "datum", "be", "either", "scan", "take", "from", "aim@shape", "shape", "repository", "artificial", "point", "cloud", "use", "typically", "contain", "5,00014,000", "point", "algorithm", "implement", "C++", "GPU", "part", "use", "glsl", "CUDA", "we", "use", "Intel", "Core2", "Quad", "t9550", "Nvidia", "GeForce", "275", "GTX", "video", "card", "Table", "show", "timing", "result", "model", "show", "paper", "figure", "11", "we", "show", "several", "example", "we", "result", "we", "first", "show", "point", "set", "use", "splat", "give", "sense", "overall", "shape", "datum", "note", "object", "present", "challenge", "previous", "reconstruction", "algorithm", "since", "contain", "part", "inaccessible", "from", "outside", "sampling", "we", "compare", "we", "result", "three", "other", "algorithm", "radial", "basis", "function", "-lsb-", "Carr", "et", "al.", "2001", "-rsb-", "partition", "unity", "-lsb-", "Ohtake", "et", "al.", "2003", "-rsb-", "Poisson", "reconstruction", "-lsb-", "Kazhdan", "et", "al.", "2006", "-rsb-", "all", "method", "encounter", "problem", "misinterpret", "outside", "inside", "thus", "connect", "close", "part", "form", "wrong", "topology", "use", "we", "global", "visibility", "prior", "ambiguity", "solve", "correct", "topological", "interpretation", "give", "shape", "due", "blend", "characteristic", "all", "stage", "cone", "carve", "assumption", "base", "use", "visibility", "cone", "remain", "robust", "certain", "degree", "even", "when", "noise", "present", "however", "unlike", "Poisson", "reconstruction", "cone", "carve", "design", "smooth", "filter", "out", "noise", "sense", "effort", "filter", "out", "noise", "orthogonal", "problem", "deal", "miss", "datum", "any", "point-based", "noise", "filter", "algorithm", "could", "use", "prior", "reconstruction", "use", "cone", "carve", "Figure", "10", "present", "some", "reconstruction", "result", "under", "noise", "compare", "behavior", "cone", "carve", "base", "rbf", "Poisson", "reconstruction", "note", "although", "output", "surface", "from", "former", "indeed", "noisy", "topology", "object", "still", "correct", "-lrb-", "contrast", "Poisson", "-rrb-", "remain", "correct", "even", "under", "more", "severe", "level", "noise", "main", "disadvantage", "cone-carving", "current", "naive", "implementation", "quadratic", "therefore", "slow", "find", "cone", "boundary", "each", "point", "sample", "splatting", "all", "other", "point", "dataset", "use", "mean", "impractical", "larger", "datum", "set", "currently", "be", "produce", "Advanced", "spatial", "search", "structure", "well", "random", "sampling", "larger", "dataset", "can", "alleviate", "problem", "however", "convert", "linear", "time", "-lrb-", "e.g.", "use", "fix", "size", "neighborhood", "-rrb-", "still", "difficult", "main", "point", "cone", "carve", "utilize", "additional", "global", "information", "visibility", "scan", "datum", "general", "quality", "more", "important", "than", "speed", "surface", "reconstruction", "part", "long", "process", "datum", "collection", "which", "rarely", "interactive", "success", "cone", "carve", "also", "rely", "some", "tuning", "parameter", "three", "main", "stage", "be", "define", "parame", "ter", "cone", "creation", "stage", "cone", "distance", "blend", "stage", "choose", "between", "DTE", "dp", "cone", "creation", "stage", "we", "determine", "splat", "size", "each", "point", "base", "near", "number", "define", "k-nearest", "neighbor", "search", "pixel", "-lrb-", "section", "-rrb-", "Figure", "12", "show", "example", "cube", "render", "one", "point", "vary", "value", "near", "clear", "small", "value", "near", "create", "hole", "surface", "large", "value", "time", "consuming", "redundant", "create", "large", "overlap", "between", "splat", "practice", "we", "find", "near", "strike", "best", "balance", "correctly", "interpret", "shape", "all", "point", "all", "data-set", "cone", "distance", "blend", "stage", "-lrb-", "section", "-rrb-", "two", "parameter", "govern", "blending", "blend", "kernel", "neighborhood", "size", "threshold", "define", "support", "significant", "cluster", "size", "can", "see", "define", "size", "cardinality", "cluster", "define", "DTE", "Figure", "13", "illustrate", "effect", "change", "value", "reconstruction", "choose", "between", "DTE", "dp", "distance", "measure", "we", "use", "parameter", "Figure", "14", "show", "how", "change", "can", "effect", "reconstruction", "summary", "small", "set", "parameter", "control", "cone", "carve", "result", "however", "we", "have", "show", "all", "one", "example", "paper", "-lrb-", "Mannequin", "figure", "we", "use", "more", "sparsely", "sample", "-rrb-", "same", "set", "parameter", "value", "use", "govern", "one", "characteristic", "value", "point", "set", "namely", "what", "we", "define", "avg", "due", "blend", "characteristic", "all", "stage", "cone", "carve", "assumption", "base", "use", "visibility", "cone", "remain", "robust", "certain", "degree", "even", "when", "noise", "present", "however", "unlike", "Poisson", "reconstruction", "cone", "carve", "design", "smooth", "filter", "out", "noise", "sense", "effort", "filter", "out", "noise", "orthogonal", "problem", "deal", "miss", "datum", "any", "point-based", "noise", "filter", "algorithm", "could", "use", "prior", "reconstruction", "use", "cone", "carve", "Figure", "10", "present", "some", "reconstruction", "result", "under", "noise", "compare", "behavior", "cone", "carve", "base", "rbf", "Poisson", "reconstruction", "note", "although", "output", "surface", "from", "former", "indeed", "noisy", "topology", "object", "still", "correct", "-lrb-", "contrast", "Poisson", "-rrb-", "remain", "correct", "even", "under", "more", "severe", "level", "noise", "main", "disadvantage", "cone-carving", "current", "naive", "implementation", "quadratic", "therefore", "slow", "find", "cone", "boundary", "each", "point", "sample", "splatting", "all", "other", "point", "dataset", "use", "mean", "impractical", "larger", "datum", "set", "currently", "be", "produce", "Advanced", "spatial", "search", "structure", "well", "random", "sampling", "larger", "dataset", "can", "alleviate", "problem", "however", "convert", "linear", "time", "-lrb-", "e.g.", "use", "fix", "size", "neighborhood", "-rrb-", "still", "difficult", "main", "point", "cone", "carve", "utilize", "additional", "global", "information", "visibility", "scan", "datum", "general", "quality", "more", "important", "than", "speed", "surface", "reconstruction", "part", "long", "process", "datum", "collection", "which", "rarely", "interactive", "success", "cone", "carve", "also", "rely", "some", "tuning", "parameter", "three", "main", "stage", "be", "define", "parame", "ter", "cone", "creation", "stage", "cone", "distance", "blend", "stage", "choose", "between", "DTE", "dp", "cone", "creation", "stage", "we", "determine", "splat", "size", "each", "point", "base", "near", "number", "define", "k-nearest", "neighbor", "search", "pixel", "-lrb-", "section", "-rrb-", "Figure", "12", "show", "example", "cube", "render", "one", "point", "vary", "value", "near", "clear", "small", "value", "near", "create", "hole", "surface", "large", "value", "time", "consuming", "redundant", "create", "large", "overlap", "between", "splat", "practice", "we", "find", "near", "strike", "best", "balance", "correctly", "interpret", "shape", "all", "point", "all", "data-set", "cone", "distance", "blend", "stage", "-lrb-", "section", "-rrb-", "two", "parameter", "govern", "blending", "blend", "kernel", "neighborhood", "size", "threshold", "define", "support", "significant", "cluster", "size", "can", "see", "define", "size", "cardinality", "cluster", "define", "DTE", "Figure", "13", "illustrate", "effect", "change", "value", "reconstruction", "choose", "between", "DTE", "dp", "distance", "measure", "we", "use", "parameter", "Figure", "14", "show", "how", "change", "can", "effect", "reconstruction", "summary", "small", "set", "parameter", "control", "cone", "carve", "result", "however", "we", "have", "show", "all", "one", "example", "paper", "-lrb-", "Mannequin", "figure", "we", "use", "more", "sparsely", "sample", "-rrb-", "same", "set", "parameter", "value", "use", "govern", "one", "characteristic", "value", "point", "set", "namely", "what", "we", "define", "avg", "we", "have", "present", "cone", "carve", "enhance", "surface", "reconstruction", "technique", "from", "scan", "point", "cloud", "combine", "local", "positional", "global", "visibility", "information", "Cone", "carve", "utilize", "visibility", "exist", "point", "infer", "new", "point", "complete", "miss", "part", "capture", "model", "unlike", "previous", "attempt", "exploit", "visibility", "assist", "surface", "reconstruction", "here", "visibility", "take", "from", "inside-out", "perspective", "create", "visibility", "cone", "from", "point", "surface", "outward", "cone", "effective", "exactly", "where", "need", "most", "away", "from", "exist", "point", "where", "datum", "miss", "we", "have", "demonstrate", "effectiveness", "cone", "carve", "several", "reconstruction", "both", "synthetic", "input", "raw", "scan", "from", "commercial", "3d", "scanner", "speed", "major", "limitation", "we", "plan", "investigate", "few", "option", "accelerate", "cone", "carve", "create", "generalize", "cone", "only", "subset", "point", "utilize", "entire", "point-set", "trace", "silhouette", "create", "cone", "off-surface", "point", "only", "near", "miss", "part", "rather", "than", "across", "whole", "shape", "focus", "only", "part", "where", "make", "positive", "difference", "use", "pre-computed", "spatial", "datum", "structure", "accelerate", "various", "geometric", "computation", "computation", "dtc", "fully", "exploit", "highly", "parallel", "nature", "algorithm", "use", "GPU", "implementation", "opposite", "effect", "too", "large", "can", "insert", "outlier", "cluster", "while", "too", "small", "do", "blend", "enough", "information", "may", "determine", "wrong", "distance", "large", "can", "reject", "correct", "distance", "cluster", "too", "few", "count", "while", "small", "use", "outlier", "cone", "cluster", "we", "have", "use", "0.8", "avg", "all", "one", "example", "paper", "visibility", "cone", "may", "also", "prove", "useful", "problem", "other", "than", "surface", "reconstruction", "instance", "shape", "distribution", "cone", "can", "assist", "line", "point", "feature", "detection", "another", "interesting", "research", "direction", "would", "study", "potential", "visibility", "cone", "assist", "plan", "positioning", "scanning", "device", "order", "improve", "its", "coverage" ],
  "content" : "We have tested our algorithm on several challenging examples in terms of missing parts and self occlusions, where the tested data were either scanned, taken from the AIM@SHAPE shape repository or artificial. The point clouds used typically contain 5,00014,000 points. The algorithm is implemented in C++ and the GPU part using GLSL and CUDA. We used Intel Core2 Quad T9550 with an Nvidia GeForce 275 GTX video card. Table 1 shows the timing results for the models shown in the paper. In Figures 11 we show several examples of our results. We first show the point set using splats to give a sense of the overall shape and data. Note that these objects present a challenge to previous reconstruction algorithms, since they contain parts that are inaccessible from the outside for sampling. We compare our results to three other algorithms: Radial Basis functions [Carr et al. 2001], Partition of unity [Ohtake et al. 2003], and Poisson reconstruction [Kazhdan et al. 2006]. All these methods encounter problems with misinterpreting the outside as inside and thus connecting close parts to form wrong topology. Using our global visibility prior these ambiguities are solved, and a correct topological interpretation is given to the shape. Due to the blending characteristics in all stages of cone carving, the assumptions at the base of using visibility cones remain robust to a certain degree even when noise is present. However, unlike Poisson reconstruction, cone carving is not designed to smooth or filter out noise. In a sense, the effort to filter out noise is orthogonal to the problem of dealing with missing data, and any point-based noise filtering algorithm could be used prior to reconstruction using cone carving. Figure 10 presents some reconstruction results under noise and compares the behavior of cone carving based RBF with that of Poisson reconstruction. Note that although the output surface from the former is indeed noisy, the topology of the object is still correct (in contrast to Poisson) and remains correct even under more severe level of noise. The main disadvantage of cone-carving is that the current naive implementation is quadratic, and therefore slow. To find the cone boundary for each point sample, splatting of all other points in the dataset is used. This means it is impractical for the larger data sets  currently being produced. Advanced spatial search structures as well as random sampling on larger datasets can alleviate this problem. However, converting it to linear time (e.g. using fixed size neighborhoods) will still be difficult as the main point of cone carving is utilizing additional global information: the visibility of the scanned data. In general, quality is more important than speed in surface reconstruction, as it is part of a long process of data collection, which is rarely interactive. The success of cone carving also relies on some tuning of parameters. There are three main stages that were defined by parame- ters: the cone creation stage, the cone distance blending stage and choosing between DTE and DP. In the cone creation stage we determine the splat size of each point based on N near . This number defines the k-nearest neighbor search for pixels (Section 4). Figure 12 shows an example of the cube rendering for one point for varying values of N near . It is clear that a small value for N near creates holes in the surface, but a large value is time consuming and redundant creating large overlaps between splats. In practice, we found N near = 3 strikes the best balance, correctly interpreting the shape for all points in all data-sets. At the cone distance blending stage (Section 5), two parameters govern the blending: r, the blending kernel neighborhood size, and k the threshold defining the support for a significant cluster size. These can be seen as defining the size and cardinality of the cluster that defines DTE . Figure 13 illustrates the effect of changing these values on the reconstruction. For choosing between the DTE and DP distance measures we use a parameter ?. Figure 14 shows how changing ? can effect the reconstruction. In summary, there is a small set of parameters control cone carving results. However, we have shown that in all but one example in this paper (for the Mannequin figure we used k = 2 as it is more sparsely sampled) the same set of parameter values was used. These are governed by one characteristic value of the point set, namely, what we defined as d avg . Due to the blending characteristics in all stages of cone carving, the assumptions at the base of using visibility cones remain robust to a certain degree even when noise is present. However, unlike Poisson reconstruction, cone carving is not designed to smooth or filter out noise. In a sense, the effort to filter out noise is orthogonal to the problem of dealing with missing data, and any point-based noise filtering algorithm could be used prior to reconstruction using cone carving. Figure 10 presents some reconstruction results under noise and compares the behavior of cone carving based RBF with that of Poisson reconstruction. Note that although the output surface from the former is indeed noisy, the topology of the object is still correct (in contrast to Poisson) and remains correct even under more severe level of noise. The main disadvantage of cone-carving is that the current naive implementation is quadratic, and therefore slow. To find the cone boundary for each point sample, splatting of all other points in the dataset is used. This means it is impractical for the larger data sets  currently being produced. Advanced spatial search structures as well as random sampling on larger datasets can alleviate this problem. However, converting it to linear time (e.g. using fixed size neighborhoods) will still be difficult as the main point of cone carving is utilizing additional global information: the visibility of the scanned data. In general, quality is more important than speed in surface reconstruction, as it is part of a long process of data collection, which is rarely interactive. The success of cone carving also relies on some tuning of parameters. There are three main stages that were defined by parame- ters: the cone creation stage, the cone distance blending stage and choosing between DTE and DP. In the cone creation stage we determine the splat size of each point based on N near . This number defines the k-nearest neighbor search for pixels (Section 4). Figure 12 shows an example of the cube rendering for one point for varying values of N near . It is clear that a small value for N near creates holes in the surface, but a large value is time consuming and redundant creating large overlaps between splats. In practice, we found N near = 3 strikes the best balance, correctly interpreting the shape for all points in all data-sets. At the cone distance blending stage (Section 5), two parameters govern the blending: r, the blending kernel neighborhood size, and k the threshold defining the support for a significant cluster size. These can be seen as defining the size and cardinality of the cluster that defines DTE . Figure 13 illustrates the effect of changing these values on the reconstruction. For choosing between the DTE and DP distance measures we use a parameter ?. Figure 14 shows how changing ? can effect the reconstruction. In summary, there is a small set of parameters control cone carving results. However, we have shown that in all but one example in this paper (for the Mannequin figure we used k = 2 as it is more sparsely sampled) the same set of parameter values was used. These are governed by one characteristic value of the point set, namely, what we defined as d avg . We have presented cone carving, enhancing surface reconstruction techniques from scanned point clouds by combining local positional and global visibility information. Cone carving utilizes the visibility of the existing points to infer new points that complete the missing parts of the captured model. Unlike previous attempts to exploit visibility to assist surface reconstruction, here the visibility is taken from an inside-out perspective, creating visibility cones from points on the surface outward. These cones are effective exactly where they are needed the most: away from existing points, where data is missing. We have demonstrated the effectiveness of cone carving in several reconstructions of both synthetic input and raw scans from a commercial 3D scanner. With speed as the major limitation, we plan to investigate a few options to accelerate cone carving: ? Creating generalized cones only for a subset of points, but utilizing the entire point-set for tracing their silhouettes. ? Creating cones and off-surface points only near missing parts rather than across the whole shape and focus only on the parts where they make a positive difference. ? Using a pre-computed spatial data structures to accelerate various geometric computations such as the computation of DTC. ? Fully exploiting the highly parallel nature of the algorithm using a GPU implementation. opposite effects. Too large r can insert outliers to the cluster while too small r does not blend enough information and may determine a wrong distance. Large k can reject the correct distance cluster with too few counts, while small k will use outlier cones clusters. We have used k = 5, r = 0.8 ? d avg in all but one of the examples in the paper. Visibility cones may also prove to be useful for problems other than surface reconstruction. For instance, the shape and distribution of the cones can assist in line and point feature detection. Another interesting research direction would be to study the potential of the visibility cones to assist in planning the positioning of the scanning device in order to improve its coverage.",
  "resources" : [ ]
}