{
  "uri" : "sig2011a-a123-bokeloh_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2011a/a123-bokeloh_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Pattern-Aware Shape Deformation Using Sliding Dockers",
    "published" : "2011",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Martin-Bokeloh",
      "name" : "Martin",
      "surname" : "Bokeloh"
    }, {
      "uri" : "http://drinventor/Michael-Wand",
      "name" : "Michael",
      "surname" : "Wand"
    }, {
      "uri" : "http://drinventor/Vladlen-Koltun",
      "name" : "Vladlen",
      "surname" : "Koltun"
    }, {
      "uri" : "http://drinventor/Hans-Peter-Seidel",
      "name" : "Hans-Peter",
      "surname" : "Seidel"
    } ]
  },
  "bagOfWords" : [ "we", "have", "implement", "describe", "shape", "editing", "system", "C++", "evaluate", "commodity", "workstation", "Intel", "Core-2", "Quad", "CPU", "2.6", "GHz", "core", "8gb", "RAM", "we", "implemen", "tation", "single-threaded", "benchmark", "datum", "we", "have", "collect", "number", "model", "from", "commercial", "3d", "model", "library", "we", "use", "model", "from", "Digimation", "Archive", "-lrb-", "www.digimation.com", "-rrb-", "we", "also", "include", "example", "from", "-lsb-", "Kraevoy", "et", "al.", "2008", "-rsb-", "-lsb-", "Bokeloh", "et", "al.", "2010", "-rsb-", "model", "large", "triangle", "we", "perform", "one", "more", "1:4", "subdivision", "step", "obtain", "sufficiently", "densely", "sample", "mesh", "even", "elastic", "deformation", "bend", "can", "accommodate", "result", "model", "output", "collection", "triangle", "generally", "do", "form", "watertight", "mesh", "thus", "general", "polygon", "soup", "figure", "show", "number", "example", "model", "have", "be", "edit", "use", "we", "approach", "please", "refer", "accompany", "video", "demonstration", "interactive", "editing", "deformation", "result", "produce", "technique", "quite", "plausible", "many", "example", "would", "challenge", "identify", "original", "model", "without", "highlight", "some", "minor", "artifact", "can", "see", "due", "small-scale", "irregularity", "input", "geometry", "which", "cause", "some", "pattern", "only", "detect", "chunk", "lead", "small", "amount", "residual", "deformation", "blue", "example", "use", "only", "elastic", "energy", "term", "-lrb-", "equation", "-rrb-", "discrete", "relaxation", "still", "enable", "despite", "strong", "bend", "we", "approach", "reliably", "adapt", "repetition", "count", "pattern", "without", "visible", "seam", "discontinuity", "gap", "similar", "artifact", "some", "model", "triangulation", "become", "visible", "could", "resolve", "better", "adaptive", "mesh", "subdivision", "scheme", "parameter", "we", "algorithm", "very", "sensitive", "parameter", "setting", "we", "mostly", "use", "default", "parameter", "everywhere", "only", "one", "parameter", "have", "strong", "effect", "quality", "result", "error", "threshold", "match", "approximately", "symmetric", "line", "feature", "complex", "model", "we", "also", "increase", "resolution", "subspace", "deformation", "model", "-lrb-", "Westminster", "Palace", "model", "use", "2.5", "-lrb-", "-rrb-", "instead", "-lrb-", "-rrb-", "which", "lead", "reduce", "interactive", "frame-rate", "-rrb-", "lower", "minimum", "size", "relevant", "feature", "Timings", "show", "video", "editing", "can", "do", "interactively", "all", "present", "model", "structure", "analysis", "preprocess", "take", "up", "few", "minute", "each", "model", "prefactorization", "linear", "system", "add", "ten", "more", "seconds", "effect", "individual", "energy", "term", "Figure", "we", "show", "all", "ingredient", "variational", "framework", "necessary", "obtain", "good", "result", "deactivate", "elastic", "energy", "mean", "stretch", "diffuse", "local", "constraint", "helpful", "provide", "better", "base", "regularizer", "object", "part", "where", "pattern", "find", "balustrade", "air", "bridge", "canvas", "chair", "oil", "platform", "Westminster", "Palace", "-lrb-", "-rrb-", "original", "shape", "-lrb-", "-rrb-", "docking", "site", "-lrb-", "-rrb-", "slide", "docker", "-lrb-", "-rrb-", "deformation", "result", "global", "constraint", "necessary", "keep", "object", "straight", "without", "they", "global", "bend", "can", "prevent", "comparison", "related", "work", "Figure", "show", "oil", "tank", "model", "use", "Kraevoy", "et", "al.", "-lsb-", "2008", "-rsb-", "we", "technique", "achieve", "comparable", "result", "while", "detect", "stretch", "axis", "fully", "automatically", "-lrb-", "shape", "do", "need", "align", "global", "coordinate", "axis", "-rrb-", "since", "we", "only", "penalize", "structural", "deviation", "leastsquare", "sense", "small", "amount", "residual", "bend", "remains", "castle", "example", "Figure", "demonstrate", "we", "approach", "more", "general", "castle", "can", "stretch", "non-orthogonal", "direction", "determine", "fully", "automatically", "we", "pattern-aware", "structure", "model", "comparison", "Bokeloh", "et", "al.", "-lsb-", "2010", "-rsb-", "we", "approach", "can", "adapt", "discrete", "structure", "model", "real", "time", "response", "continuous", "free-form", "deformation", "instead", "be", "drive", "manually", "specify", "rigid", "shape", "operation", "furthermore", "slide", "docker", "find", "example", "where", "analysis", "technique", "Bokeloh", "et", "al.", "fail", "detect", "global", "cut", "arch", "figure", "column", "Figure", "latter", "example", "temple", "roof", "partially", "symmetric", "under", "transformation", "thus", "docking", "site", "can", "detect", "show", "Figure", "-lrb-", "-rrb-", "other", "hand", "slide", "docker", "do", "rely", "global", "cut", "allow", "temple", "resize", "show", "Figure", "-lrb-", "-rrb-" ],
  "content" : "We have implemented the described shape editing system in C++ and evaluated it on a commodity workstation with an Intel Core-2 Quad CPU with 2.6GHz cores and 8GB of RAM. Our implemen tation is single-threaded. As benchmark data, we have collected a number of models from commercial 3D model libraries. We use models from the Digimation Archive (www.digimation.com). We also include examples from [Kraevoy et al. 2008] and [Bokeloh et al. 2010]. For models with large triangles, we perform one or more 1:4 subdivision steps to obtain a sufficiently densely sampled mesh such that even elastic deformation with bending can be accommodated. The resulting models are output as collections of triangles that generally do not form watertight meshes, and are thus in general ?polygon soups. ? Figures 2 and 7 show a number of example models that have been edited using our approach. Please refer to the accompanying video for a demonstration of interactive editing. The deformation results produced by the technique are quite plausible; for many of the examples, it would be challenging to identify the original model without the highlighting. Some minor artifacts can be seen due to small-scale irregularities in the input geometry, which cause some patterns to only be detected in chunks, leading to a small amount of residual deformation. The blue examples use only the elastic energy term (Equation 2), with discrete relaxation still enabled. Despite strong bending, our approach reliably adapts the repetition count of the patterns without visible seams, discontinuities, gaps, or similar artifacts. In some models, the triangulation becomes visible; this could be resolved by a better adaptive mesh subdivision scheme. Parameters: Our algorithm is not very sensitive to parameter settings, and we mostly use default parameters everywhere. Only one parameter has a strong effect on the quality of the results: The error threshold for matching approximately symmetric line features. For complex models, we also increase the resolution of the subspace deformation model (the Westminster Palace model uses 2.5% l(S) instead of 5% l(S), which leads to a reduced interactive frame-rate) and lower the minimum size of relevant features. Timings: As shown in the video, editing can be done interactively for all presented models. The structure analysis in preprocessing takes up to a few minutes for each model, and prefactorization of the linear systems adds ten more seconds. Effect of individual energy terms: In Figure 6 , we show that all ingredients of the variational framework are necessary to obtain good results. Deactivating the elastic energy means that stretch is not diffused. The local constraints are helpful as they provide a better base regularizer for object parts where no patterns are found. balustrade air bridge canvas chair oil platform Westminster Palace (a) original shape (b) docking sites (c) sliding dockers (d) deformation result The global constraints are necessary to keep objects straight; without them, global bending cannot be prevented. Comparison to related work: Figure 7 shows the ?oil tank? model used by Kraevoy et al. [2008]. Our technique achieves comparable results, while detecting the stretch axes fully automatically. (The shape does not need to be aligned with the global coordinate axes.) Since we only penalize structural deviations in a leastsquares sense, a small amount of residual bending remains. The ?castle? example in Figure 7 demonstrates that our approach is more general: The castle can be stretched in non-orthogonal directions that are determined fully automatically by our pattern-aware structure model. In comparison to Bokeloh et al. [2010], our approach can adapt the discrete structure of the model in real time in response to continuous free-form deformation, instead of being driven by manually specified rigid shape operations. Furthermore, sliding dockers are found in examples where the analysis technique of Bokeloh et al. fails to detect global cuts, such as the arches in Figure 2 and the columns in Figure 8 . In the latter example, the temple roof is not partially symmetric under transformation T and thus no docking sites can be detected, as shown in Figure 8(b) . On the other hand, sliding dockers do not rely on global cuts, allowing the temple to be resized as shown in Figure 8(d) .",
  "resources" : [ ]
}