{
  "uri" : "sig2011-a105-chen_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2011/a105-chen_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Nonlinear Revision Control for Images",
    "published" : "2011",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Hsiang-Ting-Chen",
      "name" : "Hsiang-Ting",
      "surname" : "Chen"
    }, {
      "uri" : "http://drinventor/Li-Yi-Wei",
      "name" : "Li-Yi",
      "surname" : "Wei"
    }, {
      "uri" : "http://drinventor/Chun-Fa-Chang",
      "name" : "Chun-Fa",
      "surname" : "Chang"
    } ]
  },
  "bagOfWords" : [ "5092596cefcdfa5d7c01cf84753690e9eb3513b774a0b4700152cf750ac98bb6", "p0t", "10.1145", "1964921.1965000", "name", "identification", "possible", "nonlinear", "Revision", "Control", "Images", "Hsiang-Ting", "Chen", "Li-Yi", "Wei", "National", "Tsing", "Hua", "University", "Microsoft", "Research", "Revision", "control", "vital", "component", "digital", "project", "management", "have", "be", "widely", "deploy", "text", "file", "binary", "file", "other", "hand", "have", "receive", "relatively", "less", "attention", "can", "inconvenient", "graphic", "application", "use", "significant", "amount", "binary", "datum", "image", "video", "mesh", "animation", "exist", "strategy", "store", "whole", "file", "individual", "revision", "simple", "binary", "delta", "could", "consume", "significant", "storage", "obscure", "vital", "semantic", "information", "we", "present", "nonlinear", "revision", "control", "system", "image", "design", "common", "digital", "editing", "sketch", "workflow", "mind", "we", "use", "dag", "-lrb-", "direct", "acyclic", "graph", "-rrb-", "core", "structure", "dag", "node", "represent", "editing", "operation", "dag", "edge", "corresponding", "spatial", "temporal", "semantic", "relationship", "we", "visualize", "we", "dag", "revg", "-lrb-", "revision", "graph", "-rrb-", "which", "provide", "only", "meaningful", "display", "revision", "history", "also", "intuitive", "interface", "common", "revision", "control", "operation", "review", "replay", "diff", "addition", "branch", "merge", "conflict", "resolve", "beyond", "revision", "control", "we", "system", "also", "facilitate", "artistic", "creation", "process", "common", "image", "editing", "digital", "painting", "workflow", "we", "have", "build", "prototype", "system", "upon", "GIMP", "open", "source", "image", "editor", "demonstrate", "its", "effectiveness", "through", "formative", "user", "study", "comparison", "alternative", "revision", "control", "system", "cr", "category", "i.", "3.4", "-lsb-", "Computer", "Graphics", "-rsb-", "Graphics", "Utilities", "Graphics", "editor", "keyword", "revision", "control", "image", "nonlinear", "editing", "interaction", "Links", "dl", "pdf", "introduction", "Revision", "control", "important", "component", "digital", "content", "management", "-lsb-", "Estublier", "et", "al.", "2005", "-rsb-", "Popular", "revision", "control", "system", "include", "CVS", "Subversion", "Perforce", "name", "just", "few", "store", "file", "editing", "history", "revision", "control", "system", "allow", "we", "revert", "mistake", "review", "change", "Revision", "control", "system", "also", "facilitate", "open-ended", "content", "creation", "-lsb-", "Shneiderman", "2007", "-rsb-", "through", "mechanism", "branch", "merge", "so", "far", "development", "deployment", "revision", "control", "system", "have", "be", "focus", "more", "text", "than", "binary", "file", "understandable", "text", "file", "tend", "more", "frequently", "use", "revise", "easier", "develop", "revision", "control", "mechanism", "they", "-lrb-", "simple", "line", "differencing", "already", "provide", "enough", "information", "text", "file", "-rrb-", "however", "many", "graphic", "project", "binary", "file", "image", "video", "mesh", "animation", "can", "frequently", "use", "revise", "well", "here", "lack", "revision", "control", "binary", "file", "could", "cause", "several", "issue", "most", "exist", "general", "purpose", "re", "ACM", "Reference", "Format", "Chen", "H.", "Wei", "L.", "Chang", "C.", "2011", "nonlinear", "Revision", "Control", "Images", "ACM", "Trans", "graph", "30", "Article", "105", "-lrb-", "July", "2011", "-rrb-", "10", "page", "dous", "10.1145", "1964921.1965000", "http://doi.acm.org/10.1145/1964921.1965000", "copyright", "Notice", "permission", "make", "digital", "hard", "copy", "part", "all", "work", "personal", "classroom", "use", "grant", "without", "fee", "provide", "copy", "make", "distribute", "profit", "direct", "commercial", "advantage", "copy", "show", "notice", "fus", "rst", "page", "initial", "screen", "display", "along", "full", "citation", "copyright", "component", "work", "own", "other", "than", "ACM", "must", "honor", "abstract", "credit", "permit", "copy", "otherwise", "republish", "post", "server", "redistribute", "list", "use", "any", "component", "work", "other", "work", "require", "prior", "specific", "permission", "and/or", "fee", "permission", "may", "request", "from", "Publications", "Dept.", "ACM", "Inc.", "Penn", "Plaza", "Suite", "701", "New", "York", "NY", "10121-0701", "fax", "+1", "-lrb-212-rrb-Â 869-0481", "permissions@acm.org", "2011", "ACM", "0730-0301/2011", "07-art105", "10.00", "DOI", "10.1145", "1964921.1965000", "http://doi.acm.org/10.1145/1964921.1965000", "chun-fa", "Chang", "National", "Taiwan", "normal", "University", "source", "rev", "rev", "-lrb-", "-rrb-", "revg", "translate", "anchor", "hue", "paste", "deform", "source", "copy", "paste", "translate", "anchor", "balance", "deform", "DAG", "Figure", "nonlinear", "revision", "control", "example", "from", "input", "image", "-lrb-", "-rrb-", "we", "clone", "car", "twice", "translation", "perspective", "deformation", "-lrb-", "-rrb-", "follow", "modify", "color", "-lrb-", "-rrb-", "we", "revision", "control", "system", "record", "analyze", "action", "DAG", "datum", "structure", "show", "-lrb-", "-rrb-", "dag", "we", "core", "representation", "revision", "control", "directly", "visible", "ordinary", "user", "due", "potential", "complexity", "instead", "we", "visualize", "dag", "through", "graphical", "revision", "graph", "-lrb-", "revg", "show", "-lrb-", "-rrb-", "-rrb-", "we", "external", "uus", "user", "can", "interact", "revg", "perform", "revision", "control", "function", "node", "border", "color", "denote", "action", "type", "-lrb-", "Table", "-rrb-", "path", "delineate", "action", "dependency", "particular", "parallel", "path", "indicate", "operation", "semantically", "-lrb-", "e.g.", "translation", "deformation", "-rrb-", "spatially", "-lrb-", "e.g.", "color", "two", "individual", "car", "-rrb-", "independent", "vision", "system", "employ", "state-based", "model", "store", "different", "revision", "individual", "file", "without", "any", "diff/delta", "information", "thus", "bloat", "storage", "space", "make", "hard", "deduce", "change", "between", "revision", "even", "when", "delta", "-lsb-", "Hunt", "et", "al.", "1998", "-rsb-", "-lrb-", "other", "lowlevel", "information", "like", "pixel-wise", "diff", "-rrb-", "use", "usually", "lack", "sufficient", "high-level", "semantic", "information", "review", "branch", "merge", "visualization", "high", "level", "information", "can", "usually", "record", "from", "live", "user", "action", "relevant", "image", "editing", "software", "visualization", "interaction", "design", "user", "action", "history", "have", "long", "be", "popular", "topic", "-lsb-", "Kurlander", "1993", "Klemmer", "et", "al.", "2002", "Heer", "et", "al.", "2008", "Su", "et", "al.", "2009a", "Grossman", "et", "al.", "2010", "-rsb-", "nevertheless", "lack", "formal", "representation", "depict", "comprehensive", "relationship", "-lrb-", "only", "temporal", "also", "spatial", "semantic", "-rrb-", "between", "image", "editing", "action", "make", "approach", "both", "inefficient", "insufficient", "revision", "control", "paper", "we", "propose", "nonlinear", "revision", "control", "system", "image", "design", "common", "content", "creation", "workflow", "digital", "editing", "sketch", "mind", "we", "maintain", "high-level", "fine-granularity", "revision", "history", "record", "consolidate", "user", "editing", "operation", "core", "idea", "we", "system", "dag", "-lrb-", "direct", "acyclic", "graph", "-rrb-", "datum", "structure", "represent", "nonlinear", "spatial", "temporal", "semantic", "dependency", "between", "record", "image", "editing", "operation", "store", "dag", "node", "detailed", "information", "provide", "necessary", "high", "level", "semantics", "proper", "revision", "control", "compare", "previous", "work", "where", "only", "low-level", "bitmap", "information", "use", "build", "upon", "DAG", "datum", "structure", "we", "provide", "primary", "revision", "control", "command", "include", "review", "diff", "addition", "branch", "merge", "conflict", "resolve", "we", "present", "all", "functionality", "through", "friendly", "user", "interface", "center", "upon", "revg", "-lrb-", "revision", "graph", "-rrb-", "multi-resolution", "graphical", "revision", "history", "representation", "underlie", "dag", "addition", "core", "revision", "control", "we", "system", "also", "facilitate", "open-ended", "content", "creation", "process", "non-linear", "editing", "exploration", "-lsb-", "Kurlander", "1993", "Su", "et", "al.", "2009a", "Terry", "et", "al.", "2004", "-rsb-", "base", "we", "core", "dag", "representation", "we", "devise", "several", "algorithm", "innovation", "both", "internal", "system", "implementation", "external", "user", "interface", "design", "we", "begin", "on-the-fly", "action", "recording", "dag", "construction", "during", "user", "editing", "record", "revision", "history", "we", "able", "construct", "dag", "filter", "visually", "intuitive", "multi-resolution", "revg", "representation", "we", "devise", "mechanism", "automatic", "resolve", "merge", "multiple", "revision", "potential", "conflict", "well", "user", "interface", "allow", "manual", "change", "intervention", "automatically", "merge", "result", "we", "also", "provide", "image", "diff", "tool", "can", "particularly", "handy", "visualization", "prior", "scheme", "primarily", "base", "low", "level", "pixel", "information", "we", "have", "build", "prototype", "system", "via", "GIMP", "open", "source", "image", "editor", "through", "multiple", "iteration", "user", "feedback", "during", "we", "design", "stage", "we", "also", "demonstrate", "effectiveness", "we", "system", "through", "further", "user", "study", "comparison", "alternative", "revision", "control", "system", "summary", "we", "paper", "have", "follow", "contribution", "idea", "nonlinear", "revision", "control", "system", "image", "core", "dag", "structure", "represent", "revision", "history", "upon", "which", "we", "build", "revg", "multi-resolution", "revision", "graph", "various", "algorithm", "component", "revision", "control", "prototype", "system", "build", "gimp", "practical", "nonlinear", "revision", "control", "intuitive", "uus", "center", "revg", "common", "revision", "operation", "include", "addition", "branch", "merge", "conflict", "resolve", "diff", "non-linear", "replay", "additional", "application", "we", "system", "facilitate", "open-ended", "content", "creation", "exploration", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "105", "publication", "date", "July", "2011", "105:2", "h.-t", "Chen", "et", "al.", "previous", "work", "Digital", "content", "management", "Digital", "content", "management", "refer", "general", "process", "authoring", "editing", "collect", "publishing", "distribute", "digital", "content", "both", "text", "binary", "datum", "-lsb-", "Jacobsen", "et", "al.", "2005", "-rsb-", "among", "various", "component", "digital", "content", "management", "revision", "control", "remain", "one", "most", "important", "see", "-lsb-", "Estublier", "et", "al.", "2005", "-rsb-", "detailed", "survey", "exist", "revision", "control", "mechanism", "focus", "mainly", "text", "rather", "than", "binary", "file", "easier", "deduce", "change", "via", "either", "low", "level", "-lrb-", "e.g.", "line", "diff", "-lsb-", "Hunt", "et", "al.", "1998", "-rsb-", "-rrb-", "high", "level", "-lrb-", "e.g.", "programming", "language", "syntax", "-lsb-", "Jackson", "Ladd", "1994", "-rsb-", "-rrb-", "information", "however", "binary", "file", "prevail", "method", "store", "either", "complete", "file", "individual", "revision", "crude", "binary", "difference", "-lsb-", "Hunt", "et", "al.", "1998", "-rsb-", "both", "method", "can", "consume", "significant", "storage", "more", "importantly", "lack", "relevant", "high", "level", "semantic", "information", "issue", "could", "hamper", "adoption", "revision", "control", "system", "manage", "graphic", "asset", "judge", "success", "graphic", "content", "management", "system", "-lrb-", "e.g.", "alienbrain", "-rrb-", "demand", "obviously", "exist", "we", "knowledge", "suitable", "revision", "control", "mechanism", "exist", "binary", "graphic", "asset", "goal", "we", "system", "fill", "gap", "allow", "easy", "revision", "control", "image", "most", "commonly", "use", "graphic", "datum", "type", "graphical", "history", "exist", "rich", "literature", "graphical", "history", "visualization", "interaction", "comprehensive", "survey", "can", "find", "-lsb-", "Heer", "et", "al.", "2008", "-rsb-", "here", "we", "focus", "mainly", "work", "employ", "different", "kind", "temporal", "history", "model", "most", "relevant", "revision", "control", "prior", "graphical", "history", "method", "can", "classify", "two", "major", "category", "linear", "-lsb-", "kurlander", "1993", "Myers", "et", "al.", "1997", "Kurihara", "et", "al.", "2005", "Nakamura", "Igarashi", "2008", "-rsb-", "nonlinear", "-lsb-", "Edwards", "Mynatt", "1997", "Edwards", "et", "al.", "2000", "Klemmer", "et", "al.", "2002", "Su", "et", "al.", "2009a", "-rsb-", "model", "linear", "history", "model", "while", "sufficient", "many", "visualization", "interactive", "task", "usually", "do", "provide", "enough", "information", "image", "revision", "control", "where", "predominant", "operation", "nonlinear", "include", "branch", "editing", "replay", "parallel", "information", "representable", "via", "nonlinear", "history", "model", "we", "knowledge", "none", "exist", "method", "provide", "sufficient", "information", "comprehensive", "relationship", "between", "editing", "operation", "-lrb-", "only", "temporal", "also", "spatial", "semantic", "dependency", "-rrb-", "example", "-lsb-", "Edwards", "Mynatt", "1997", "-rsb-", "timeline", "represent", "tree", "node", "state", "edge", "action", "state-based", "model", "suitable", "revision", "control", "due", "potentially", "large", "storage", "size", "-lsb-", "Heer", "et", "al.", "2008", "-rsb-", "loss", "dependency", "information", "between", "operation", "Edwards", "et", "al.", "-lsb-", "2000", "-rsb-", "deploy", "multi-level", "history", "model", "which", "many", "local", "linear", "history", "embedded", "within", "global", "linear", "history", "allow", "only", "single", "global", "timeline", "thus", "can", "handle", "parallel", "revision", "Klemmer", "et", "al.", "-lsb-", "2002", "-rsb-", "also", "employ", "state-based", "method", "thus", "share", "similar", "problem", "interesting", "feature", "-lsb-", "Klemmer", "et", "al.", "2002", "-rsb-", "representation", "non-linear", "history", "tree", "linear", "comic-strip", "fashion", "shrink", "branch", "single", "node", "however", "may", "confuse", "report", "user", "study", "su", "et", "al.", "-lsb-", "2009a", "-rsb-", "propose", "inspiring", "methodology", "represent", "revision", "history", "in-place", "graphic", "instead", "abstract", "timeline", "however", "we", "could", "identify", "coherent", "datum", "structure", "practical", "revision", "control", "work", "highly", "relevant", "we", "work", "Chronicle", "-lsb-", "Grossman", "et", "al.", "2010", "-rsb-", "record", "user", "workflow", "history", "allow", "local", "playback", "through", "video", "smart", "design", "various", "filter", "probe", "user", "can", "review", "work", "effectively", "however", "system", "about", "revision", "control", "can", "handle", "non-linear", "history", "graph", "structure", "computational", "task", "many", "computational", "task", "utilize", "certain", "graph", "structure", "modeling", "e.g.", "visualization", "flow", "-lsb-", "Levoy", "1994", "Bavoil", "et", "al.", "2005", "-rsb-", "we", "method", "similar", "example", "prior", "art", "we", "also", "use", "dag", "kind", "graph", "structure", "workflow", "management", "however", "we", "system", "aim", "automatic", "construction", "dag", "from", "user", "interaction", "whereas", "visualization", "system", "user", "expect", "directly", "construct", "flow", "pipeline", "sense", "we", "goal", "automatic", "construction", "similar", "work", "shade", "model", "-lsb-", "cook", "1984", "Abram", "Whitted", "1990", "-rsb-", "even", "though", "we", "focus", "different", "domain", "revision", "control", "image", "editing", "graph", "structure", "have", "also", "be", "apply", "solid", "modeling", "-lsb-", "convard", "bourdot", "2004", "-rsb-", "where", "history", "graph", "allow", "modification", "editing", "param", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "105", "publication", "date", "July", "2011", "nonlinear", "Revision", "Control", "Images", "105:3", "figure", "Revision", "control", "user", "interface", "user", "can", "perform", "revision", "control", "function", "via", "right-click", "menu", "within", "revision", "control", "window", "-lrb-", "right", "-rrb-", "which", "also", "visualize", "revision", "history", "through", "revg", "when", "revg", "node", "select", "its", "corresponding", "spatial", "context", "highlight", "via", "bound", "box", "main", "gimp", "window", "-lrb-", "left", "-rrb-", "eter", "length", "certain", "object", "component", "however", "propose", "technique", "more", "replay", "graphical", "history", "than", "full-fledged", "revision", "control", "highly", "relate", "we", "work", "generic", "Graphical", "Library", "-lrb-", "GEGL", "-rrb-", "future", "core", "GIMP", "also", "use", "dag", "representation", "although", "gegl", "share", "similar", "graph", "representation", "like", "ours", "mainly", "design", "internal", "infrastructure", "non-destructive", "image", "editing", "GIMP", "node", "dag", "can", "image", "editing", "operation", "low-level", "datum", "structure", "like", "image", "buffer", "thus", "generate", "dag", "typically", "comprehensible", "user", "compare", "we", "dag", "representation", "gegl", "also", "do", "consider", "semantic", "relationship", "between", "operation", "core", "idea", "here", "we", "describe", "we", "two", "core", "datum", "structure", "dag", "revg", "base", "we", "describe", "we", "external", "user", "interface", "section", "internal", "system", "implementation", "section", "DAG", "we", "core", "datum", "structure", "represent", "action-based", "revision", "history", "dag", "compose", "node", "direct", "edge", "dag", "node", "represent", "image", "editing", "operation", "relevant", "information", "include", "type", "parameter", "apply", "region", "dag", "edge", "represent", "relationship", "between", "operation", "-lrb-", "direct", "-rrb-", "sequential", "path", "between", "two", "node", "imply", "spatial", "and/or", "semantic", "dependency", "path", "direction", "imply", "temporal", "order", "contrast", "multiple", "parallel", "path", "between", "two", "node", "imply", "independent", "operation", "sequence", "e.g.", "those", "apply", "disjoint", "region", "incur", "orthogonal", "semantics", "dag", "faithfully", "record", "user", "editing", "operation", "gradually", "grow", "more", "revision", "commit", "each", "revision", "we", "system", "sub-graph", "dag", "contain", "root", "node", "which", "represent", "act", "initialization", "i.e.", "open", "empty", "canvas", "load", "exist", "image", "state", "revision", "always", "equivalent", "result", "generate", "traverse", "its", "corresponding", "sub-graph", "note", "when", "deal", "image", "datum", "many", "modern", "state-based", "revision", "control", "system", "-lrb-", "e.g.", "git", "svn", "cv", "-rrb-", "store", "separate", "image", "revision", "while", "we", "system", "dag", "encode", "only", "action", "whole", "image", "revg", "due", "potentially", "high", "complexity", "large", "size", "dag", "we", "do", "directly", "expose", "ordinary", "user", "instead", "we", "visualize", "via", "state-based", "revision", "graph", "which", "we", "call", "revg", "each", "revg", "essentially", "multi-resolution", "graph", "visualization", "underlie", "dag", "which", "highest", "resolution", "revision", "history", "specifically", "each", "revg", "node", "aggregation", "one", "more", "dag", "node", "revg", "edge", "corresponding", "dag", "rigid", "transformation", "translation", "rotation", "deformation", "scale", "shear", "perspective", "color", "filter", "hue", "saturation", "color", "balance", "birhgtness", "contrast", "gamma", "color", "fill", "blur", "sharpen", "edit", "copy", "paste", "anchor", "add", "layer", "layer", "mask", "brush", "brush", "pencil", "eraser", "Table", "support", "operation", "class", "class", "first", "three", "row", "semantic", "independent", "each", "font", "color", "above", "indicate", "border", "color", "revg", "node", "corresponding", "operation", "class", "edge", "after", "graph", "simplification", "however", "unlike", "dag", "which", "abstract", "representation", "we", "visualize", "each", "revg", "node", "thumbnail", "accord", "underlie", "dag", "action", "we", "revg", "present", "both", "revision", "branch", "operation", "dependency", "unify", "representation", "particular", "even", "linear", "revision", "history", "revg", "can", "still", "exhibit", "non-linear", "parallel", "structure", "due", "spatial", "semantic", "independency", "between", "operation", "editing", "example", "Figure", "through", "revg", "user", "can", "easily", "navigate", "different", "resolution", "well", "perform", "all", "revision", "control", "function", "addition", "diff", "branch", "merge", "conflict", "resolve", "-lrb-", "figure", "-rrb-", "user", "Interface", "we", "UI", "single", "window", "display", "revg", "within", "which", "revision", "control", "command", "issue", "-lrb-", "figure", "-rrb-", "below", "we", "describe", "main", "usage", "scenario", "we", "system", "4.1", "Revision", "Navigation", "accommodate", "potentially", "complex", "revision", "history", "revg", "provide", "multi-resolution", "view", "user", "can", "continuously", "navigate", "between", "different", "level", "detail", "from", "coarse", "revision", "resolution", "-lrb-", "figure", "3a", "-rrb-", "fine", "action", "resolution", "-lrb-", "figure", "3b", "-rrb-", "well", "use", "we", "constrain", "navigation", "mechanism", "focus", "specific", "subset", "action", "-lrb-", "please", "refer", "supplementary", "video", "-rrb-", "similar", "prior", "thumbnail-based", "revision", "graph", "design", "-lsb-", "Kurlander", "1993", "Klemmer", "et", "al.", "2002", "-rsb-", "we", "directly", "embed", "thumbnail", "image", "within", "each", "revg", "node", "we", "also", "designate", "each", "node", "descriptive", "text", "label", "border", "color", "signal", "its", "type", "-lrb-", "Table", "-rrb-", "further", "facilitate", "interaction", "we", "also", "provide", "bi-directional", "selection", "mechanism", "between", "main", "gimp", "window", "revg", "click", "revg", "node", "bound", "rectangle", "corresponding", "modify", "region", "highlight", "-lrb-", "figure", "-rrb-", "conversely", "select", "image", "region", "corresponding", "revg", "node", "highlight", "4.2", "Revision", "Diff", "extract", "difference", "between", "text", "file", "common", "approach", "classic", "line-based", "diff", "-lsb-", "Hunt", "et", "al.", "1998", "-rsb-", "however", "well-defined", "difference", "tool", "image", "among", "all", "general", "image", "comparison", "visualization", "approach", "popular", "one", "include", "sideby-side", "comparison", "-lrb-", "e.g.", "Adobe", "Bridge", "Perforce", "-rrb-", "layer-based", "difference", "-lrb-", "e.g.", "pixelnovel", "-rrb-", "per-pixel", "difference", "image", "overlay", "-lrb-", "e.g.", "Wet", "Paint", "-lsb-", "Bonanni", "et", "al.", "2009", "-rsb-", "-rrb-", "flicker", "difference", "region", "-lrb-", "e.g.", "compare", "utility", "imagemagick", "-rrb-", "approach", "design", "handle", "only", "low", "level", "bitmap", "difference", "little", "information", "about", "editing", "semantics", "contrast", "we", "system", "have", "all", "relevant", "high", "level", "information", "record", "dag", "informative", "diff", "we", "have", "design", "two", "revision", "diff", "visual", "mechanism", "first", "one", "revg", "itself", "-lrb-", "figure", "-rrb-", "which", "user", "can", "directly", "interact", "obtain", "visual", "clue", "about", "involve", "editing", "operation", "second", "standalone", "diff", "uus", "can", "trigger", "select", "two", "revg", "node", "-lrb-", "figure", "-rrb-", "diff", "uus", "provide", "side-by-side", "parallel", "comparison", "between", "revision", "well", "sequential", "replay", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "105", "publication", "date", "July", "2011", "105:4", "h.-t", "Chen", "et", "al.", "source", "rev_0_1", "-lrb-", "-rrb-", "coarser", "resolution", "figure", "Multi", "resolution", "revg", "we", "system", "automatically", "display", "revg", "proper", "resolution", "depend", "viewing", "condition", "user", "preference", "Figure", "Diff", "UI", "preview", "window", "-lrb-", "left", "-rrb-", "show", "editing", "process", "between", "two", "revision", "-lrb-", "middle", "right", "-rrb-", "user", "can", "manually", "drag", "slider", "particular", "state", "click", "play", "button", "automatic", "playback", "refresh", "button", "would", "flicker", "between", "two", "revision", "quick", "comparison", "user", "can", "also", "turn", "bound", "box", "difference", "region", "-lrb-", "e.g.", "cat", "reflection", "-rrb-", "please", "refer", "supplementary", "video", "detailed", "action", "in-between", "action", "replay", "speed", "depend", "underlie", "revg", "resolution", "specifically", "when", "diff", "uus", "invoke", "from", "revg", "we", "extract", "15", "step", "-lrb-", "all", "total", "number", "under", "15", "-rrb-", "accord", "visual", "importance", "avoid", "potentially", "lengthy", "animation", "we", "also", "provide", "refresh", "button", "flicker", "between", "two", "revision", "in-place", "comparison", "well", "checkbox", "highlight", "bound", "box", "difference", "region", "note", "we", "system", "can", "provide", "meaningful", "information", "user", "ignore", "global", "edit", "-lrb-", "e.g.", "gamma", "correction", "Figure", "-rrb-", "emphasize", "only", "local", "modification", "task", "which", "difficult", "achieve", "only", "low-level", "bitmap", "information", "4.3", "add", "Revision", "add", "revision", "-lrb-", "a.k.a", "checking-in", "-rrb-", "one", "most", "frequently", "use", "revision", "control", "command", "we", "system", "save", "current", "work", "progress", "new", "revision", "user", "can", "simply", "issue", "command", "within", "revision", "control", "window", "-lrb-", "figure", "-rrb-", "although", "user", "can", "check-in", "revision", "whenever", "like", "generally", "unnecessary", "they", "do", "so", "action-wise", "fine-grained", "fashion", "since", "we", "system", "can", "record", "all", "action", "flexibly", "visualize", "they", "revg", "-lrb-", "section", "4.1", "-rrb-", "general", "guideline", "we", "encourage", "user", "check-in", "when", "one", "follow", "two", "condition", "meet", "-rrb-", "some", "milestone", "work", "achieve", "-rrb-", "when", "user", "would", "like", "try", "out", "different", "variation", "latter", "case", "committed", "revision", "can", "use", "branch", "point", "future", "reference", "revision", "rollback", "detail", "below", "4.4", "Revision", "Branch", "Merge", "Branch", "process", "software", "development", "many", "programmer", "especially", "those", "who", "work", "alone", "few", "other", "people", "might", "use", "branch", "command", "often", "nevertheless", "context", "open-ended", "creative", "content", "production", "-lrb-", "e.g.", "image", "editing", "digital", "sketch", "-rrb-", "branch", "become", "essential", "even", "usage", "scenario", "single", "user", "describe", "-lsb-", "Terry", "Mynatt", "2002a", "Hartmann", "et", "al.", "2008", "-rsb-", "common", "artist", "perform", "trial-and-error", "experiment", "reach", "best", "outcome", "rich", "history", "keep", "trial-and-error", "process", "ability", "keep", "multiple", "version", "-lrb-", "branch", "-rrb-", "design", "could", "signifi", "brush", "brush", "brush", "brush", "brush", "rev_0_2", "-lrb-", "-rrb-", "finer", "resolution", "-lrb-", "-rrb-", "merge", "UI", "Figure", "uus", "revision", "merge", "left", "-lrb-", "-rrb-", "right", "trunk", "only", "revision", "-lrb-", "-rrb-", "branch", "merge", "after", "while", "trunk", "center", "-lrb-", "-rrb-", "branch", "preview", "only", "merge", "result", "-lrb-", "-rrb-", "automatic", "merge", "-lrb-", "-rrb-", "show", "result", "non-conflict", "merge", "UI", "image", "edit", "-lrb-", "gift", "snowman", "-rrb-", "automatically", "merge", "while", "conflict", "one", "-lrb-", "ornamental", "strip", "ball", "-rrb-", "trunk", "version", "choose", "default", "we", "system", "also", "allow", "user", "change", "default", "behavior", "include", "branch-after-trunk", "-lrb-", "-rrb-", "click", "blue", "circle", "button", "once", "branch-only", "-lrb-", "-rrb-", "click", "blue", "circle", "button", "twice", "trunk-after-branch", "left", "right", "revision", "merge", "while", "center", "preview", "merge", "result", "-lrb-", "-rrb-", "automatic", "merge", "result", "non-conflict", "edit", "-lrb-", "gift", "snowman", "-rrb-", "automatically", "merge", "while", "conflict", "one", "-lrb-", "ornamental", "strip", "ball", "-rrb-", "trunk", "version", "choose", "default", "we", "system", "also", "allow", "user", "change", "default", "behavior", "include", "branch-after-trunk", "-lrb-", "-rrb-", "click", "blue", "circle", "button", "once", "branch-only", "-lrb-", "-rrb-", "click", "blue", "circle", "button", "twice", "trunk-after-branch", "cantly", "support", "designer", "achieve", "creative", "goal", "-lsb-", "Shneiderman", "2007", "-rsb-", "similar", "add", "revision", "command", "branch", "can", "easily", "create", "within", "revision", "control", "window", "-lrb-", "figure", "-rrb-", "merge", "Merge", "can", "perform", "between", "two", "revision", "either", "-lrb-", "-rrb-", "both", "checked-in", "-lrb-", "trunk", "branch", "-rrb-", "-lrb-", "-rrb-", "one", "trunk", "one", "local", "-lrb-", "yet", "check", "-rrb-", "copy", "we", "system", "first", "perform", "automatic", "merge", "between", "non-conflicting", "edit", "-lrb-", "via", "we", "graph", "merge", "algorithm", "describe", "section", "5.4", "-rrb-", "we", "also", "provide", "merge", "UI", "manual", "resolve", "conflict", "well", "allow", "user", "change", "default", "merge", "result", "since", "we", "uus", "system", "implementation", "very", "similar", "scenario", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "clarity", "presentation", "we", "focus", "scenario", "-lrb-", "-rrb-", "subsequent", "description", "automatic", "merge", "can", "already", "provide", "satisfactory", "result", "under", "usual", "circumstance", "require", "further", "manual", "intervention", "from", "user", "show", "Figure", "5b", "non-conflict", "contents", "automatically", "merge", "while", "conflicted", "one", "content", "from", "trunk", "choose", "default", "when", "automatic", "merged", "result", "satisfactory", "conflicted", "scenario", "can", "automatically", "resolve", "user", "can", "invoke", "we", "merge", "uus", "-lrb-", "figure", "5a", "-rrb-", "merge", "uus", "contain", "two", "revision", "image", "preview", "result", "user", "can", "interactively", "drag", "zoom", "select", "region", "interest", "-lrb-", "red", "rectangle", "figure", "-rrb-", "user", "interaction", "synchronize", "among", "all", "three", "image", "easy", "comparison", "once", "region", "select", "four", "possible", "merge", "combination", "trunk", "only", "branch", "only", "trunk", "after", "branch", "branch", "after", "trunk", "all", "can", "achieve", "via", "simple", "button", "click", "take", "Figure", "example", "we", "would", "like", "put", "ornamental", "ball", "-lrb-", "branch", "-rrb-", "over", "strip", "-lrb-", "trunk", "-rrb-", "we", "could", "simply", "select", "tree", "-lrb-", "red", "rectangle", "-rrb-", "single", "click", "right", "button", "-lrb-", "marked", "blue", "circle", "-rrb-", "result", "show", "Figure", "5c", "we", "want", "completely", "replace", "strip", "ornamental", "ball", "-lrb-", "branch", "only", "-rrb-", "can", "do", "click", "button", "twice", "-lrb-", "Figure", "5d", "-rrb-", "Figure", "another", "interesting", "example", "clearly", "demonstrate", "effect", "create", "via", "four", "combination", "mode", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "105", "publication", "date", "July", "2011", "nonlinear", "Revision", "Control", "Images", "105:5", "-lrb-", "-rrb-", "trunk", "only", "-lrb-", "color", "-rrb-", "-lrb-", "-rrb-", "branch", "only", "-lrb-", "cloning", "-rrb-", "-lrb-", "-rrb-", "trunk", "after", "branch", "-lrb-", "-rrb-", "branch", "after", "trunk", "figure", "another", "merge", "example", "-lrb-", "-rrb-", "source", "image", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "show", "different", "combination", "trunk", "branch", "result", "-lrb-", "-rrb-", "source", "System", "Implementation", "practical", "usage", "evaluation", "we", "have", "fully", "integrate", "we", "revision", "control", "system", "gimp", "reference", "architecture", "open", "source", "visualization", "system", "include", "prefuse", "-lsb-", "Heer", "et", "al.", "2005", "-rsb-", "Kitware", "visualization", "toolkit", "we", "have", "build", "flexible", "revision", "control", "framework", "orthogonalize", "main", "module", "gimp", "core", "ui/renderer", "frontend", "revision", "control", "backend", "-lrb-", "figure", "-rrb-", "design", "provide", "flexibility", "easy", "integration", "different", "system", "more", "specifically", "we", "have", "modify", "GIMP", "core", "add", "two", "main", "component", "logger", "record", "user", "action", "replayer", "replay", "action", "revision", "control", "core", "communicate", "gimp", "via", "its", "official", "gimplibrary", "interface", "record", "log", "other", "revision", "control", "information", "store", "repository", "log", "analyze", "transform", "dag", "which", "further", "simplify", "through", "various", "filter", "revg", "finally", "revg", "render", "frontend", "renderer", "base", "gtk", "5.1", "logger", "Replayer", "logger", "silently", "record", "user", "editing", "action", "background", "form", "text", "log", "can", "replay", "GIMP", "via", "replayer", "consecutive", "identical", "log", "consolidated", "similar", "-lsb-", "Grabler", "et", "al.", "2009", "-rsb-", "its", "latest", "version", "2.8", "GIMP", "have", "yet", "provide", "any", "apus", "command", "log", "consequently", "obtain", "fine-grained", "command", "log", "we", "have", "manually", "hard-wire", "command", "logger", "other", "hand", "operation", "replay", "can", "easily", "achieve", "through", "procedure", "database", "-lrb-", "pdb", "-rrb-", "architecture", "GIMP", "where", "most", "image", "editing", "function", "register", "can", "Editing", "Software", "UI", "Frontend", "-lrb-", "GIMP", "-rrb-", "Logger", "Replayer", "Renderer", "-lrb-", "GTK", "-rrb-", "Revision", "Control", "Backend", "Repository", "DAG", "revg", "construction", "dag", "filter", "figure", "major", "component", "we", "system", "clean", "separation", "between", "GIMP", "core", "revision", "control", "backend", "frontend", "renderer", "we", "system", "can", "easily", "integrate", "other", "image", "editing", "software", "operate", "system", "invoke", "via", "libgimp", "nevertheless", "rapid", "evolution", "GIMP", "all", "new", "function", "have", "be", "add", "PDB", "properly", "example", "function", "related", "brush", "out-dated", "require", "manual", "registration", "hopefully", "operation", "recording", "replay", "would", "easier", "after", "GIMP", "developer", "implement", "long", "desire", "feature", "macro", "recording", "log", "action", "log", "consist", "its", "action", "name", "action", "parameter", "layer", "id", "selection", "mask", "brush", "sketch", "action", "mouse/stylus", "motion", "pressure", "also", "store", "we", "prototype", "log", "store", "ascius", "format", "5.2", "repository", "DAG", "when", "new", "revision", "commit", "corresponding", "action", "log", "transfer", "from", "GIMP", "repository", "construct", "dag", "orthogonal", "implementation", "we", "store", "log", "linear", "datum", "structure", "dag", "node", "contain", "pointer", "corresponding", "log", "operation", "dependency", "we", "dag", "record", "two", "kind", "dependency", "spatial", "semantic", "spatial", "dependency", "consider", "spatial", "relationship", "between", "operation", "spatially", "independent", "region", "operation", "do", "overlap", "semantic", "dependency", "we", "categorize", "operation", "five", "different", "class", "show", "Table", "which", "first", "three", "row", "semantically", "independent", "-lrb-", "see", "also", "-lsb-", "su", "et", "al.", "2009a", "-rsb-", "-rrb-", "semantically", "independent", "operation", "apply", "same", "object", "region", "put", "parallel", "path", "-lrb-", "figure", "-rrb-", "dag", "construction", "we", "build", "dag", "sequentially", "insert", "each", "action", "graph", "one", "dag", "node", "correspond", "one", "action", "when", "insert", "node", "insertion", "algorithm", "would", "search", "dependent", "node", "already", "DAG", "some", "dependent", "node", "connect", "-lrb-", "i.e.", "path", "between", "they", "-rrb-", "latest", "one", "among", "they", "pick", "procedure", "can", "do", "efficiently", "post-order", "df", "detail", "algorithm", "5.3", "filter", "we", "system", "create", "revg", "from", "dag", "interactive", "apply", "list", "filter", "include", "viewport", "filter", "cull", "revg", "nodes/edges", "outside", "current", "viewport", "layout", "filter", "determine", "position", "path", "shape", "color", "revg", "node", "-lrb-", "via", "classical", "hierarchical", "layout", "algorithm", "-lsb-", "Gansner", "et", "al.", "1993", "-rsb-", "-rrb-", "visual", "importance", "filter", "detail", "follow", "paragraph", "note", "we", "provide", "generic", "filter", "interface", "so", "user", "sufficient", "programming", "skill", "can", "create", "customize", "filter", "visual", "importance", "filter", "purpose", "visual", "importance", "filter", "dynamically", "simplify", "dag", "revg", "proper", "display", "visual", "importance", "filter", "have", "two", "stage", "first", "assign", "visual", "importance", "value", "each", "dag", "node", "second", "filter", "dag", "revg", "accord", "threshold", "assign", "current", "revg", "window", "resolution", "visual", "importance", "value", "dag", "node", "which", "contain", "one", "action", "act", "-lrb-", "-rrb-", "determine", "two", "major", "factor", "image", "content", "difference", "-lrb-", "-rrb-", "action", "context", "-lrb-", "-rrb-", "can", "express", "follow", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "m?n", "-lrb-", "-rrb-", "where", "neighbor", "node", "dag", "within", "distance", "which", "we", "set", "we", "current", "implementation", "here", "-lrb-", "-rrb-", "simply", "low-level", "per-pixel", "difference", "between", "image", "after", "apply", "act", "-lrb-", "-rrb-", "act", "-lrb-", "-rrb-", "other", "hand", "-lrb-", "-rrb-", "take", "advantage", "high-level", "information", "record", "DAG", "assign", "higher", "visual", "importance", "action", "different", "type", "parameter", "among", "its", "neighbor", "while", "penalize", "those", "similar", "identical", "action", "repetitive", "stroke", "commonly", "see", "digital", "sketch", "more", "specifically", "act", "-lrb-", "-rrb-", "act", "-lrb-", "-rrb-", "different", "type", "parameter", "-lrb-", "-rrb-", "10", "where", "distance", "between", "dag", "otherwise", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "actually", "very", "flexible", "term", "can", "fine-tuned", "fit", "user", "requirement", "example", "we", "give", "operation", "add", "layer", "higher", "value", "-lrb-", "100", "we", "implementation", "-rrb-", "we", "user", "study", "indicate", "very", "useful", "see", "operation", "history", "layer", "basis", "-lrb-", "please", "see", "section", "more", "detail", "-rrb-", "-lrb-", "-rrb-", "possible", "deploy", "more", "sophisticated", "metric", "consider", "visual", "attention", "perceptual", "image", "analysis", "-lsb-", "Itti", "et", "al.", "1998", "Yee", "et", "al.", "2001", "-rsb-", "however", "generally", "computationally", "expensive", "restricted", "certain", "scenario", "advantage", "we", "system", "addition", "low-level", "bitmap", "information", "we", "also", "have", "high-level", "information", "about", "editing", "operation", "combine", "low-level", "-lrb-", "-rrb-", "highlevel", "-lrb-", "-rrb-", "we", "system", "already", "provide", "satisfactory", "result", "after", "assign", "visual", "importance", "value", "all", "node", "we", "traverse", "dag", "df", "order", "accumulate", "visual", "importance", "value", "once", "accumulate", "value", "higher", "than", "threshold", "value", "current", "resolution", "corresponding", "node", "dag", "cluster", "single", "revg", "node", "after", "node", "clustering", "we", "add", "back", "graph", "edge", "procedure", "similar", "classical", "multi-resolution", "mesh", "simplification", "-lsb-", "Hoppe", "1996", "-rsb-", "graph", "visualization", "-lsb-", "Fairchild", "et", "al.", "1999", "Heer", "Card", "2004", "-rsb-", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "105", "publication", "date", "July", "2011", "105:6", "h.-t", "Chen", "et", "al.", "algorithm", "Node", "insertion", "node", "insert", "dag", "parent", "initialize", "empty", "node", "dag", "order", "post-odering", "df", "while", "do", "pop", "ront", "-lrb-", "-rrb-", "dependent", "remove", "parent", "from", "end", "end", "while", "insert", "direct", "edge", "from", "node", "c.", "5.4", "Revision", "Control", "Commands", "Revision", "diff", "we", "system", "problem", "extract", "difference", "between", "two", "revision", "can", "pose", "graph", "difference", "problem", "underlie", "dag", "graph", "difference", "compute", "one-toone", "correspondence", "between", "node", "from", "scratch", "equivalent", "isomorphism", "np-complete", "problem", "-lsb-", "cook", "1971", "-rsb-", "fortunately", "we", "case", "we", "can", "extract", "common", "node", "between", "two", "dag", "match", "label", "-lrb-", "record", "from", "original", "action", "log", "-rrb-", "rest", "would", "difference", "node", "from", "which", "we", "could", "implement", "various", "diff", "visualization", "mechanism", "describe", "section", "4.2", "note", "when", "two", "revision", "lie", "different", "branch", "possible", "have", "dag", "node", "different", "label", "actually", "represent", "identical", "editing", "operation", "here", "we", "simply", "treat", "operation", "different", "label", "real", "difference", "have", "find", "approximation", "satisfactory", "diff", "visualization", "algorithm", "Automatic", "Merge", "dag", "trunk", "branch", "revision", "dag", "after", "merge", "node", "order", "BFS", "cl", "conflict", "list", "while", "do", "pop", "ront", "-lrb-", "-rrb-", "conflict", "node", "remove", "child", "from", "push", "its", "child", "cl", "else", "insert", "algorithm", "end", "end", "while", "Revision", "merge", "similar", "revision", "diff", "revision", "merge", "also", "work", "dag", "level", "automatic", "merge", "algorithm", "search", "conflict", "between", "two", "graph", "merge", "non-conflict", "node", "together", "output", "conflict", "list", "which", "user", "could", "manually", "resolve", "via", "we", "merge", "UI", "describe", "section", "4.4", "default", "we", "use", "trunk", "only", "option", "conflict", "resolution", "pseudo-code", "merge", "algorithm", "provide", "algorithm", "we", "merge", "UI", "also", "provide", "user", "flexibility", "merge", "arbitrary", "region", "-lrb-", "figure", "-rrb-", "achieve", "apply", "algorithm", "DAG", "node", "whose", "action", "correspond", "select", "image", "region", "example", "section", "we", "demonstrate", "several", "usage", "example", "we", "system", "both", "image", "editing", "digital", "sketch", "application", "addition", "basic", "revision", "control", "we", "also", "demonstrate", "potential", "usage", "we", "system", "creativity", "support", "tool", "image", "editing", "figure", "two", "practical", "image", "editing", "example", "where", "many", "popular", "image", "compositing", "photo", "retouching", "technique", "be", "use", "from", "embedded", "thumbnail", "image", "underlie", "text", "label", "revg", "node", "user", "can", "clearly", "identify", "involve", "operation", "dependency", "revg", "user", "can", "easily", "review", "own", "work", "learn", "from", "other", "we", "show", "revg", "two", "figure", "different", "level", "detail", "demonstrate", "multi-resolution", "feature", "we", "representation", "Digital", "sketch", "Figure", "10", "Figure", "11", "two", "digital", "sketch", "example", "produce", "we", "collaborate", "professional", "artist", "each", "example", "consist", "about", "one", "thousand", "action", "which", "exceed", "maximum", "size", "state-based", "undo", "history", "stack", "GIMP", "we", "system", "faithfully", "record", "all", "action", "can", "reproduce", "whole", "digital", "sketch", "session", "show", "figure", "revg", "provide", "compact", "informative", "visualization", "sketch", "history", "lay", "out", "independent", "operation", "parallel", "path", "clustering", "together", "action", "similar", "parameter", "creativity", "support", "tool", "addition", "revision", "control", "we", "system", "can", "also", "facilitate", "design", "space", "exploration", "essential", "task", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "105", "publication", "date", "July", "2011", "nonlinear", "Revision", "Control", "Images", "105:7", "-lrb-", "-rrb-", "before", "-lrb-", "-rrb-", "after", "figure", "image", "composit", "example", "-lrb-", "-rrb-", "revg", "finest", "resolution", "fake", "reflection", "cat", "create", "enhance", "richness", "photograph", "gamma", "adjustment", "first", "apply", "follow", "copy", "paste", "procedure", "additional", "layer", "mask", "also", "use", "correct", "occlusion", "between", "reflection", "window", "creativity", "support", "tool", "-lsb-", "Shneiderman", "2007", "-rsb-", "we", "system", "possible", "nonlinearly", "adjust", "parameter", "previous", "operation", "show", "Figure", "12", "give", "user", "select", "image", "region", "we", "system", "would", "search", "related", "editing", "operation", "prompt", "dialog", "parameter", "tuning", "-lrb-", "figure", "12a", "-rrb-", "also", "provide", "intuitive", "nonlinear", "selective", "undo", "function", "where", "user", "can", "select", "any", "region", "image", "undo", "associate", "operation", "similar", "-lsb-", "su", "et", "al.", "2009a", "Kurlander", "1993", "-rsb-", "Figure", "12d", "we", "undo", "operation", "apply", "one", "eye", "without", "affect", "other", "region", "which", "difficult", "achieve", "linear", "history", "stack", "provide", "most", "image", "editing", "system", "finally", "we", "system", "also", "provide", "selective", "replay", "propose", "-lsb-", "Grossman", "et", "al.", "2010", "-rsb-", "where", "user", "can", "nonlinearly", "replay", "operation", "correspond", "specific", "region", "interest", "we", "merge", "UI", "provide", "additional", "tool", "create", "different", "variation", "example", "show", "Figure", "13", "common", "artist", "first", "finish", "up", "main", "component", "-lrb-", "character", "example", "-rrb-", "try", "out", "all", "kind", "decoration", "use", "different", "layer", "however", "can", "require", "careful", "separation", "item", "layer", "while", "ensure", "number", "layer", "manageable", "we", "system", "user", "could", "simply", "draw", "alternative", "one", "layer", "save", "revision", "create", "variation", "we", "merge", "UI", "evaluation", "since", "we", "system", "first", "comprehensive", "image", "revision", "control", "difficult", "perform", "summative", "usability", "test", "compare", "other", "system", "-lsb-", "Lau", "2010", "-rsb-", "devise", "general", "performance", "metric", "creative", "production", "task", "instead", "we", "provide", "two", "evaluation", "we", "system", "-lrb-", "-rrb-", "formative", "user", "study", "conduct", "during", "after", "we", "development", "cycle", "shed", "light", "rationale", "behind", "we", "UI", "design", "efficacy", "we", "system", "-lrb-", "-rrb-", "objective", "performance", "comparison", "storage", "size", "other", "revision", "control", "system", "-lrb-", "-rrb-", "before", "-lrb-", "-rrb-", "after", "figure", "-lrb-", "-rrb-", "revg", "image", "retouch", "example", "several", "popular", "image", "retouching", "technique", "apply", "example", "include", "clone", "brush", "hue/balance", "adjustment", "eye", "sharpen", "eye", "whitening", "eye", "bag", "removal", "tooth", "whitening", "7.1", "Formative", "Usability", "Study", "we", "early", "development", "cycle", "we", "collaborate", "one", "professional", "illustrator", "two", "cs", "graduate", "student", "significant", "experience", "photo", "shoot", "retouch", "help", "we", "UI", "design", "process", "later", "stage", "we", "recruit", "two", "more", "professional", "industry", "designer", "whose", "daily", "work", "involve", "use", "image", "editing", "software", "Adobe", "Photoshop", "Painter", "two", "more", "cs", "graduate", "student", "prior", "practice", "among", "participant", "only", "CS", "student", "have", "experience", "revision", "control", "system", "nevertheless", "all", "participant", "have", "own", "practice", "datum", "management", "version", "control", "either", "solo", "team", "project", "one", "common", "ad-hoc", "approach", "deploy", "all", "participant", "categorize", "project", "different", "folder", "save", "datum", "informative", "filename", "usually", "contain", "creation", "date", "simple", "comment", "one", "participant", "also", "mention", "he", "company", "require", "he", "compress", "archive", "file", "weekly", "basis", "potential", "future", "reference", "major", "downside", "approach", "project", "expand", "user", "could", "easily", "lose", "track", "revision", "numerous", "file", "scatter", "different", "folder", "some", "manual", "version", "control", "approach", "base", "function", "provide", "specific", "tool", "example", "artist", "commonly", "use", "layer", "function", "image", "editing", "software", "-lrb-", "e.g.", "gimp", "Adobe", "Photoshop", "-rrb-", "save", "different", "design", "variation", "toggle", "visibility", "layer", "can", "explore", "different", "design", "combination", "alternative", "however", "number", "layer", "increase", "-lrb-", "we", "collaborate", "artist", "show", "we", "case", "40", "layer", "-rrb-", "keep", "variation", "layer", "could", "make", "already", "difficult", "layer", "management", "even", "harder", "furthermore", "also", "easy", "way", "browse", "through", "variation", "store", "layer", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "105", "publication", "date", "July", "2011", "105:8", "h.-t", "Chen", "et", "al.", "-lrb-", "-rrb-", "sketch", "-lrb-", "-rrb-", "final", "image", "brush", "source", "rev_0_1", "figure", "10", "digital", "sketch", "example", "brush", "brush", "brush", "brush", "-lrb-", "-rrb-", "revg", "artist", "perform", "649", "brush", "stroke", "employ", "three", "layer", "color", "palette", "face", "hair", "body", "note", "we", "visual", "importance", "filter", "cluster", "operation", "similar", "parameter", "-lrb-", "e.g.", "brush", "color", "-rrb-", "together", "early", "design", "address", "issue", "discuss", "above", "natural", "solution", "use", "dag", "core", "we", "system", "any", "revision", "history", "can", "represent", "dag", "during", "early", "phase", "we", "project", "one", "major", "design", "decision", "about", "how", "present", "revision", "information", "encode", "underlie", "dag", "user", "we", "early", "prototype", "we", "attempt", "expose", "dag", "directly", "relevant", "tool", "semi-auto", "node", "aggregation", "annotation", "well", "ability", "direct", "dag", "manipulation", "CS", "student", "author", "have", "find", "tool", "complicate", "powerful", "interesting", "other", "hand", "collaborate", "artist", "interested", "fine-grained", "operation", "rather", "than", "deal", "abstract", "dag", "artist", "prefer", "directly", "interact", "image", "current", "design", "base", "feedback", "we", "have", "make", "two", "key", "design", "decision", "-rrb-", "hide", "dag", "from", "ordinary", "user", "visualize", "through", "revg", "-rrb-", "direct", "all", "revision", "control", "mechanism", "through", "revg", "revision", "window", "keep", "we", "revision", "control", "system", "easy", "use", "comprehend", "combinable", "main", "image", "editing", "window", "-lrb-", "gimp", "we", "particular", "implementation", "-rrb-", "specifically", "user", "can", "still", "perform", "ordinary", "image", "editing", "operation", "we", "nonlinear", "exploration", "-lrb-", "figure", "12", "-rrb-", "main", "gimp", "window", "interact", "we", "revg", "only", "revision", "control", "command", "two", "naturally", "connect", "via", "bidirectional", "mechanism", "where", "selection", "make", "image", "region", "automatically", "lead", "corresponding", "revg", "node", "vice", "versa", "-lrb-", "see", "Figure", "12", "-rrb-", "user", "study", "post", "design", "user", "study", "we", "bring", "two", "more", "industrial", "designer", "two", "more", "cs", "graduate", "student", "test", "subject", "after", "brief", "tutorial", "demonstration", "we", "system", "we", "assign", "they", "two", "kind", "task", "-lrb-", "-rrb-", "execution", "where", "subject", "perform", "familiar", "image", "editing", "project", "-lrb-", "digital", "sketch", "photo", "retouching", "-rrb-", "while", "issue", "revision", "control", "through", "we", "system", "-lrb-", "-rrb-", "cognition", "where", "subject", "give", "some", "pre-recorded", "example", "revg", "ask", "deduce", "involve", "editing", "op", "-lrb-", "-rrb-", "sketch", "-lrb-", "-rrb-", "final", "image", "source", "rev_0_1", "brush", "brush", "revg", "figure", "11", "another", "digital", "sketch", "example", "artist", "employ", "1391", "operation", "four", "layer", "palette", "face", "hair", "clothing", "eration", "overall", "subject", "express", "difficulty", "perform", "basic", "revision", "control", "function", "checking-in", "branch", "merge", "revision", "history", "navigation", "some", "subject", "even", "comment", "be", "happy", "enough", "even", "subset", "we", "system", "save", "roll", "back", "revision", "both", "task", "we", "have", "observe", "subject", "tend", "stay", "longer", "coarser", "revg", "resolution", "while", "more", "tentative", "venture", "finer", "resolution", "task", "understandable", "since", "subject", "should", "have", "innate", "knowledge", "editing", "process", "thus", "do", "need", "consult", "finer", "revg", "resolution", "task", "collect", "comment", "suggest", "subject", "do", "find", "finer-resolution", "helpful", "especially", "when", "some", "subtle", "unfamiliar", "effect", "involve", "however", "finer-resolution", "revg", "also", "mean", "more", "thumbnail", "image", "analyze", "memorize", "so", "subject", "try", "stay", "coarser", "resolution", "long", "can", "comprehend", "operation", "some", "participant", "also", "invoke", "revision", "diff", "tool", "manually", "adjust", "slider", "back", "forth", "task", "comment", "decision", "be", "preferf", "see", "progress", "modification", "single", "preview", "window", "speed", "want", "better", "temporal", "context", "easier", "identification", "modify", "contents", "digital", "sketch", "subject", "comment", "care", "more", "about", "temporal", "order", "stroke", "than", "semantic", "dependency", "revg", "however", "also", "comment", "very", "helpful", "we", "revg", "display", "brush", "apply", "different", "layer", "different", "path", "-lrb-", "e.g.", "figure", "10", "-rrb-", "which", "similar", "layer-based", "history", "list", "long", "desire", "function", "artist", "indicate", "practical", "benefit", "we", "non-linear", "revision", "structure", "notably", "we", "collaborate", "artist", "especially", "interested", "stroke-by-stroke", "replay", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "105", "publication", "date", "July", "2011", "nonlinear", "Revision", "Control", "Images", "105:9", "Figure", "12", "nonlinear", "exploration", "-lrb-", "-rrb-", "rough", "selection", "-lrb-", "-rrb-", "selective", "undo", "give", "rough", "selection", "region", "-lrb-", "-rrb-", "we", "system", "would", "search", "relevant", "operation", "adjust", "parameter", "intended", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "show", "possible", "variation", "create", "via", "function", "similarly", "selective", "undo", "can", "easily", "achieve", "side-by-side", "-lrb-", "-rrb-", "rough", "selection", "-lrb-", "-rrb-", "selective", "undo", "give", "rough", "selection", "region", "-lrb-", "-rrb-", "we", "system", "would", "search", "relevant", "operation", "adjust", "parameter", "intended", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "show", "possible", "variation", "create", "via", "function", "similarly", "selective", "undo", "can", "easily", "achieve", "side-by-side", "comparison", "non-linear", "editing", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "he", "comment", "generally", "difficult", "deduce", "original", "painting", "operation", "merely", "from", "final", "flatten", "image", "we", "system", "one", "can", "truly", "appreciate", "other", "technique", "more", "importantly", "one?s", "own", "drawing", "logic", "most", "participant", "think", "revision", "merge", "very", "interesting", "have", "lot", "potential", "might", "take", "some", "time", "practice", "completely", "immerse", "daily", "work", "flow", "nevertheless", "like", "possibility", "create", "multiple", "variation", "we", "uus", "without", "worry", "about", "underlie", "layer", "-lrb-", "contrast", "prior", "practice", "-rrb-", "while", "have", "fun", "create", "variation", "Figure", "13", "summary", "we", "user", "study", "indicate", "we", "system", "indeed", "easy", "-lrb-", "sometimes", "fun", "-rrb-", "use", "helpful", "revision", "control", "image", "editing", "project", "even", "though", "might", "take", "some", "time", "practice", "sink", "execution", "task", "-lrb-", "e.g.", "revision", "control", "during", "image", "editing", "-rrb-", "participant", "mostly", "stick", "single", "revg", "resolution", "while", "cognition", "task", "-lrb-", "e.g.", "review", "explore", "-rrb-", "find", "multi-resolution", "revg", "informative", "also", "comment", "we", "nonlinear", "revision", "history", "very", "helpful", "depict", "editing", "information", "especially", "potentially", "complex", "layer", "structure", "addition", "core", "revision", "control", "participant", "also", "find", "we", "system", "conducive", "creative", "process", "7.2", "Performance", "storage", "consumption", "we", "system", "particularly", "small", "compare", "other", "image", "editing", "revision", "control", "system", "gimp", "-lrb-", "xcf", "file", "-rrb-", "GIT", "SVN", "show", "Table", "all", "figure", "we", "divide", "whole", "editing", "process", "four", "revision", "commit", "they", "revision", "repository", "storage", "overhead", "we", "system", "mainly", "come", "from", "cache", "thumbnail", "image", "overhead", "internal", "datum", "structure", "GIT", "SVN", "precisely", "calculate", "here", "we", "advantage", "storage", "size", "clear", "regard", "computation", "speed", "we", "system", "run", "interactive", "speed", "user", "we", "system", "have", "find", "any", "slowdown", "compare", "Figure", "13", "Revision", "merge", "creativity", "support", "tool", "merge", "UI", "note", "only", "one", "layer", "use", "all", "operation", "original", "gimp", "other", "revision", "control", "system", "input", "op", "gimp", "svn", "git", "we", "502", "11", "2.7", "2.1", "2.0", "640", "1.6", "672", "267", "224", "180", "73", "945", "11", "3.5", "3.7", "3.6", "1.3", "276", "10", "972", "1.2", "1.2", "420", "377", "649", "2.3", "2.4", "2.5", "652", "425", "1391", "2.5", "2.7", "2.7", "775", "input", "op", "gimp", "svn", "git", "we", "502", "11", "2.7", "2.1", "2.0", "640", "1.6", "672Â 267Â 224Â 180", "73", "945", "11", "3.5", "3.7", "3.6", "1.3", "276", "10", "972", "1.2", "1.2", "420Â 377Â 649", "2.3", "2.4", "2.5", "652Â 425Â 1391", "2.5", "2.7", "2.7", "775", "Table", "Storage", "size", "compaison", "all", "size", "express", "k-byte", "Limitations", "Future", "Work", "main", "limitation", "we", "current", "implementation", "integrate", "single", "tool", "-lrb-", "gimp", "-rrb-", "instead", "general", "mechanism", "can", "work", "arbitrary", "image", "editing", "software", "Popular", "image", "editing", "tool", "e.g.", "Photoshop", "Painter", "have", "own", "built-in", "history", "mechanism", "we", "would", "like", "have", "universal", "revision", "control", "interface", "facilitate", "automatic", "integration", "we", "revision", "control", "system", "heterogeneous", "multi-tool", "environment", "we", "current", "prototype", "system", "implement", "primarily", "single", "user", "predominant", "usage", "scenario", "current", "artistic", "workflow", "however", "propose", "algorithm", "system", "framework", "directly", "support", "multiple", "user", "UI", "can", "easily", "extend", "too", "particular", "all", "one", "need", "do", "adopt", "clientserver", "model", "implement", "we", "revision", "control", "backend", "server", "side", "UI", "frontend", "image", "editor", "client", "side", "we", "current", "design", "phase", "we", "have", "only", "conduct", "usability", "study", "few", "subject", "-lrb-", "one", "professional", "artist", "two", "industrial", "designer", "four", "cs", "graduate", "student", "-rrb-", "ideal", "test", "bed", "integrate", "we", "system", "commercial", "studio?s", "pipeline", "however", "rather", "difficult", "find", "studio", "use", "gimp", "main", "tool", "nevertheless", "we", "do", "hope", "release", "we", "source", "code", "public", "domain", "can", "help", "we", "gather", "more", "user", "feedback", "paper", "we", "focus", "mainly", "image", "we", "believe", "similar", "principle", "applicable", "other", "binary", "graphic", "asset", "video", "mesh", "animation", "datum", "extend", "revision", "control", "datum", "type", "could", "another", "potential", "future", "work", "direction", "acknowledgement", "we", "would", "like", "thank", "Eugene", "Lei", "digital", "sketch", "example", "valuable", "comment", "Sin-Jhen", "Chiu", "DigiMax", "Chuan-Chang", "Wang", "Next", "Media", "Animation", "insight", "commercial", "animation", "production", "pipeline", "Eric", "Stollnitz", "video", "dubbing", "Duncan", "Stevenson", "SIGGRAPH", "English", "Review", "Service", "proofread", "well", "KeSen", "Huang", "anonymous", "reviewer", "valuable", "suggestion", "work", "support", "part", "National", "Science", "Council", "-lrb-", "Taiwan", "-rrb-", "under", "grant", "NSC", "98-2220-e-003-001", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "105", "publication", "date", "July", "2011", "105:10", "h.-t", "Chen", "et", "al.", "reference", "bram", "G.", "D.", "HITTED", "T.", "1990", "building", "block", "shader", "SIGGRAPH", "90", "283", "288", "avoil", "L.", "ALLAHAN", "S.", "P.", "cheidegger", "C.", "E.", "H.", "T.", "ROSSNO", "P.", "J.", "ILVA", "C.", "T.", "reire", "J.", "2005", "Vistrails", "enable", "interactive", "multiple-view", "visualization", "visualization", "2005", "135", "142", "onannus", "L.", "IAO", "X.", "OCKENBERRY", "M.", "UBRAMANI", "P.", "shii", "H.", "eracinus", "m.", "chulze", "J.", "2009", "Wetpaint", "scrape", "through", "multi-layered", "image", "CHI", "09", "571", "574", "onvard", "T.", "OURDOT", "P.", "2004", "history", "base", "reactive", "object", "immersive", "cad", "sm", "04", "Symposium", "solid", "modeling", "application", "291", "296", "ook", "S.", "A.", "1971", "complexity", "theorem-proving", "procedure", "stoc", "71", "Symposium", "Theory", "computing", "151", "158", "ook", "R.", "L.", "1984", "shade", "tree", "SIGGRAPH", "84", "223", "231", "dward", "W.", "K.", "YNATT", "E.", "D.", "1997", "Timewarp", "technique", "autonomous", "collaboration", "CHI", "97", "218", "225", "dward", "W.", "K.", "garashi", "T.", "arca", "a.", "ynatt", "E.", "D.", "2000", "temporal", "model", "multi-level", "undo", "redo", "UIST", "00", "31", "40", "stublier", "J.", "EBLANG", "D.", "OEK", "A.", "onradus", "R.", "LEMM", "G.", "ichy", "W.", "IBORG", "eber", "D.", "2005", "impact", "software", "engineering", "research", "practice", "software", "configuration", "management", "ACM", "Trans", "Softw", "Eng", "Methodol", "14", "383", "430", "airchild", "K.", "M.", "oltrock", "S.", "E.", "urna", "G.", "W.", "1999", "reading", "information", "visualization", "ch", "SemNet", "threedimensional", "graphic", "representation", "large", "knowledge", "basis", "190", "206", "ansner", "E.", "R.", "OUTSOFIOS", "E.", "ORTH", "S.", "C.", "K.P.", "1993", "technique", "draw", "direct", "graph", "IEEE", "Trans", "Softw", "Eng", "19", "214", "230", "rabler", "F.", "GRAWALA", "M.", "W.", "ONTCHEVA", "M.", "GARASHI", "T.", "2009", "Generating", "photo", "manipulation", "tutorial", "demonstration", "SIGGRAPH", "09", "66:1", "rossman", "t.", "atejka", "J.", "itzmaurice", "G.", "2010", "Chronicle", "capture", "exploration", "playback", "document", "workflow", "history", "UIST", "10", "143", "152", "artmann", "B.", "L.", "LLISON", "a.", "ang", "Y.", "LEM", "MER", "S.", "R.", "2008", "design", "exploration", "create", "interface", "alternative", "through", "parallel", "authoring", "runtime", "tuning", "UIST", "08", "91", "100", "eer", "J.", "ard", "S.", "K.", "2004", "doitree", "revisit", "scalable", "space-constrained", "visualization", "hierarchical", "datum", "AVI", "04", "Proceedings", "work", "conference", "Advanced", "visual", "interface", "421", "424", "eer", "J.", "ARD", "S.", "K.", "anday", "J.", "A.", "2005", "prefuse", "toolkit", "interactive", "information", "visualization", "CHI", "05", "421", "430", "eer", "J.", "ACKINLAY", "J.", "tolte", "C.", "GRAWALA", "M.", "2008", "graphical", "history", "visualization", "support", "analysis", "communication", "evaluation", "IEEE", "transaction", "visualization", "computer", "graphic", "14", "1189", "1196", "OPPE", "H.", "1996", "progressive", "mesh", "SIGGRAPH", "96", "99", "108", "UNT", "J.", "J.", "K.-P.", "ichy", "W.", "F.", "1998", "Delta", "algorithm", "empirical", "analysis", "ACM", "Trans", "Softw", "Eng", "Methodol", "192", "214", "tti", "L.", "OCH", "C.", "IEBUR", "E.", "1998", "model", "saliencybased", "visual", "attention", "rapid", "scene", "analysis", "IEEE", "Trans", "pattern", "Anal", "Mach", "Intell", "20", "-lrb-", "November", "-rrb-", "1254", "1259", "ACKSON", "D.", "add", "D.", "A.", "1994", "semantic", "diff", "tool", "summarize", "effect", "modification", "icsm", "94", "Proceedings", "International", "conference", "Software", "Maintenance", "243", "252", "ACOBSEN", "J.", "chlenker", "T.", "dward", "L.", "2005", "implement", "Digital", "Asset", "Management", "System", "animation", "Computer", "Games", "web", "development", "Focal", "Press", "LEMMER", "S.", "R.", "homsen", "M.", "help", "oodman", "E.", "EE", "R.", "anday", "J.", "A.", "2002", "where", "do", "web", "site", "come", "from", "capture", "interact", "design", "history", "CHI", "02", "URIHARA", "K.", "RONAY", "D.", "GARASHI", "T.", "2005", "flexible", "timeline", "user", "interface", "use", "constraint", "CHI", "05", "1581", "1584", "URLANDER", "D.", "1993", "chimera", "example-based", "graphical", "editing", "Watch", "what", "do", "programming", "demonstration", "271", "290", "au", "t.", "2010", "rethink", "system", "review", "process", "Commun", "ACM", "53", "-lrb-", "November", "-rrb-", "10", "11", "evoy", "M.", "1994", "spreadsheet", "image", "SIGGRAPH", "94", "139", "146", "yer", "B.", "A.", "aniel", "R.", "G.", "ILLER", "R.", "C.", "er", "rency", "a.", "S.", "aulring", "a.", "YLE", "B.", "D.", "ickish", "a.", "LIMOVITSKI", "a.", "oane", "P.", "1997", "amulet", "environment", "New", "model", "effective", "user", "interface", "software", "development", "IEEE", "transaction", "Software", "Engineering", "23", "347", "365", "akamura", "T.", "GARASHI", "T.", "2008", "applicationindependent", "system", "visualize", "user", "operation", "history", "UIST", "08", "23", "32", "hneiderman", "B.", "2007", "creativity", "support", "tool", "accelerate", "discovery", "innovation", "Commun", "ACM", "50", "-lrb-", "December", "-rrb-", "20", "32", "S.", "L.", "ari", "S.", "LIAGA", "F.", "cull", "C.", "OHNSON", "S.", "URAND", "F.", "2009", "interactive", "visual", "history", "vector", "graphic", "Tech", "Rep.", "MIT-CSAIL-TR-2009-031", "Massachusetts", "Institute", "Technology", "Computer", "Science", "Artificial", "Intelligence", "Laboratory", "June", "erry", "m.", "ynatt", "E.", "D.", "2002", "recognize", "creative", "need", "user", "interface", "design", "C&C", "02", "Proceedings", "4th", "conference", "Creativity", "cognition", "38", "44", "erry", "M.", "YNATT", "E.", "D.", "AKAKOJI", "K.", "amamoto", "Y.", "2004", "variation", "element", "action", "support", "simultaneous", "development", "alternative", "solution", "CHI", "04", "711", "718", "ee", "H.", "attanaik", "S.", "REENBERG", "D.", "P.", "2001", "spatiotemporal", "sensitivity", "visual", "attention", "efficient", "rendering", "dynamic", "environment", "ACM", "Trans", "graph", "20", "39", "65", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "105", "publication", "date", "July", "2011" ],
  "content" : "\n  \n    5092596cefcdfa5d7c01cf84753690e9eb3513b774a0b4700152cf750ac98bb6\n    p0t\n    10.1145/1964921.1965000\n    Name identification was not possible. \n  \n  \n    \n      \n        Nonlinear Revision Control for Images\n      \n      Hsiang-Ting Chen Li-Yi Wei National Tsing Hua University Microsoft Research\n      Revision control is a vital component of digital project management and has been widely deployed for text files. Binary files, on the other hand, have received relatively less attention. This can be inconvenient for graphics applications that use a significant amount of binary data, such as images, videos, meshes, and animations. Existing strategies such as storing whole files for individual revisions or simple binary deltas could consume significant storage and obscure vital semantic information. We present a nonlinear revision control system for images, designed with the common digital editing and sketching workflows in mind. We use DAG (directed acyclic graph) as the core structure, with DAG nodes representing editing operations and DAG edges the corresponding spatial, temporal and semantic relationships. We visualize our DAG in RevG (revision graph), which provides not only as a meaningful display of the revision history but also an intuitive interface for common revision control operations such as review, replay, diff, addition, branching, merging, and conflict resolving. Beyond revision control, our system also facilitates artistic creation processes in common image editing and digital painting workflows. We have built a prototype system upon GIMP, an open source image editor, and demonstrate its effectiveness through formative user study and comparisons with alternative revision control systems. CR Categories: I.3.4 [Computer Graphics]: Graphics Utilities? Graphics editors; Keywords: revision control, images, nonlinear editing, interaction Links: DL PDF\n      \n        \n        \n      \n    \n    \n      \n        1 Introduction\n      \n      Revision control is an important component of digital content management [Estublier et al. 2005]. Popular revision control systems include CVS, Subversion, and Perforce, to name just a few. By storing file editing histories, revision control systems allow us to revert mistakes and review changes. Revision control systems also facilitate open-ended content creation [Shneiderman 2007] through mechanisms such as branching and merging. So far, the development and deployment of revision control systems have been focused more on text than binary files. This is understandable, as text files tend to be more frequently used and revised, and it is easier to develop revision control mechanisms for them. (Simple line differencing already provides enough information for text files.) However, in many graphics projects, binary files, such as images, videos, meshes, and animations, can be frequently used and revised as well. Here the lack of revision control for binary files could cause several issues. Most existing general purpose re-\n      \n        ACM Reference Format\n      \n      Chen, H., Wei, L., Chang, C. 2011. Nonlinear Revision Control for Images. ACM Trans. Graph. 30, 4, Article 105 (July 2011), 10 pages. DOI = 10.1145/1964921.1965000 http://doi.acm.org/10.1145/1964921.1965000.\n      \n        Copyright Notice\n      \n      Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or direct commercial advantage and that copies show this notice on the fi rst page or initial screen of a display along with the full citation. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, to republish, to post on servers, to redistribute to lists, or to use any component of this work in other works requires prior specific permission and/or a fee. Permissions may be requested from Publications Dept., ACM, Inc., 2 Penn Plaza, Suite 701, New York, NY 10121-0701, fax +1 (212) 869-0481, or permissions@acm.org . ? 2011 ACM 0730-0301/2011/07-ART105 $10.00 DOI 10.1145/1964921.1965000 http://doi.acm.org/10.1145/1964921.1965000\n      Chun-Fa Chang National Taiwan Normal University\n      \n        \n      \n      \n        c\n        source rev 0 1 rev 0 2\n      \n      \n        \n        \n        \n        \n        \n        \n      \n      (d) RevG translate anchor hue paste deform source copy paste translate anchor balance deform\n      \n        e\n        DAG\n      \n      \n        Figure 1: Nonlinear revision control example. From the input image (a),\n      \n      we cloned the car twice with translation and perspective deformation (b) followed by modifying their colors (c). Our revision control system recorded and analyzed the actions into the DAG data structure as shown in (e). The DAG is our core representation for revision control but not directly visible to ordinary users due to potential complexity. Instead, we visualize the DAG through a graphical revision graph (RevG, shown in (d)) in our external UI. Users can interact with RevG and perform revision control functions. Node border colors denote the action types ( Table 1 ) and paths delineate the action dependencies. In particular, parallel paths indicate operations that are semantically (e.g. translation and deformation) or spatially (e.g. coloring two individual cars) independent.\n      vision systems employ a state-based model that stores the different revisions as individual files without any diff/delta information, thus bloating storage space and making it hard to deduce the changes between revisions. Even when deltas [Hunt et al. 1998] (or other lowlevel information like pixel-wise diff) are used, they usually lack sufficient high-level semantic information for reviewing, branching, merging, or visualization. Such high level information can usually be recorded from live user actions with the relevant image editing software. The visualization and interaction design of such user action histories has long been a popular topic [Kurlander 1993; Klemmer et al. 2002; Heer et al. 2008; Su et al. 2009a; Grossman et al. 2010]. Nevertheless, the lack of a formal representation that depicts the comprehensive relationship (not only temporal but also spatial and semantic) between  image editing actions makes these approaches both inefficient and insufficient for revision control. In this paper, we propose a nonlinear revision control system for images, designed with the common content creation workflows such as digital editing and sketching in mind. We maintain high-level and fine-granularity revision history by recording and consolidating user editing operations. The core idea of our system is a DAG (directed acyclic graph) data structure representing the nonlinear spatial, temporal, and semantic dependencies between these recorded image editing operations stored as DAG nodes. Such detailed information provides the necessary high level semantics for proper revision control compared to previous works where only low-level bitmap information is used. Built upon the DAG data structure, we provide the primary revision control commands including review, diff, addition, branch, merge, and conflict resolving. We present all these functionalities through a friendly user interface centered upon RevG (revision graph), a multi-resolution graphical revision history representation of the underlying DAG. In addition to core revision control, our system also facilitates open-ended content creation processes with non-linear editing and exploration [Kurlander 1993; Su et al. 2009a; Terry et al. 2004]. Based on our core DAG representation, we devise several algorithm innovations for both internal system implementation and external user interface design. We begin with on-the-fly action recording and DAG construction during user editing. With the recorded revision history, we are able to construct the DAG and filter it into a visually intuitive multi-resolution RevG representation. We devise mechanisms for automatic resolving and merging multiple revisions with potential conflicts, as well as a user interface that allows manual change and intervention of the automatically merged results. We also provide an image diff tool that can be particularly handy for visualization as prior schemes are primarily based on low level pixel information. We have built a prototype system via GIMP, an open source image editor, through multiple iterations of user feedbacks during our design stages. We also demonstrate the effectiveness of our system through further user studies and comparisons with alternative revision control systems. In summary, our paper has the following contributions: ? The idea of a nonlinear revision control system for images. ? The core DAG structure representing the revision history, upon which we build RevG, the multi-resolution revision graph, and various algorithm components for revision control. ? A prototype system built with GIMP for practical nonlinear revision control and an intuitive UI centered on RevG for common revision operations including addition, branching, merging, conflict resolving, diff, and non-linear replay. ? Additional applications of our system such as facilitating open-ended content creation and exploration.\n      ACM Transactions on Graphics, Vol. 30, No. 4, Article 105, Publication date: July 2011.\n      105:2\n      ?\n      H.-T. Chen et al.\n      \n        2 Previous Work\n        Digital content management Digital content management refers to the general process of authoring, editing, collecting, publishing, and distributing digital content, for both text and binary data [Jacobsen et al. 2005]. Among the various components of digital content management, revision control remains one of the most important; see [Estublier et al. 2005] for a detailed survey. Existing revision control mechanisms focus mainly on text rather than binary files as it is easier to deduce the changes via either low level (e.g. line diff [Hunt et al. 1998]) or high level (e.g. programming language syntax [Jackson and Ladd 1994]) information. However, for binary files, the prevailing methods store either the  complete files for individual revisions or their crude binary differences [Hunt et al. 1998]. Both of these methods can consume significant storage, and more importantly lack relevant high level semantic information. These issues could hamper the adoption of revision control systems in managing graphics assets. Judging by the success of graphics content management systems (e.g. Alienbrain), such demands obviously exist, but to our knowledge no suitable revision control mechanism exists for binary graphics assets. The goal of our system is to fill this gap, allowing easy revision control for images, the most commonly used graphics data type. Graphical history There exists a rich literature on graphical history visualization and interaction. A comprehensive survey can be found in [Heer et al. 2008]. Here we focus mainly on works that employ different kinds of temporal history models, as they are most relevant to revision control. Prior graphical history methods can be classified into two major categories: linear [Kurlander 1993; Myers et al. 1997; Kurihara et al. 2005; Nakamura and Igarashi 2008] and nonlinear [Edwards and Mynatt 1997; Edwards et al. 2000; Klemmer et al. 2002; Su et al. 2009a] models. The linear history model, while sufficient for many visualization and interactive tasks, usually do not provide enough information for image revision control where predominant operations are nonlinear, including branching, editing, and replay. Such parallel information is representable via a nonlinear history model. But to our knowledge, none of the existing methods provide sufficient information for the comprehensive relationships between editing operations (not only temporal but also spatial and semantic dependency). For example, in [Edwards and Mynatt 1997] the timeline is represented as a tree with nodes as states and edges as actions. Such a state-based model is not suitable for revision control due to potentially large storage size [Heer et al. 2008] and the loss of dependency information between operations. Edwards et al. [2000] deployed a multi-level history model in which many local linear histories are embedded within a global linear history. This allows only a single global timeline and thus cannot handle parallel revisions. Klemmer et al. [2002] also employed a state-based method and thus shared similar problems. An interesting feature of [Klemmer et al. 2002] is the representation of a non-linear history tree in a linear comic-strip fashion by shrinking the branches into a single node. However, this may be confusing as reported in the user study. Su et al. [2009a] proposed an inspiring methodology for representing revision history as an in-place graphic instead of abstract timelines. However, we could not identify a coherent data structure for practical revision control in their work. Highly relevant to our work, Chronicle [Grossman et al. 2010] records user workflow histories and allows their local playbacks through videos. With a smart design of various filters and probes, users can review their works effectively. However, this system is not about revision control and cannot handle non-linear histories. Graph structure for computational tasks Many computational tasks utilize a certain graph structure for modeling, e.g. visualization flows [Levoy 1994; Bavoil et al. 2005]. Our method is similar to these examples of prior art in that we also use DAG, a kind of graph structure, for workflow management. However, our system aims at automatic construction of DAG from user interactions whereas in these visualization systems the users are expected to directly construct the flow pipeline. In a sense, our goal for automatic construction is similar to the work on shading models [Cook 1984; Abram and Whitted 1990] even though we focus on a different domain of revision control for image editing. Graph structures have also been applied to solid modeling [Convard and Bourdot 2004], where the history graph allows the modification of editing param-\n        ACM Transactions on Graphics, Vol. 30, No. 4, Article 105, Publication date: July 2011.\n        Nonlinear Revision Control for Images\n        ?\n        105:3\n        \n          \n          Figure 2: Revision control user interface.\n        \n        Users can perform revision control functions via the right-click menu within the revision control window (right), which also visualizes the revision history through RevG. When a RevG node is selected, its corresponding spatial context will be highlighted via a bounding box in the main GIMP window (left).\n        eters, such as the length of certain object components. However, the proposed technique is more for replaying graphical history than full-fledged revision control. Highly related to our work, Generic Graphical Library (GEGL), the future core of GIMP, also used a DAG representation. Although GEGL shares a similar graph representation like ours, it is mainly designed as the internal infrastructure for non-destructive image editing on GIMP. Nodes in the DAG can be image editing operations or low-level data structure like image buffers, thus the generated DAG is typically not comprehensible to the users. Compared to our DAG representation, GEGL also does not consider the semantic relationship between operations.\n      \n      \n        3 Core Ideas\n        Here, we describe our two core data structures, DAG and RevG. Based on these we then describe our external user interface in Section 4 and internal system implementation in Section 5.  DAG This is our core data structure representing action-based revision history. A DAG is composed of nodes and directed edges. DAG nodes represent image editing operations with relevant information including types, parameters and applied regions. DAG edges represent the relationships between the operations. A (directed) sequential path between two nodes implies a spatial and/or semantic dependency and the path direction implies their temporal order. In contrast, multiple parallel paths between two nodes imply independent operation sequences, e.g. those that apply on disjoint regions or incur orthogonal semantics. The DAG faithfully records the user editing operations and gradually grows as more revisions are committed. Each revision in our system is a sub-graph of the DAG containing the root node which represents the act of initialization, i.e. opening an empty canvas or loading an existing image. The state of the revision is always equivalent to the result generated by traversing its corresponding sub-graph. Note that when dealing with image data, many modern state-based revision control systems (e.g. GIT, SVN and CVS) store separate images as revisions. While in our system, the DAG encodes only actions, not whole images. RevG Due to the potentially high complexity and large size of DAG, we do not directly expose it to ordinary users. Instead, we visualize it via a state-based revision graph, which we call RevG. Each RevG is essentially a multi-resolution graph visualization of the underlying DAG which is the highest resolution of the revision history. Specifically, each RevG node is the aggregation of one or more DAG nodes and RevG edges are the corresponding DAG\n        rigid transformation translation, rotation deformation scale, shear, perspective color and filter hue, saturation, color balance, birhgtness, contrast, gamma, color fill, blur, sharpen edit copy, paste, anchor, add layer, layer mask brush brush, pencil, eraser\n        \n          Table 1: Supported operations and their classes. Classes in the first three\n        \n        rows are semantic independent. Each font color above indicates border color of a RevG node with the corresponding operation class.\n        edges after graph simplification. However, unlike the DAG, which is an abstract representation, we visualize each RevG node with a thumbnail according to the underlying DAG actions. Our RevG presents both revision branching and operation dependency in a unified representation. In particular, even for a linear revision history, the RevG can still exhibit non-linear parallel structures due to spatial or semantic independencies between operations, such as the editing example in Figure 1 . Through RevG, users can easily navigate at different resolutions as well as perform all revision control functions such as addition, diff, branching, merging, and conflict resolving ( Figure 2 ).\n      \n      \n        4 User Interface\n        Our UI is a single window displaying the RevG within which revision control commands are issued ( Figure 2 ). Below we describe the main usage scenarios of our system.\n        \n          4.1 Revision Navigation\n          To accommodate potentially complex revision history, RevG provides a multi-resolution view. Users can continuously navigate between different levels of detail, from the coarse revision resolution ( Figure 3a ) to fine action resolution ( Figure 3b ), as well as use our constrained navigation mechanism to focus on specific subsets of actions (please refer to the supplementary video). Similar to prior thumbnail-based revision graph designs [Kurlander 1993; Klemmer et al. 2002], we directly embed the thumbnail image within each RevG node. We also designate each node with a descriptive text label and border color signaling its type ( Table 1 ). To further facilitate interaction, we also provide a bi-directional selection mechanism between the main GIMP window and the RevG . By clicking on a RevG node, the bounding rectangle of the corresponding modified regions will be highlighted ( Figure 2 ). Conversely, by selecting an image region, the corresponding RevG nodes will be highlighted.\n        \n        \n          4.2 Revision Diff\n          To extract differences between text files, a common approach is the classic line-based diff [Hunt et al. 1998]. However, there is no such well-defined difference tool for images. Among all general image comparison visualization approaches, popular ones include sideby-side comparison (e.g. Adobe Bridge, Perforce), layer-based difference (e.g. PixelNovel), per-pixel difference, image overlay (e.g. Wet Paint [Bonanni et al. 2009]), and flickering difference regions (e.g. the compare utility of ImageMagick). These approaches are designed to handle only low level bitmap differences with little information about the editing semantics. In contrast, our system has all the relevant high level information recorded in the DAG for informative diff. We have designed two revision diff visual mechanisms. The first one is the RevG itself ( Figure 3 ), which users can directly interact with to obtain visual clues about the involved editing operations. The second is a standalone diff UI that can be triggered by selecting two RevG nodes ( Figure 4 ). The diff UI provides a side-by-side parallel comparison between revisions as well as sequential replay\n          ACM Transactions on Graphics, Vol. 30, No. 4, Article 105, Publication date: July 2011.\n          105:4\n          ?\n          H.-T. Chen et al.\n          \n            \n            \n            \n            \n            \n            \n          \n          source rev_0_1\n          (a) coarser resolution\n          \n            Figure 3: Multi resolution RevG. Our system automatically displays the RevG in proper resolution depending on the viewing conditions and user preferences.\n            \n          \n          \n            Figure 4: Diff UI.\n          \n          The preview window (left) shows the editing process between two revisions (middle & right) . Users can manually drag the slider for a particular state or click on the play button for automatic playback. The refresh button would flicker between the two revisions for quick comparison. Users can also turn on the bounding box of difference regions (e.g. the cat reflection). Please refer to the supplementary video for detailed actions.\n          of the in-between actions. The replay speed depends on the underlying RevG resolution. Specifically, when the diff UI is invoked from RevG, we extract 15 steps (or all if the total number is under 15) according to their visual importance to avoid potentially lengthy animation. We also provide a refresh button to flicker between two revisions for in-place comparison as well as a checkbox to highlight the bounding box of difference regions. Note that our system can provide meaningful information to users by ignoring global edits (e.g. gamma correction in Figure 4 ) and emphasize only local modifications, a task which is difficult to achieve with only low-level bitmap information.\n        \n        \n          4.3 Add Revision\n          Adding revisions (a.k.a ?checking-in?) is one of the most frequently used revision control commands. In our system, to save the current work progress as a new revision, users can simply issue the command within the revision control window ( Figure 2 ). Although users can check-in revisions whenever they like, it is generally unnecessary for them to do so in an action-wise fine-grained fashion, since our system can record all the actions and flexibly visualize them with RevG (Section 4.1). As a general guideline, we encourage users to check-in when one of the following two conditions is met: 1) some milestone of the work is achieved, or 2) when users would like to try out different variations. In the latter case, the committed revision can be used as a branch point for future reference or revision rollback, as detailed below.\n        \n        \n          4.4 Revision Branch and Merge\n          Branch In the process of software development, many programmers, especially those who work alone or with few other people, might not use the branch command that often. Nevertheless, in the context of open-ended creative content production (e.g. image editing and digital sketching), branching becomes essential even in the usage scenario of a single user. As described in [Terry and Mynatt 2002a; Hartmann et al. 2008], it is common for artists to perform trial-and-error experiments to reach the best outcomes. The rich history keeping of such trial-and-error process and the ability to keep multiple versions (branches) of the design could signifi-\n          \n            \n            \n            \n            \n            \n          \n          brush brush brush brush brush rev_0_2 (b) finer resolution\n          \n            \n          \n          (a) merge UI\n          \n            \n            Figure 5: UI for revision merging.\n          \n          left and (b) right trunk are only revisions (c) to branch be merged after while trunk the center (d) branch is the preview only of the merge result. (b) is the automatic merge (a) shows result. the Non-conflict merge UI. Images edits (gift at and snowman) are automatically merged while for conflict ones (ornamental strips and balls) the trunk version is chosen by default. Our system also allows users to change the default behavior, including branch-after-trunk (c) by clicking the blue circled button once, branch-only (d) by clicking the blue circled button twice, and trunk-after-branch.\n          left and right are revisions to be merged while the center is the preview of the merge result. (b) is the automatic merge result. Non-conflict edits (gift and snowman) are automatically merged while for conflict ones (ornamental strips and balls) the trunk version is chosen by default. Our system also allows users to change the default behavior, including branch-after-trunk (c) by clicking the blue circled button once, branch-only (d) by clicking the blue circled button twice, and trunk-after-branch.\n          cantly support designers to achieve their creative goals [Shneiderman 2007]. Similar to the ?add revision? command, branches can be easily created within the revision control window ( Figure 2 ). Merge Merge can be performed between two revisions, either (1) both checked-in (trunk and branch) or (2) one trunk and one local (not yet checked in) copy. Our system first performs an automatic merge between non-conflicting edits (via our graph merge algorithm described in Section 5.4). We also provide a merge UI for manual resolving conflicts as well as for allowing users to change the default merge results. Since our UI and system implementations are very similar for scenarios (1) and (2), for clarity of presentation we will focus on scenario (1) in subsequent descriptions. The automatic merge can already provide satisfactory results under usual circumstances and requires no further manual intervention from the user. As shown in Figure 5b , the non-conflict contents are automatically merged while, for conflicted ones, the content from the trunk is chosen by default. When automatic merged results are not satisfactory, or there are conflicted scenarios that cannot be automatically resolved, users can invoke our merge UI ( Figure 5a ). The merge UI contains two revision images and the preview result. The user can interactively drag, zoom, and select the region of interest (the red rectangle in the figure). User interactions are synchronized among all three images for easy comparison. Once a region is selected, there are four possible merge combinations: trunk only, branch only, trunk after branch, or branch after trunk. All these can be achieved via simple button clicks. Take Figure 5 for example. If we would like to put the ornamental balls (branch) over the strips (trunk), we could simply select the tree (red rectangle) then single click on the right button (marked with a blue circle) and the result is shown in Figure 5c . Or, if we want to completely replace the strip with the ornamental balls (branch only), it can be done by clicking on the button twice ( Figure 5d ). Figure 6 is another interesting example that clearly demonstrates the effects created via the four combination modes.\n          ACM Transactions on Graphics, Vol. 30, No. 4, Article 105, Publication date: July 2011.\n          Nonlinear Revision Control for Images\n          ?\n          105:5\n          \n            \n          \n          (a) trunk only (coloring) (b) branch only (cloning)\n          \n            \n          \n          (c) trunk after branch (d) branch after trunk\n          \n            Figure 6: Another merge example. (e) is the source image, and (a) to (d) show different combinations of trunk and branch results.\n            \n          \n          (e) source\n        \n      \n      \n        5 System Implementation\n        For practical usage and evaluation, we have fully integrated our revision control system with GIMP. Referencing the architecture of open source visualization systems, including Prefuse [Heer et al. 2005] and the Kitware visualization toolkit, we have built a flexible revision control framework by orthogonalizing the main modules: GIMP core, UI/renderer frontend, and revision control backend ( Figure 7 ). This design provides flexibility for easy integration with different systems. More specifically, we have modified the GIMP core and added two main components: logger for recording user actions and replayer for replaying actions. The revision control core communicates with GIMP via its official gimplibrary interface. Recorded logs and other revision control information are stored in the repository. The logs are analyzed and transformed into DAG, which are further simplified through various filters into RevG. Finally, RevG is rendered in the frontend renderer based on GTK+.\n        \n          5.1 Logger and Replayer\n          The logger silently records user editing actions in the background in the form of text logs and these can be replayed in the GIMP via the replayer. Consecutive identical logs are consolidated similar to [Grabler et al. 2009]. At its latest version 2.8, GIMP has not yet provided any API for command logging. Consequently, to obtain a fine-grained command log, we have to manually hard-wire commands to the logger. On the other hand, operation replay can be easily achieved through the procedure database (PDB) architecture in GIMP, where most image editing functions are registered and can\n          Editing Software UI Frontend (GIMP) Logger Replayer Renderer (GTK) Revision Control Backend Repository DAG RevG Construction DAG Filters\n          \n            Figure 7: Major components of our system.\n          \n          With clean separation between GIMP, core revision control backend, and frontend renderer, our system can be easily integrated with other image editing software or operating systems.\n          be invoked via libgimp. Nevertheless, with the rapid evolution of GIMP, not all new functions have been added into the PDB properly. For example, functions related to brushes are out-dated and require manual registration. Hopefully, operation recording and replaying would be easier after GIMP developers implement the long desired feature of macro recording.  Log An action log consists of its action name, action parameters, layer ID and a selection mask. For brush and sketching actions, their mouse/stylus motions and pressures are also stored. In our prototype, logs are stored in an ascii format.\n        \n        \n          5.2 Repository and DAG\n          When a new revision is committed, the corresponding action logs are transferred from GIMP into the repository and constructed into DAG. For orthogonal implementation, we store the logs in a linear data structure with DAG nodes containing pointers to the corresponding logs.  Operation dependency Our DAG records two kinds of dependencies: spatial and semantic. Spatial dependency considers the spatial relationships between operations; they are spatially independent if their regions of operations do not overlap. As for semantic dependency, we categorize operations into five different classes as shown in Table 1 in which the first three rows are semantically independent (see also [Su et al. 2009a]). Semantically independent operations applied on the same object or region are put into parallel paths ( Figure 1 ). DAG construction We build the DAG by sequentially inserting each action into the graph with one DAG node corresponding to one action. When inserting a node, the insertion algorithm would search for dependent nodes already in the DAG. If some dependent nodes are connected (i.e. there are paths between them), the latest one among them is picked. The procedure can be done efficiently by a post-order DFS and is detailed in Algorithm 1.\n        \n        \n          5.3 Filters\n          Our system creates RevG from DAG interactive by applying a list of ?filters?, including a viewport filter for culling RevG nodes/edges outside the current viewport, a layout filter for determining the position, path, shape and color of RevG nodes (via the classical hierarchical layout algorithm [Gansner et al. 1993]), and a visual importance filter as detailed in the following paragraph. Note that we provide a generic filter interface so that users with sufficient programming skills can create customized filters.  Visual importance filter The purpose of the visual importance filter is to dynamically simplify a DAG into a RevG for proper display. The visual importance filter has two stages. First, it assigns a visual importance value to each DAG node. Second, it filters the DAG into RevG according to the threshold assigned to the current RevG window resolution. The visual importance value v of a DAG node n, which contains one action act(n), is determined by two major factors: image content difference I(n, m) and action context A(n, m). It can be expressed as follows: 1 v(n) = I(n, m)A(n, m) (1) w m?N (n) where m is a neighboring node of n in DAG within distance w, for which we set to be 2 in our current implementation. Here, I(n, m) is simply the low-level per-pixel difference between the images after applying act(n) and act(m). On the other hand, A(n, m) takes advantage of the high-level information recorded in the DAG. It assigns higher visual importance to actions with different types or parameters among its neighbors while penalizing those with similar or identical actions, such as repetitive strokes commonly seen in digital sketching. More specifically, if act(n) and act(m) are of different types or parameters, then A(n, m) = 10 d , where d is the distance between n and m in the DAG; otherwise, A(n, m) = 1. A(n, m) is actually a very flexible term and can be fine-tuned to fit user requirements. For example, we give the operation ?add layer? a higher value (100 in our implementation), as our user study indicated that it is very useful to see the operations history on a layer basis (please see Section 7 for more detail). For I(n, m), it is possible to deploy more sophisticated metrics that consider visual attention and perceptual image analysis such as [Itti et al. 1998; Yee et al. 2001]. However, they are generally computationally expensive and restricted to certain scenarios. The advantage of our system is that, in addition to the low-level bitmap information, we also have the high-level information about the editing operations. By combining the low-level I(n, m) with the highlevel A(n, m), our system already provides satisfactory results. After assigning visual importance values to all nodes, we traverse the DAG in the DFS order and accumulate the visual importance values. Once the accumulated value is higher than the threshold value of current resolution, the corresponding nodes in the DAG are clustered into a single RevG node. After the node clustering, we add back the graph edges. The procedure is similar to classical multi-resolution mesh simplification [Hoppe 1996] and graph visualization [Fairchild et al. 1999; Heer and Card 2004].\n          ACM Transactions on Graphics, Vol. 30, No. 4, Article 105, Publication date: July 2011.\n          105:6\n          ?\n          H.-T. Chen et al.\n          Algorithm 1 Node Insertion // c : node to be inserted into DAG // P : parents of c, initialized as empty // L : nodes in DAG in the order of post-odering DFS while L = ? do v = pop f ront(L) if v and c are dependent then P = P ? v remove parents of v from L end if end while insert directed edges from nodes in P to c.\n        \n        \n          5.4 Revision Control Commands\n          Revision diff In our system, the problem of extracting differences between two revisions can be posed as a graph difference problem of the underlying DAGs. For graph difference, computing one-toone correspondence between the nodes from scratch is equivalent  to isomorphism, a NP-complete problem [Cook 1971]. Fortunately, in our case, we can extract common nodes between two DAGs by matching their labels (as recorded from the original action logs). The rest would be the difference nodes, from which we could implement various diff visualization mechanisms as described in Section 4.2. Note that when two revisions lie on different branches, it is possible to have DAG nodes with different labels that actually represent identical editing operations. Here we simply treat operations with different labels as real differences and have found such approximation satisfactory for diff visualization. Algorithm 2 Automatic Merge // G i , G j , DAG of trunk and branch revision, G m , DAG after merge // L : nodes in G j in the order of BFS // CL : conflict list G m ? G i while L = ? do v = pop f ront(L) if v conflicts with nodes in G m then remove children of v from L push v and its children into CL else insert v into G m with Algorithm 1 end if end while Revision merge Similar to revision diff, revision merge also works on the DAG level. The automatic merge algorithm searches for conflicts between two graphs, merges the non-conflict nodes together and outputs a conflict list, which users could manually resolve via our merge UI. As described in Section 4.4, by default we use the trunk only option for conflict resolution. The pseudo-code of the merge algorithm is provided in Algorithm 2. Our merge UI also provides users with the flexibility to merge arbitrary regions ( Figure 5 ). This is achieved by applying Algorithm 2 to DAG nodes whose actions correspond to the selected image regions.\n        \n      \n      \n        6 Examples\n        In this section, we demonstrate several usage examples of our system, for both image editing and digital sketching applications. In addition to basic revision control, we also demonstrate potential usage of our system as a creativity support tool.  Image editing Figure 8 and 9 are two practical image editing examples where many popular image compositing and photo retouching techniques were used. From the embedded thumbnail images and underlying text labels in the RevG nodes, users can clearly identify the involved operations and their dependencies. With RevG, users can easily review their own work or learn from others. We show the RevGs of these two figures at different levels of detail to demonstrate the multi-resolution feature of our representation. Digital sketching Figure 10 and Figure 11 are two digital sketching examples produced by our collaborating professional artist. Each example consists of about one thousand actions, which exceeds the maximum size of state-based undo history stack of GIMP. Our system faithfully recorded all actions and can reproduce the whole digital sketching sessions. As shown in the figures, RevG provides a compact and informative visualization of the sketching history by laying out independent operations in parallel paths and clustering together actions with similar parameters. Creativity support tool In addition to revision control, our system can also facilitate design space exploration, an essential task\n        ACM Transactions on Graphics, Vol. 30, No. 4, Article 105, Publication date: July 2011.\n        Nonlinear Revision Control for Images\n        ?\n        105:7\n        \n          \n          \n        \n        (a) before (b) after\n        \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          Figure 8: An image compositing example.\n        \n        (c) RevG at the finest resolution A fake reflection of the cat is created to enhance the richness of the photograph. Gamma adjustment is first applied followed by the copy and paste procedures. An additional layer mask is also used to correct the occlusion between reflection and window.\n        for creativity support tools [Shneiderman 2007]. With our system, it is possible to nonlinearly adjust the parameters of previous operations as shown in Figure 12 . Given a user selected image region, our system would search for the related editing operations and prompt the dialog for parameter tuning ( Figure 12a ). It also provides an intuitive nonlinear selective undo function where users can select any region on the image and undo the associated operations, similar to [Su et al. 2009a; Kurlander 1993]. In Figure 12d , we undo the operations applied on one eye without affecting other regions, which is difficult to achieve with a linear history stack provided by most image editing systems. Finally, our system also provides selective replay as proposed in [Grossman et al. 2010] where users can nonlinearly replay operations corresponding to specific regions of interest. Our merge UI provides an additional tool for creating different variations. An example is shown in Figure 13 . It is common for artists to first finish up the main components (character in this example) and then to try out all kinds of decorations by using different layers. However, this can require a careful separation of items into layers while ensuring that the number of layers is manageable. With our system, users could simply draw the alternatives on one layer, save the revision, and create the variations with our merge UI.\n      \n      \n        7 Evaluation\n        Since our system is the first for comprehensive image revision control, it is difficult to perform a summative usability test to compare it with other systems [Lau 2010] or to devise general performance metrics on these creative production tasks. Instead, we provide two evaluations for our system: (1) a formative user study conducted during and after our development cycles to shed light on the rationales behind our UI design and the efficacy of our system, and (2) an objective performance comparison on storage size with other revision control systems.\n        \n          \n          \n        \n        (a) before (b) after\n        \n          \n          \n          \n          \n          \n          \n          Figure 9:\n        \n        (c) RevG An image retouching example. Several popular image retouching techniques are applied in this example, including clone brush and hue/balance adjustment for eye sharpening, eye whitening, eye bag removal, and teeth whitening.\n        \n          7.1 Formative Usability Study\n          In our early development cycle, we collaborated with one professional illustrator and two CS graduate students with significant experience of photo shoots and retouching to help our UI design process. At a later stage, we recruited two more professional industry designers, whose daily work involved the use of image editing software such as Adobe Photoshop and Painter, and two more CS graduate students.  Prior practice Among the participants, only the CS students have experience with revision control systems. Nevertheless, all participants have their own practice for data management and version control for either solo or team projects. One common ad-hoc approach deployed by all participants is to categorize projects into different folders and save the data with informative filenames, usually containing the creation date and simple comments. One participant also mentioned that his company required him to compress and archive files on a weekly basis for potential future reference. The major downside of this approach is that as the project expands the users could easily lose track of the revisions with numerous files scattered in different folders. Some manual version control approaches are based on functions provided by specific tools. For example, artists commonly use the layer function in image editing software (e.g. GIMP and Adobe Photoshop) for saving different design variations. By toggling the visibility of layers, they can explore different design combinations and alternatives. However, as the number of layers increases (our collaborating artist showed us a case with 40+ layers), keeping variations as layers could make the already difficult layer management even harder. Furthermore, there is also no easy way to browse through these variations stored as layers.\n          ACM Transactions on Graphics, Vol. 30, No. 4, Article 105, Publication date: July 2011.\n          105:8\n          ?\n          H.-T. Chen et al.\n          \n            \n            \n          \n          (a) sketch (b) final image\n          \n            \n          \n          brush\n          \n            \n            \n          \n          source\n          rev_0_1\n          \n            \n            \n            \n            \n            Figure 10: A digital sketching example.\n          \n          brush brush brush brush (c) RevG The artist performed 649 brush strokes and employed three layers for the color palette, face, hair, and body. Note that our visual importance filter clusters operations with similar parameters (e.g. brush color) together.\n          Early design To address these issues discussed above, a natural solution is to use DAG as the core of our system as any revision history can be represented as a DAG. During the early phase of our project, one major design decision is about how to present the revision information encoded in the underlying DAG to the users. In our early prototype, we attempted to expose the DAG directly with relevant tools such as semi-auto node aggregation and annotation as well as the ability for direct DAG manipulation. The CS students and the authors have found such tools complicated but powerful and interesting. On the other hand, the collaborating artist was not interested in such fine-grained operations; rather than dealing with an abstract DAG, the artist preferred to directly interact with images.  Current design Based on the feedback, we have made two key design decisions: 1) hide DAG from ordinary users and visualize it through RevG, and 2) direct all revision control mechanisms through RevG and the revision window. These keep our revision control system easy to use and comprehend, and combinable with the main image editing window (GIMP in our particular implementation). Specifically, users can still perform the ordinary image editing operations and our nonlinear exploration ( Figure 12 ) with the main GIMP window, and interact with our RevG only for revision control commands. The two are naturally connected via the bidirectional mechanisms where selections made on image regions will automatically lead to the corresponding RevG nodes and vice versa (see Figure 2 and 12). User study In the post design user study, we brought in two more industrial designers and two more CS graduate students as test subjects. After a brief tutorial and demonstration of our system, we assigned them two kinds of tasks: (1) execution, where subjects perform their familiar image editing projects (digital sketching or photo retouching) while issuing revision controls through our system and (2) cognition, where subjects are given some pre-recorded examples with RevG and asked to deduce the involved editing op-\n          \n            \n            \n          \n          (a) sketch (b) final image\n          \n            \n            \n            \n            \n          \n          source\n          \n            \n          \n          rev_0_1\n          \n            \n          \n          brush\n          \n            \n          \n          brush\n          \n            c\n            RevG\n          \n          \n            Figure 11: Another digital sketching example. The artist employed 1391 operations and four layers for the palette, face, hair, and clothing.\n          \n          erations. Overall, subjects expressed no difficulty in performing basic revision control functions such as checking-in, branching, merging, and revision history navigation. Some subjects even commented that they were happy enough even with a subset of our system to save and roll back revisions. For both tasks, we have observed that subjects tend to stay longer on the coarser RevG resolutions while they are more tentative on venturing into finer resolutions. For task 1, it is understandable since subjects should have innate knowledge of the editing process and thus do not need to consult the finer RevG resolutions. As for task 2, the collected comments suggest that subjects did find the finer-resolution helpful especially when some subtle or unfamiliar effects are involved. However, finer-resolution RevG also means more thumbnail images to analyze and memorize, so subjects tried to stay on coarser resolutions as long as they can comprehend the operations. Some participants also invoked the revision diff tool and manually adjusted the slider back and forth for task 2. Their comments for such a decision were that they preferfed seeing the progress of modification in a single preview window in the speed they want for better temporal context and easier identification of modified contents. For digital sketching, the subjects commented that they care more about the temporal order of strokes than the semantic dependency in RevG. However, they also commented that it is very helpful for our RevG to display brushes applied on different layers in different paths (e.g. Figure 10 ), which is similar to a layer-based history list, a long desired function for artists. This indicated a practical benefit of our non-linear revision structure. Notably, our collaborating artist is especially interested in the stroke-by-stroke replay.\n          ACM Transactions on Graphics, Vol. 30, No. 4, Article 105, Publication date: July 2011.\n          Nonlinear Revision Control for Images\n          ?\n          105:9\n          \n            \n            Figure 12: Nonlinear exploration.\n          \n          (d) rough selection (e) selective undo Given a rough selection region (a), our system would search for the relevant operations and adjust their parameters as intended (b). (c) shows a possible variation created via this function. Similarly, selective undo can be easily achieved for side-by-side\n          (d) rough selection (e) selective undo Given a rough selection region (a), our system would search for the relevant operations and adjust their parameters as intended (b). (c) shows a possible variation created via this function. Similarly, selective undo can be easily achieved for side-by-side comparison or non-linear editing (d) (e).\n          He commented that it is generally difficult to deduce the original painting operations merely from the final flattened image; with our system, one can truly appreciate others? technique and more importantly one?s own drawing logic. Most participants thought that revision merge is very interesting and has a lot of potential but might take some time and practice to completely immerse into their daily work flows. Nevertheless, they like the possibility of creating multiple variations with our UI without worrying about the underlying layers (in contrast to their prior practice) while having fun creating variations as in Figure 13 . In summary, our user study indicates that our system is indeed easy (and sometimes fun) to use, and helpful for revision control image editing projects, even though it might take some time and practice to sink in. For execution tasks (e.g. revision control during image editing) the participants mostly stick to a single RevG resolution, while for cognition tasks (e.g. reviewing or exploring) they find the multi-resolution RevG informative. They also comment that our nonlinear revision history is very helpful in depicting editing information, especially for potentially complex layer structures. In addition to core revision control, participants also find our system conducive for their creative processes.\n        \n        \n          7.2 Performance\n          The storage consumption of our system is particularly small compared to other image editing and revision control systems, such as GIMP (.xcf file), GIT, and SVN, as shown in Table 2 . For all figures, we divide the whole editing process into four revisions, and commit them to the revision repository. The storage overhead of our system mainly comes from the cached thumbnail images. The overhead of internal data structures for GIT and SVN are not precisely calculated here, but our advantage on storage size is clear. Regarding computation speed, our system runs at interactive speed, and users of our system have not found any slowdown compared to\n          \n            Figure 13: Revision merge as a creativity support tool.\n          \n          merge UI. Note that only one layer is used for all operations. the original GIMP or other revision control systems.\n          \n            \n              \n                \n                  \n                     input\n                     # op\n                     GIMP\n                     SVN\n                     GIT\n                     our\n                  \n                \n                \n                  \n                     502\n                     11\n                     2.7K\n                     2.1K\n                     2.0K\n                     640\n                  \n                  \n                     1.6\n                     672\n                     267\n                     224\n                     180\n                     73\n                  \n                  \n                     945\n                     11\n                     3.5K\n                     3.7K\n                     3.6K\n                     1.3K\n                  \n                  \n                     276\n                     10\n                     972\n                     1.2K\n                     1.2K\n                     420\n                  \n                  \n                     377\n                     649\n                     2.3K\n                     2.4K\n                     2.5K\n                     652\n                  \n                  \n                     425\n                     1391\n                     2.5K\n                     2.7K\n                     2.7K\n                     775\n                  \n                \n              \n            \n            input # op GIMP SVN GIT our 502 11 2.7K 2.1K 2.0K 640 1.6 672 267 224 180 73 945 11 3.5K 3.7K 3.6K 1.3K 276 10 972 1.2K 1.2K 420 377 649 2.3K 2.4K 2.5K 652 425 1391 2.5K 2.7K 2.7K 775\n            Table 2: Storage size compaison. All sizes are expressed in K-bytes.\n          \n        \n      \n      \n        8 Limitations and Future Work\n        The main limitation of our current implementation is that it is integrated into a single tool (GIMP) instead of a general mechanism that can work with arbitrary image editing softwares. Popular image editing tools, e.g. Photoshop and Painter, have with their own built-in history mechanisms. We would like to have a universal revision control interface to facilitate the automatic integration of our revision control system in a heterogeneous multi-tool environment. Our current prototype system is implemented primarily for a single user as it is the predominant usage scenario for current artistic workflows. However, proposed algorithms and system framework directly support multiple users, and the UI can be easily extended for that too. In particular, all one needs to do is to adopt a clientserver model, implementing our revision control backend on the server side with the UI frontend and image editor on the client side. In our current design phase, we have only conducted the usability study with a few subjects (one professional artist, two industrial designers and four CS graduate students). The ideal test bed is to integrate our system into a commercial studio?s pipeline. However, it is rather difficult to find a studio using GIMP as their main tool. Nevertheless, we do hope the release of our source code in the public domain can help us gather more user feedback. In this paper we focused mainly on images, but we believe similar principles are applicable to other binary graphics assets, such as videos, meshes, or animation data. Extending revision control to these data types could be another potential future work direction.  Acknowledgements We would like to thank Eugene Lei for digital sketching examples and valuable comments, Sin-Jhen Chiu at DigiMax and Chuan-Chang Wang at Next Media Animation for their insights on the commercial animation production pipeline, Eric Stollnitz for video dubbing, Duncan Stevenson and the SIGGRAPH English Review Service for proofreading, as well as KeSen Huang and the anonymous reviewers for their valuable suggestions. This work is supported in part by National Science Council (Taiwan) under grant NSC 98-2220-E-003-001.\n        ACM Transactions on Graphics, Vol. 30, No. 4, Article 105, Publication date: July 2011.\n        105:10\n        ?\n        H.-T. Chen et al.\n      \n      \n        References\n        \n          A BRAM , G. D., AND W HITTED , T. 1990. Building block shaders. In SIGGRAPH ?90, 283?288.\n          B AVOIL , L., C ALLAHAN , S. P., S CHEIDEGGER , C. E., V O , H. T., C ROSSNO , P. J., S ILVA , C. T., AND F REIRE , J. 2005. Vistrails: Enabling interactive multiple-view visualizations. In Visualization 2005, 135?142.\n          B ONANNI , L., X IAO , X., H OCKENBERRY , M., S UBRAMANI , P., I SHII , H., S ERACINI , M., AND S CHULZE , J. 2009. Wetpaint: scraping through multi-layered images. In CHI ?09, 571?574.\n          C ONVARD , T., AND B OURDOT , P. 2004. History based reactive objects for immersive cad. In SM ?04: Symposium on Solid modeling and applications, 291?296.\n          C OOK , S. A. 1971. The complexity of theorem-proving procedures. In STOC ?71: Symposium on Theory of computing, 151? 158.\n          C OOK , R. L. 1984. Shade trees. In SIGGRAPH ?84, 223?231.\n          E DWARDS , W. K., AND M YNATT , E. D. 1997. Timewarp: techniques for autonomous collaboration. In CHI ?97, 218?225.\n          E DWARDS , W. K., I GARASHI , T., L A M ARCA , A., AND M YNATT , E. D. 2000. A temporal model for multi-level undo and redo. In UIST ?00, 31?40.\n          E STUBLIER , J., L EBLANG , D., H OEK , A. V . D ., C ONRADI , R., C LEMM , G., T ICHY , W., AND W IBORG -W EBER , D. 2005. Impact of software engineering research on the practice of software configuration management. ACM Trans. Softw. Eng. Methodol. 14, 4, 383?430.\n          F AIRCHILD , K. M., P OLTROCK , S. E., AND F URNAS , G. W. 1999. Readings in information visualization. ch. SemNet: threedimensional graphic representations of large knowledge bases, 190?206.\n          G ANSNER , E. R., K OUTSOFIOS , E., N ORTH , S. C., AND V O , K.P. 1993. A technique for drawing directed graphs. IEEE Trans. Softw. Eng. 19, 3, 214?230.\n          G RABLER , F., A GRAWALA , M., L I , W., D ONTCHEVA , M., AND I GARASHI , T. 2009. Generating photo manipulation tutorials by demonstration. In SIGGRAPH ?09, 66:1?9.\n          G ROSSMAN , T., M ATEJKA , J., AND F ITZMAURICE , G. 2010. Chronicle: capture, exploration, and playback of document workflow histories. In UIST ?10, 143?152.\n          H ARTMANN , B., Y U , L., A LLISON , A., Y ANG , Y., AND K LEM MER , S. R. 2008. Design as exploration: creating interface alternatives through parallel authoring and runtime tuning. In UIST ?08, 91?100.\n          H EER , J., AND C ARD , S. K. 2004. Doitrees revisited: scalable, space-constrained visualization of hierarchical data. In AVI ?04: Proceedings of the working conference on Advanced visual interfaces, 421?424.\n          H EER , J., C ARD , S. K., AND L ANDAY , J. A. 2005. prefuse:\n          a toolkit for interactive information visualization. In CHI ?05, 421?430. H EER , J., M ACKINLAY , J., S TOLTE , C., AND A GRAWALA , M. 2008. Graphical histories for visualization: Supporting analysis, communication, and evaluation. IEEE Transactions on Visualization and Computer Graphics 14, 6, 1189?1196.\n          H OPPE , H. 1996. Progressive meshes. In SIGGRAPH ?96, 99?108.\n          H UNT , J. J., V O , K.-P., AND T ICHY , W. F. 1998. Delta algorithms: an empirical analysis. ACM Trans. Softw. Eng. Methodol. 7, 2, 192?214.\n          I TTI , L., K OCH , C., AND N IEBUR , E. 1998. A model of saliencybased visual attention for rapid scene analysis. IEEE Trans. Pattern Anal. Mach. Intell. 20 (November), 1254?1259.\n          J ACKSON , D., AND L ADD , D. A. 1994. Semantic diff: A tool for summarizing the effects of modifications. In ICSM ?94: Proceedings of the International Conference on Software Maintenance, 243?252.\n          J ACOBSEN , J., S CHLENKER , T., AND E DWARDS , L. 2005. Implementing a Digital Asset Management System: For Animation, Computer Games, and Web Development. Focal Press.\n          K LEMMER , S. R., T HOMSEN , M., P HELPS -G OODMAN , E., L EE , R., AND L ANDAY , J. A. 2002. Where do web sites come from?: capturing and interacting with design history. In CHI ?02, 1?8.\n          K URIHARA , K., V RONAY , D., AND I GARASHI , T. 2005. Flexible timeline user interface using constraints. In CHI ?05, 1581?1584.\n          K URLANDER , D. 1993. Chimera: example-based graphical editing. In Watch what I do: programming by demonstration, 271? 290.\n          L AU , T. 2010. Rethinking the systems review process. Commun. ACM 53 (November), 10?11.\n          L EVOY , M. 1994. Spreadsheets for images. In SIGGRAPH ?94, 139?146.\n          M YERS , B. A., M C D ANIEL , R. G., M ILLER , R. C., F ER RENCY , A. S., F AULRING , A., K YLE , B. D., M ICKISH , A., K LIMOVITSKI , A., AND D OANE , P. 1997. The amulet environment: New models for effective user interface software development. IEEE Transactions on Software Engineering 23, 347?365.\n          N AKAMURA , T., AND I GARASHI , T. 2008. An applicationindependent system for visualizing user operation history. In UIST ?08, 23?32.\n          S HNEIDERMAN , B. 2007. Creativity support tools: accelerating discovery and innovation. Commun. ACM 50 (December), 20? 32.\n          S U , S. L., P ARIS , S., A LIAGA , F., S CULL , C., J OHNSON , S., AND D URAND , F. 2009. Interactive visual histories for vector graphics. Tech. Rep. MIT-CSAIL-TR-2009-031, Massachusetts Institute of Technology, Computer Science and Artificial Intelligence Laboratory, June.\n          T ERRY , M., AND M YNATT , E. D. 2002. Recognizing creative needs in user interface design. In C&C ?02: Proceedings of the 4th conference on Creativity & cognition, 38?44.\n          T ERRY , M., M YNATT , E. D., N AKAKOJI , K., AND Y AMAMOTO , Y. 2004. Variation in element and action: supporting simultaneous development of alternative solutions. In CHI ?04, 711?718.\n          Y EE , H., P ATTANAIK , S., AND G REENBERG , D. P. 2001. Spatiotemporal sensitivity and visual attention for efficient rendering of dynamic environments. ACM Trans. Graph. 20, 1, 39?65.\n        \n        ACM Transactions on Graphics, Vol. 30, No. 4, Article 105, Publication date: July 2011.\n      \n    \n  ",
  "resources" : [ ]
}