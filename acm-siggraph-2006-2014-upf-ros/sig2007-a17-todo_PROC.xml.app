{
  "uri" : "sig2007-a17-todo_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2007/a17-todo_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Locally Controllable Stylized Shading",
    "published" : "2007",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Hideki-Todo",
      "name" : "Hideki",
      "surname" : "Todo"
    }, {
      "uri" : "http://drinventor/Ken-ichi Anjyo",
      "name" : "Ken",
      "surname" : "ichi Anjyo"
    }, {
      "uri" : "http://drinventor/William V. Baxter-III",
      "name" : "William V. Baxter",
      "surname" : "III"
    }, {
      "uri" : "http://drinventor/Takeo-Igarashi",
      "name" : "Takeo",
      "surname" : "Igarashi"
    } ]
  },
  "bagOfWords" : [ "recent", "progress", "non-photorealistic", "rendering", "-lrb-", "npr", "-rrb-", "have", "lead", "many", "stylized", "shading", "technique", "efficiently", "convey", "visual", "information", "about", "object", "depict", "another", "crucial", "goal", "NPR", "give", "artist", "simple", "direct", "way", "express", "abstract", "idea", "bear", "imagination", "particular", "ability", "add", "intentional", "often", "unrealistic", "shading", "effect", "indispensable", "many", "application", "we", "propose", "set", "simple", "stylized", "shading", "algorithm", "allow", "user", "freely", "add", "localized", "light", "shade", "model", "manner", "consistent", "seamlessly", "integrate", "conventional", "lighting", "technique", "algorithm", "provide", "intuitive", "direct", "manipulation", "method", "base", "paint-brush", "metaphor", "control", "edit", "light", "shade", "locally", "desire", "we", "prototype", "system", "demonstrate", "how", "we", "method", "can", "enhance", "both", "quality", "range", "applicability", "conventional", "stylized", "shading", "offline", "animation", "interactive", "application", "example", "Gooch", "Gooch", "-lsb-", "2001", "-rsb-", "develop", "lighting", "model", "change", "hue", "convey", "surface", "orientation", "edge", "location", "highlight", "3d", "technical", "illustration", "other", "hand", "application", "field", "digital", "animation", "video", "game", "significant", "demand", "locally", "controllable", "stylized", "light", "shade", "which", "can", "achieve", "result", "directable", "intentional", "often", "fictive", "yet", "ultimately", "more", "attractive", "can", "arise", "from", "complexity", "underlie", "geometry", "complexity", "lighting", "just", "result", "basic", "physics", "illumination", "director", "would", "like", "have", "ability", "have", "feature", "remove", "while", "retain", "other", "dark", "area", "other", "case", "might", "like", "request", "shaded", "area", "add", "below", "left", "eye", "show", "second", "image", "from", "leave", "Figure", "order", "emphasize", "character?s", "fierceness", "however", "satisfy", "diverse", "artistic", "requirement", "simultaneously", "would", "very", "hard", "almost", "impossible", "use", "only", "exist", "conventional", "lighting", "control", "and/or", "finetune", "parameter", "use", "we", "goal", "develop", "director-friendly", "methodology", "stylistic", "depiction", "light", "shade", "explain", "we", "approach", "more", "concisely", "we", "restrict", "discussion", "now", "make", "3d", "cartoon", "animation", "case", "due", "nature", "stylistic", "depiction", "technique", "use", "need", "physically", "realistic", "however", "must", "possess", "certain", "sense", "plausibility", "while", "meet", "directorial", "demand", "emphasis", "expressiveness", "over", "physical-realism", "imply", "we", "must", "rely", "animator?s", "creativity?more", "than", "automatic", "physically-based", "algorithms?to", "get", "desire", "animation", "therefore", "stylized", "shade", "approach", "should", "provide", "simple", "intuitive", "user", "interface", "so", "animator", "can", "easily", "interactively", "translate", "he", "she", "creative", "vision", "reality", "overall", "process", "approach", "we", "propose", "each", "keyframe", "user", "design", "and/or", "modify", "shaded", "area", "surface", "use", "paint-brush", "interface", "thereafter", "new", "surface", "brightness", "distribution", "automatically", "generate", "consider", "boundary", "constraint", "new", "surface", "brightness", "distribution", "keyframe", "automatically", "transmit", "all", "frame", "linear", "interpolation", "central", "idea", "we", "approach", "effect", "desire", "change", "light", "shade", "boundary", "modify", "lambertian", "l?n", "lighting", "term", "directly", "add", "scalar", "offset", "function", "after", "briefly", "survey", "related", "work", "section", "we", "describe", "main", "idea", "underlie", "algorithm", "section", "section", "we", "describe", "some", "implementation", "detail", "we", "prototype", "system", "however", "ours", "unique", "allow", "user", "add", "light", "shade", "paint", "they", "directly", "onto", "3d", "object", "without", "elaborate", "lighting", "control", "make", "stylistic", "animation", "key-framing", "we", "begin", "restrict", "ourselves", "3d", "cartoon", "animation", "where", "each", "shaded", "area", "assign", "uniform", "color", "thresholded", "lambertian", "shading", "-lrb-", "-lsb-", "Lake", "et", "al.", "2000", "-rsb-", "-rrb-", "painting", "process", "give", "keyframe", "involve", "interactively", "add", "light", "shade", "detail", "sculpt", "shape", "shade", "boundary", "give", "threshold", "thresholded", "lambertian", "shader", "create", "two", "-lrb-", "possibly", "disconnect", "-rrb-", "region", "which", "we", "call", "light", "dark", "area", "core", "idea", "behind", "we", "approach", "modify", "intensity", "distribution", "order", "make", "light", "area", "change", "desire", "i.e.", "so", "become", "note", "though", "globally", "define", "offset", "function", "should", "mostly", "zero", "except", "region", "immediately", "surround", "desire", "edit", "next", "we", "describe", "how", "construct", "offset", "function", "paint", "light", "area", "we", "can", "consider", "new", "shaded", "area", "have", "generalize", "intensity", "distribution", "give", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "instead", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "condition", "-lrb-", "-rrb-", "can", "see", "special", "case", "-lrb-", "-rrb-", "we", "define", "Keyframing", "modification", "make", "accord", "above", "algorithm", "integrate", "smoothly", "standard", "lighting", "equation", "many", "animation", "single", "offset", "function", "may", "suffice", "however", "order", "create", "more", "elaborate", "modification", "possible", "create", "several", "keyframe", "unique", "offset", "function", "each", "frame", "lead", "more", "complex", "animation", "light", "shade", "we", "case", "number", "boundary", "constraint", "point", "show", "Figure", "amount", "add", "determine", "magnitude", "parameter", "radius", "brush", "similarly", "we", "can", "use", "paintbrush", "metaphor", "locally", "control", "edit", "continuous", "tone", "surface", "dispense", "threshold", "define", "lightness", "give", "point", "simply", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "any", "continuous", "function", "thereof", "goal", "just", "generally", "make", "light", "dark", "shape", "bigger", "smaller", "intensity", "brush", "more", "effective", "smoothing", "rbf-based", "method", "can", "give", "sharp", "highlight", "directly", "we", "would", "like", "thank", "SIGGRAPH", "reviewer", "substantial", "feedback", "improve", "paper" ],
  "content" : "Recent progress in non-photorealistic rendering (NPR) has led to many stylized shading techniques that efficiently convey visual information about the objects depicted. Another crucial goal of NPR is to give artists simple and direct ways to express the abstract ideas born of their imaginations. In particular, the ability to add intentional, but often unrealistic, shading effects is indispensable for many applications. We propose a set of simple stylized shading algorithms that allow the user to freely add localized light and shade to a model in a manner that is consistent and seamlessly integrated with conventional lighting techniques. The algorithms provide an intuitive, direct manipulation method based on a paint-brush metaphor, to control and edit the light and shade locally as desired. Our prototype system demonstrates how our method can enhance both the quality and range of applicability of conventional stylized shading for offline animation and interactive applications. For example, Gooch and Gooch [2001] developed a lighting model that changes hue to convey surface orientation, edge locations, and highlights for 3D technical illustration. On the other hand, in application fields such as digital animation and video games, there is a significant demand for locally controllable stylized light and shade, which can achieve results that are directable, intentional, and often fictive, yet ultimately more attractive for it. These can arise from the complexity of the underlying geometry or the complexity of the lighting, or just as a result of the basic physics of illumination. Directors would like to have the ability have such features removed while retaining other dark areas. In other cases, they might like to request that a shaded area be added below the left eye, as shown in the second image from the left in Figure 1 , in order to emphasize the character?s fierceness. However, satisfying these diverse artistic requirements simultaneously would be very hard or almost impossible using only existing conventional lighting control and/or by finetuning the parameters used. Our goal is to develop such ?director-friendly? methodologies for stylistic depiction of light and shade. To explain our approach more concisely, we restrict the discussion for now to making 3D cartoon animation. In this case, due to the nature of stylistic depiction, the techniques used need not be physically realistic; however, they must possess a certain sense of plausibility while meeting directorial demands. This emphasis on expressiveness over physical-realism implies that we must rely on the animator?s creativity?more than automatic physically-based algorithms?to get a desired animation. Therefore, a stylized shading approach should provide a simple, intuitive user interface so that the animator can easily and interactively translate his or her creative vision into reality. The overall process of the approach we propose is: 1. At each keyframe, the user designs and/or modifies the shaded area on a surface, using a paint-brush interface. Thereafter the new surface brightness distribution is automatically generated considering the boundary constraint. The new surface brightness distributions at the keyframes are automatically transmitted to all the frames by linear interpolation. The central idea of our approach is to effect the desired changes to light and shade boundaries by modifying the Lambertian L?N lighting term directly, adding a scalar offset function. After briefly surveying related work in section 2, we describe the main ideas underlying the algorithms in section 3. In section 4, we describe some implementation details of our prototype system. However, ours is unique in that it allows a user to add light and shade by painting them directly onto 3D objects without elaborate lighting control, to make stylistic animation by key-framing. We begin by restricting ourselves to 3D cartoon animation, where each shaded area is assigned a uniform color by thresholded Lambertian shading ([Lake et al. 2000]). The painting process at a given keyframe involves interactively adding light and shade details or sculpting the shapes of shade boundaries. For a given threshold 0 < d 0 < 1 a thresholded Lambertian shader creates two (possibly disconnected) regions, which we will call the light and dark areas. The core idea behind our approach is to modify the intensity distribution in order to make the light area change as desired, i.e. so that it becomes B 0 ?C 0 . Note that, though globally defined, the offset function should be mostly zero except in the region immediately surrounding the desired edit. Next, we describe how to construct the offset function for a ?painted? light area. We can consider the new shaded area B 1 , to have a ?generalized? intensity distribution given by L(p) ? N(p) + o 1 (p), instead of L(p) ? N(p). The conditions in (3) can be seen to be a special case of (5) if we define o 0 = 0. Keyframing: Modifications made according to the above algorithm integrate smoothly with standard lighting equations, and for many animations a single offset function o k may suffice. However, in order to create more elaborate modifications, it is possible to create several keyframes, with a unique offset function o k, f at each frame f , leading to more complex animation of light and shade. In our case, l is the number of the boundary constraint points shown in Figure 3 . The amount added is determined by a magnitude parameter and the radius of the brush. Similarly, we can use the paintbrush metaphors to locally control and edit continuous tone on a surface by dispensing with the threshold and defining the lightness at a given point to be simply L(p) ? N(p) + o k (p), or any continuous function thereof. If the goal is just to generally make a light or dark shape bigger or smaller, then the intensity brush is more effective. But a smoothing RBF-based method cannot give such a sharp highlight directly. We would like to thank the SIGGRAPH reviewers for their substantial feedback to improve the paper.",
  "resources" : [ ]
}