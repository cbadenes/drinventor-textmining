{
  "uri" : "sig2008a-a126-zhou_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2008a/a126-zhou_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Real-Time KD-Tree Construction on Graphics Hardware",
    "published" : "2008",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Kun-Zhou",
      "name" : "Kun",
      "surname" : "Zhou"
    }, {
      "uri" : "http://drinventor/Qiming-Hou",
      "name" : "Qiming",
      "surname" : "Hou"
    }, {
      "uri" : "http://drinventor/Rui Wang-null",
      "name" : "Rui Wang",
      "surname" : null
    }, {
      "uri" : "http://drinventor/Baining-Guo",
      "name" : "Baining",
      "surname" : "Guo"
    } ]
  },
  "bagOfWords" : [ "we", "algorithm", "can", "provide", "immediate", "response", "user", "since", "deformation", "strength", "field", "compute", "about", "310", "millisecond", "while", "CPU", "algorithm", "base", "ANN", "take", "about", "seconds", "thus", "provide", "better", "user", "experience", "deformation", "example", "show", "Fig.", "we", "allow", "user", "manipulate", "point", "cloud", "define", "new", "handle", "drag", "they", "Minimum", "span", "tree", "need", "build", "again", "during", "deformation", "since", "we", "make", "use", "temporal", "coherence", "force", "point", "normal", "current", "pose", "consistently", "orient", "those", "precede", "pose", "note", "achieve", "consistent", "normal", "orientation", "minimum", "span", "tree", "build", "initial", "pose", "point", "cloud", "CPU", "less", "than", "30", "millisecond", "overall", "we", "approach", "over", "20", "time", "faster", "than", "ANN", "algorithm", "same", "datum", "take", "98", "millisecond", "828", "millisecond", "tree", "construction", "knn", "search", "respectively", "we", "also", "compare", "we", "algorithm", "kd-tree", "algorithm", "ANN", "library", "-lsb-", "Mount", "Arya", "2006", "-rsb-", "same", "datum", "take", "about", "32", "millisecond", "6.5", "seconds", "tree", "construction", "knn", "search", "respectively", "however", "tree", "quality", "poor", "result", "very", "slow", "knn", "search", "CPU", "algorithm", "pointshop3d", "-lsb-", "Zwicker", "et", "al.", "2002", "-rsb-", "use", "simple", "midpoint", "splitting", "build", "kdtree", "quickly" ],
  "content" : "Our algorithm can provide immediate response to the user since the deformation strength field is computed in about 310 milliseconds, while the CPU algorithm based on ANN takes about 3 seconds, and thus provides better user experience. In the deformation example shown in Fig. 9 , we allow the user to manipulate the point cloud by defining new handles and dragging them. Minimum spanning trees need not be built again during deformation since we make use of temporal coherence to force the point normals of the current pose to be consistently oriented to those of the preceding pose. Note that to achieve a consistent normal orientation, a minimum spanning tree is built for the initial pose of the point cloud, on the CPU in less than 30 milliseconds. Overall, our approach is over 20 times faster than the ANN algorithm. For the same data, it takes 98 milliseconds and 828 milliseconds for tree construction and KNN search respectively. We also compare our algorithm with the kd-tree algorithm in the ANN library [Mount and Arya 2006]. For the same data, it takes about 32 milliseconds and 6.5 seconds for tree construction and KNN search respectively. However, the tree quality is poor, resulting in very slow KNN search. The CPU algorithm in Pointshop3D [Zwicker et al. 2002] uses simple midpoint splitting to build kdtrees quickly.",
  "resources" : [ ]
}