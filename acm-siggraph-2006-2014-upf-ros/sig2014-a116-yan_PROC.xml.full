{
  "uri" : "sig2014-a116-yan_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2014/a116-yan_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Rendering Glints on High-Resolution Normal-Mapped Specular Surfaces",
    "published" : "2014",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Ling-Qi-Yan",
      "name" : "Ling-Qi",
      "surname" : "Yan"
    }, {
      "uri" : "http://drinventor/Milo\\v{s}-Ha\\v{s}an",
      "name" : "Milo\\v{s}",
      "surname" : "Ha\\v{s}an"
    }, {
      "uri" : "http://drinventor/Wenzel-Jakob",
      "name" : "Wenzel",
      "surname" : "Jakob"
    }, {
      "uri" : "http://drinventor/Jason-Lawrence",
      "name" : "Jason",
      "surname" : "Lawrence"
    }, {
      "uri" : "http://drinventor/Steve-Marschner",
      "name" : "Steve",
      "surname" : "Marschner"
    }, {
      "uri" : "http://drinventor/Ravi-Ramamoorthi",
      "name" : "Ravi",
      "surname" : "Ramamoorthi"
    } ]
  },
  "bagOfWords" : [ "66744f679036598ce8fd1c46517d0731b31d59fb307700af4f5272b97c34e72a", "p3e", "10.1145", "2601097.2601155", "name", "identification", "possible", "render", "glint", "High-Resolution", "Normal-Mapped", "Specular", "Surfaces", "Ling-Qi", "Yan", "Milo", "Ha", "san", "Wenzel", "Jakob", "Jason", "Lawrence", "Steve", "Marschner", "Ravi", "Ramamoorthi", "dual", "first", "author", "univ.", "California", "Berkeley", "Autodesk", "eth", "z?rich", "Univ.", "Virginia", "Cornell", "Univ.", "Figure", "rendering", "highly", "specular", "object", "under", "point", "lighitng", "high-resolution", "normal", "map", "-lrb-", "2048", "-rrb-", "make", "render", "impractical", "standard", "technique", "highlight", "miss", "naive", "pixel", "sampling", "leave", "inset", "we", "solution", "base", "concept", "pixel", "normal", "distribution", "function", "-lrb-", "p-ndf", "-rrb-", "which", "can", "highly", "complex", "right", "inset", "we", "method", "accurate", "even", "moving-light", "sequence", "complex", "specular", "surface", "under", "sharp", "point", "lighting", "show", "fascinating", "glinty", "appearance", "render", "unsolved", "problem", "use", "Monte", "Carlo", "pixel", "sampling", "purpose", "impractical", "energy", "concentrate", "tiny", "highlight", "take", "up", "minuscule", "fraction", "pixel", "we", "instead", "compute", "accurate", "solution", "use", "completely", "different", "deterministic", "approach", "we", "method", "consider", "true", "distribution", "normal", "surface", "patch", "see", "through", "single", "pixel", "which", "can", "highly", "complex", "we", "show", "how", "evaluate", "distribution", "efficiently", "assume", "gaussian", "pixel", "footprint", "gaussian", "intrinsic", "roughness", "we", "also", "take", "advantage", "hierarchical", "pruning", "position-normal", "space", "rapidly", "find", "texel", "might", "contribute", "give", "normal", "distribution", "evaluation", "we", "result", "show", "complex", "temporally", "vary", "glint", "from", "material", "bumpy", "plastic", "brush", "scratch", "metal", "metallic", "paint", "ocean", "wave", "cr", "category", "i.", "3.7", "-lsb-", "Computer", "Graphics", "-rsb-", "Three-Dimensional", "Graphics", "Realism?Color", "shade", "shadow", "texture", "keyword", "glint", "specular", "highlight", "high-resolution", "normal", "map", "normal", "distribution", "function", "Links", "dl", "pdf", "acm", "Reference", "Format", "Yan", "L.", "Hasan", "M.", "Jakob", "W.", "Lawrence", "J.", "Marschner", "S.", "Ramamoorthi", "R.", "2014", "render", "glint", "High-Resolution", "Normal-Mapped", "Specular", "Surfaces", "ACM", "Trans", "graph", "33", "Article", "116", "-lrb-", "July", "2014", "-rrb-", "page", "dous", "10.1145", "2601097.2601155", "http://doi.acm.org/10.1145/2601097.2601155", "copyright", "Notice", "permission", "make", "digital", "hard", "copy", "part", "all", "work", "personal", "classroom", "use", "grant", "without", "fee", "provide", "copy", "make", "distribute", "profit", "commercial", "advantage", "copy", "bear", "notice", "full", "citation", "fus", "rst", "page", "copyright", "third-party", "component", "work", "must", "honor", "2014", "copyright", "hold", "Owner/Author", "publication", "rights", "license", "ACM", "0730-0301/14", "07-art116", "DOI", "http://dx.doi.org/10.1145/2601097.2601155", "introduction", "conventional", "brdf", "model", "complex", "microgeometry", "use", "smooth", "normal", "distribution", "function", "-lrb-", "ndf", "-rrb-", "infinitely", "small", "microfacet", "however", "real", "surface", "feature", "certainly", "infinitely", "small", "bump", "flake", "from", "anywhere", "between", "few", "micron", "-lrb-", "brush", "metal", "-rrb-", "about", "0.1", "mm", "-lrb-", "flake", "metallic", "paint", "-rrb-", "centimeter", "-lrb-", "ocean", "wave", "-rrb-", "can", "produce", "interesting", "glinty", "behavior", "visible", "naked", "eye", "glint", "very", "pronounced", "light", "source", "subtend", "small", "solid", "angle", "sun", "small", "light", "fixture", "true", "surface", "specifically", "design", "glint", "metallic", "paint", "embedded", "flake", "decorative", "brush", "metal", "also", "everyday", "object", "plastic", "ceramic", "-lrb-", "see", "Figure", "leave", "-rrb-", "fact", "smooth", "surface", "meet", "microfacet", "assumption", "exception", "rather", "than", "norm", "most", "shiny", "surface", "one", "encounter", "reality", "have", "type", "glinty", "behavior", "readily", "observe", "under", "sharp", "lighting", "we", "goal", "simulate", "glinty", "appearance", "still", "image", "animation", "-lrb-", "see", "Figure", "supplemental", "video", "-rrb-", "represent", "geometry", "resolution", "sufficient", "reveal", "feature", "cause", "glint", "difficult", "we", "use", "high-resolution", "normal", "map", "much", "harder", "challenge", "render", "complex", "specular", "surface", "under", "sharp", "lighting", "Standard", "uniform", "pixel", "sampling", "technique", "direct", "illumination", "have", "extremely", "large", "variance", "use", "they", "purpose", "impractical", "reason", "most", "energy", "concentrate", "tiny", "highlight", "take", "up", "minuscule", "fraction", "pixel", "uniform", "pixel", "sampling", "ineffective", "hit", "highlight", "-lrb-", "figure", "-rrb-", "alternative", "explanation", "space", "valid", "camera-surface-light", "path", "complicate", "can", "easily", "sample", "from", "camera", "from", "light", "some", "sense", "we", "need", "search", "surface", "normal", "align", "half", "vector", "can", "do", "brute-force", "sampling", "normal", "map", "filter", "technique", "-lsb-", "Toksvig", "2005", "Han", "et", "al.", "2007", "Olano", "Baker", "2010", "Dupuy", "et", "al.", "2013", "-rsb-", "also", "do", "fully", "solve", "problem", "method", "attempt", "approximate", "ndf", "ACM", "transaction", "Graphics", "Vol", "33", "no.", "Article", "116", "publication", "date", "July", "2014", "116:2", "l.-q", "Yan", "et", "al.", "computer", "mouse", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "figure", "-lrb-", "a-b", "-rrb-", "6.2", "10", "sr", "0.5", "mm", "-rrb-", "two", "photograph", "injection", "mold", "plastic", "computer", "mouse", "illuminate", "small", "light", "source", "-lrb-", "solid", "angle", "-rrb-", "reveal", "its", "glinty", "appearance", "effect", "impractical", "simulate", "use", "uniform", "pixel", "sampling", "real-world", "normal", "distribution", "function", "dark", "bumpy", "ceramic", "tile", "be", "measure", "illuminate", "surface", "small", "focused", "incoherent", "source", "-lrb-", "solid", "angle", "cover", "surface", "patch", "image", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "be", "capture", "camera", "located", "opposite", "diffuse", "acrylic", "barrier", "from", "source", "reveal", "distinct", "non-gaussian", "distribution", "scatter", "light", "correspond", "surface", "patch", "only", "slightly", "warped", "blur", "because", "optical", "limit", "we", "setup", "give", "scale", "broad", "lobe", "true", "ndf", "highly", "complex", "can", "approximate", "well", "use", "single", "gaussian", "lobe", "even", "small", "number", "lobe", "-lrb-", "figure", "-rrb-", "although", "approach", "avoid", "aliase", "artifact", "able", "reproduce", "glinty", "appearance", "under", "high-frequency", "lighting", "we", "instead", "desire", "compute", "true", "solution", "Monte", "Carlo", "would", "eventually", "converge", "use", "completely", "different", "deterministic", "approach", "minimal", "approximation", "we", "consider", "actual", "unsimplified", "ndf", "surface", "patch", "see", "through", "single", "pixel", "-lrb-", "example", "show", "Figure", "leave", "inset", "-rrb-", "p-ndf", "can", "easily", "estimate", "binning", "repeatedly", "choose", "point", "patch", "take", "its", "normal", "perturb", "intrinsic", "surface", "roughness", "add", "bin", "key", "problem", "direct", "illumination", "we", "need", "evaluate", "p-ndf", "single", "half-vector", "clearly", "would", "extremely", "inefficient", "use", "binning", "approach", "here", "waste", "all", "single", "bin", "indeed", "equivalent", "what", "standard", "renderer", "would", "do", "try", "hit", "tiny", "light", "source", "chance", "instead", "we", "require", "evaluation", "density", "single", "normal", "come", "from", "anywhere", "patch", "moreover", "p-ndf", "different", "every", "pixel", "so", "computation", "can", "reuse", "we", "method", "p-ndf", "just", "mathematical", "tool", "derive", "what", "correct", "pixel", "brightness", "should", "never", "fully", "construct", "only", "evaluate", "single", "vector", "we", "introduce", "algorithm", "p-ndf", "evaluation", "section", "key", "assumption", "make", "evaluation", "possible", "gaussian", "pixel", "filter", "tiny", "amount", "gaussian", "roughness", "specular", "surface", "combine", "single", "4-dimensional", "Gaussian", "query", "analytically", "integrate", "across", "normal", "map", "avoid", "random", "sampling", "basic", "computational", "block", "we", "solution", "integral", "2-dimensional", "gaussian", "over", "triangular", "domain", "describe", "section", "we", "hierarchically", "prune", "positionnormal", "space", "quickly", "find", "texel", "might", "contribute", "give", "p-ndf", "evaluation", "-lrb-", "section", "-rrb-", "we", "result", "show", "complex", "temporally", "vary", "glint", "from", "bumpy", "plastic", "brush", "scratch", "metal", "metallic", "paint", "ocean", "wave", "see", "section", "Figure", "10", "specifically", "constant", "view", "light", "direction", "over", "approximation", "make", "when", "solve", "integral", "section", "NDF", "measurement", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "3.5", "10", "sr", "-lrb-", "c-e", "-rrb-", "p-ndf", "related", "work", "naive", "pixel", "sampling", "standard", "approach", "compute", "direct", "illumination", "bumpy", "specular", "surface", "trace", "ray", "through", "pixel", "evaluate", "normal", "hit", "point", "shade", "point", "from", "light", "source", "use", "point?s", "finite", "roughness", "brdf", "fail", "render", "glint", "-lrb-", "figure", "-rrb-", "multiple", "importance", "sampling", "-lsb-", "Veach", "1997", "-rsb-", "do", "help", "because", "pixel", "integral", "inefficiently", "sample", "rather", "than", "brdf/light", "combination", "REYES", "approach", "surface", "subdivision", "micropolygon", "-lsb-", "cook", "et", "al.", "1987", "-rsb-", "equally", "inefficient", "since", "would", "require", "micropolygon", "small", "highlight", "though", "we", "use", "fine", "triangulation", "normal", "map", "smoothness", "we", "method", "can", "handle", "highlight", "arbitrarily", "smaller", "than", "triangle", "normal", "map", "filter", "technique", "can", "deliver", "artifact-free", "rendering", "approximate", "pixel?s", "ndf", "single", "lobe", "-lsb-", "Toksvig", "2005", "Olano", "Baker", "2010", "Dupuy", "et", "al.", "2013", "-rsb-", "small", "number", "lobe", "-lsb-", "Han", "et", "al.", "2007", "-rsb-", "however", "none", "method", "can", "correctly", "capture", "glinty", "appearance", "core", "problem", "true", "ndf", "can", "highly", "complex", "sharp", "feature", "directly", "translate", "spatial", "temporal", "glinting", "approximate", "they", "broad", "lobe", "only", "applicable", "under", "low-frequency", "illumination", "would", "filter", "complex", "feature", "anyway", "Figure", "show", "effect", "replace", "true", "ndf", "single", "gaussian", "mixture", "Gaussians", "thus", "lose", "sharp", "feature", "single-point", "evaluation", "caustic", "caustic", "related", "we", "work", "since", "glint", "can", "interpret", "directional", "caustic", "most", "method", "sample", "path", "-lrb-", "particle", "photon", "-rrb-", "accumulate", "they", "datum", "structure", "-lrb-", "kd-tree", "hash", "grid", "bin", "-rrb-", "however", "sufficient", "we", "purpose", "we", "require", "point", "evaluation", "which", "much", "harder", "Walter", "et", "al.", "-lsb-", "2009", "-rsb-", "compute", "volumetric", "caustic", "due", "refraction", "point", "light", "scattering", "volume", "through", "bumpy", "interface", "related", "we", "approach", "linear", "normal", "interpolation", "over", "triangle", "use", "discrete", "set", "specular", "connection", "enumerate", "Jacobian", "determinant", "term", "determine", "highlight", "intensity", "hierarchy", "use", "speed", "up", "enumeration", "however", "intrinsic", "roughness", "consider", "-lrb-", "result", "singularity", "-rrb-", "phenomenon", "render", "quite", "different", "Mitchell", "Hanrahan", "-lsb-", "1992", "-rsb-", "compute", "reflect", "caustic", "from", "implicit", "surface", "enumerate", "discrete", "set", "valid", "light", "path", "through", "interval", "arithmetic", "use", "wavefront", "trace", "way", "compute", "contribution", "valid", "specular", "path", "again", "ACM", "transaction", "Graphics", "Vol", "33", "no.", "Article", "116", "publication", "date", "July", "2014", "Rendering", "Glints", "High-Resolution", "Normal-Mapped", "Specular", "Surfaces", "116:3", "we", "method", "-lrb-", "17", "min", "2.2", "min", "actual", "glint", "-rrb-", "naive", "sampling", "-lrb-", "hour", "4,096", "sample", "-rrb-", "Figure", "naive", "pixel", "sampling", "fail", "render", "complex", "specular", "surface", "under", "small", "light", "reason", "highlight", "too", "small", "efficiently", "hit", "uniform", "pixel", "sampling", "which", "obvious", "from", "zoom", "pixel", "right", "multiple", "importance", "sampling", "would", "help", "since", "pixel", "integral", "inefficiently", "sample", "light/brdf", "combination", "correct", "ndf", "isotropic", "gaussian", "-lrb-", "we", "approach", "-rrb-", "-lsb-", "Toksvig", "2005", "-rsb-", "anisotropic", "gaussian", "mixture", "10", "anisotropic", "-lrb-", "lean", "leadr", "-rrb-", "-lsb-", "Han", "et", "al", "2007", "-rsb-", "Figure", "approximate", "true", "ndf", "single", "gaussian", "-lrb-", "Toksvig", "LEAN", "LEADR", "-rrb-", "small", "number", "Gaussians", "-lrb-", "Han", "et", "al.", "-rrb-", "lose", "sharp", "feature", "cause", "glint", "equivalent", "jacobian", "determinant", "term", "single", "reflection", "associate", "singularity", "other", "work", "specular", "path", "Jakob", "Marschner", "-lsb-", "2012", "-rsb-", "extension", "Metropolis", "light", "transport", "which", "allow", "mutation", "specular", "path", "single", "diffuse", "vertex", "however", "we", "case", "diffuse", "vertex", "available", "mutation", "perfectly", "specular", "case", "discrete", "set", "-lrb-", "rather", "than", "manifold", "-rrb-", "valid", "path", "already", "note", "above", "Moon", "et", "al.", "publish", "several", "approach", "approximate", "higher-order", "specular", "bounce", "e.g.", "-lsb-", "2007", "-rsb-", "loworder", "specular", "path", "still", "compute", "brute-force", "relatively", "large", "light", "source", "stochastic", "reflectance", "-lsb-", "Jakob", "et", "al.", "2014", "-rsb-", "concurrent", "work", "also", "address", "problem", "glinty", "surface", "use", "stochastic", "approach", "rather", "than", "work", "from", "normal", "map", "method", "model", "surface", "procedural", "random", "collection", "specular", "flake", "occur", "accord", "particular", "normal", "distribution", "key", "method", "count", "up", "particle", "contribute", "particular", "illumination", "calculation", "without", "actually", "generate", "they", "provide", "efficiency", "large", "query", "area", "where", "many", "particle", "contribute", "when", "use", "model", "bumpy", "smooth", "surface", "stochastic", "approach", "phenomenological", "random-flake", "approximation", "replace", "p-ndf", "contrast", "we", "algorithm", "exactly", "determine", "how", "give", "specular", "surface", "define", "particular", "normal", "map", "really", "look", "under", "give", "sharp", "illumination", "moreover", "normal", "map", "can", "express", "surface", "feature", "large", "enough", "visible", "image", "e.g.", "scratch", "brush", "example", "paper", "zoom-in", "single", "pixel", "symbol", "domain", "definition", "unit", "disk", "-lrb-", "proj", "hemisphere", "-rrb-", "invalid", "normal", "-lrb-", "-rrb-", "unit", "disk", "parameter", "define", "vector", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "texture", "space", "parameter", "-lrb-", "-rrb-", "normal", "map", "function", "-lrb-", "-rrb-", "jacobian", "-lrb-", "-rrb-", "pixel", "footprint", "-lrb-", "-rrb-", "pixel", "gaussian", "-lrb-", "-rrb-", "intrinsic", "roughness", "gaussian", "-lsb-", "-rsb-", "-lrb-", "-rrb-", "combined", "gaussian", "query", "footprint", "normal", "-lrb-", "-rrb-", "???", "normal", "distribution", "function", "zoom-in", "single", "pixel", "symbol", "domain", "definition", "unit", "disk", "-lrb-", "proj", "hemisphere", "-rrb-", "invalid", "normal", "-lrb-", "-rrb-", "unit", "disk", "parameter", "define", "vector", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "texture", "space", "parameter", "-lrb-", "-rrb-", "normal", "map", "function", "-lrb-", "-rrb-", "jacobian", "-lrb-", "-rrb-", "pixel", "footprint", "-lrb-", "-rrb-", "pixel", "gaussian", "-lrb-", "-rrb-", "intrinsic", "roughness", "gaussian", "-lsb-", "-rsb-", "-lrb-", "-rrb-", "combined", "gaussian", "query", "footprint", "normal", "-lrb-", "-rrb-", "???", "normal", "distribution", "function", "Table", "Notation", "use", "paper", "Preliminaries", "solve", "we", "problem", "require", "think", "about", "surface", "patch", "see", "through", "pixel", "all", "once", "rather", "than", "one", "point", "time", "just", "every", "surface", "point", "have", "local", "brdf", "we", "can", "think", "area", "surface", "have", "p-brdf", "describe", "how", "total", "contribution", "pixel", "depend", "illumination", "render", "detailed", "normal", "map", "require", "efficient", "way", "evaluate", "area-integrated", "pbrdf", "rather", "than", "let", "pixel", "filter", "do", "implicitly", "point", "sampling", "specular", "normal-mapped", "surface", "area-integrated", "brdf", "primarily", "determine", "distribution", "surface", "normal", "over", "relevant", "patch", "surface", "we", "need", "able", "ask", "how", "often", "give", "normal", "vector", "occur", "patch", "we", "call", "distribution", "p-ndf", "just", "like", "microfacet", "distribution", "standard", "brdf", "model", "give", "normal", "distribution", "particular", "area", "rather", "than", "global", "average", "over", "whole", "surface", "crucial", "observation", "p-ndf", "simple", "broad", "function", "contain", "surprising", "amount", "structure", "-lrb-", "figure", "-rrb-", "even", "when", "surface", "patch", "far", "larger", "than", "feature", "normal", "map", "also", "vary", "dramatically", "across", "surface", "evaluate", "p-ndf", "efficiently", "while", "preserve", "detailed", "spatio-angular", "structure", "key", "accurately", "capture", "glinty", "appearance", "let", "we", "define", "term", "more", "precisely", "Table", "list", "symbol", "use", "throughout", "paper", "Pixel", "footprint", "we", "assume", "gaussian", "pixel", "reconstruction", "filter", "project", "approximately", "gaussian", "footprint", "uv-parameterization", "normal", "map", "whose", "covariance", "matrix", "easily", "compute", "propagate", "ray", "differential", "surface", "-lsb-", "igehy", "1999", "-rsb-", "practice", "we", "actually", "subdivide", "pixel", "subpixel", "make", "footprint", "smaller", "accordingly", "handle", "edge", "better", "simplicity", "we", "talk", "about", "pixel", "rather", "than", "subpixel", "footprint", "project", "hemisphere", "we", "use", "unit", "disk", "express", "hemispherical", "unit", "vector", "point", "-lrb-", "-rrb-", "represent", "unit", "vector", "-lrb-", "-rrb-", "hemisphere", "let", "we", "also", "define", "extended", "unit", "disk", "union", "unit", "disk", "special", "symbol", "which", "allow", "normal", "distribution", "sometimes", "return", "invalid", "normal", "less", "common", "than", "work", "hemisphere", "useful", "shortly", "normal", "map", "can", "give", "directly", "derivative", "heightfield", "we", "use", "direct", "option", "though", "all", "one", "normal", "map", "we", "example", "do", "come", "from", "heightfield", "-lrb-", "exception", "metallic", "paint", "flake", "-rrb-", "normal", "map", "define", "function", "from", "point", "-lrb-", "-rrb-", "texture", "space", "normal", "-lrb-", "-rrb-", "Jacobian", "-lrb-", "-rrb-", "denote", "-lrb-", "-rrb-", "play", "important", "role", "determine", "highlight", "brightness", "point", "where", "det", "-lrb-", "-rrb-", "cause", "problem", "unless", "we", "careful", "intrinsic", "roughness", "we", "could", "treat", "surface", "perfectly", "specular", "however", "we", "find", "useful", "consider", "small", "amount", "unresolved", "fine", "roughness", "match", "real", "world", "perfect", "smoothness", "unachievable", "limit", "geometric", "optics", "reach", "very", "high", "resolution", "also", "prevent", "singularity", "-lrb-", "infinitely", "bright", "highlight", "-rrb-", "which", "arise", "perfectly", "specular", "surface", "when", "det", "-lrb-", "-rrb-", "cleanly", "deal", "normal", "map", "contain", "piece-wise", "constant", "region", "ndf", "we", "can", "now", "define", "normal", "distribution", "function", "-lrb-", "ndf", "-rrb-", "probability", "distribution", "extended", "unit", "disk", "obvious", "measure", "-lrb-", "associate", "random", "event", "simply", "choice", "normal", "-rrb-", "definition", "slightly", "deviate", "from", "standard", "reference", "-lsb-", "Walter", "et", "al.", "2007", "-rsb-", "-lsb-", "Burley", "2012", "-rsb-", "fully", "compatible", "they", "actually", "more", "convenient", "hemispherical", "term", "ndf", "like", "Beckmann", "GGX", "require", "additional", "cosine", "term", "integrate", "associate", "sampling", "routine", "also", "bake", "cosine", "-lrb-", "see", "eq", "-lrb-", "-rrb-", "-lrb-", "28", "-rrb-", "Walter", "et", "al.", "-lsb-", "2007", "-rsb-", "-rrb-", "we", "formulation", "cosine", "need", "worry", "about", "furthermore", "we", "now", "have", "more", "freedom", "what", "pass", "ndf", "any", "suitable", "plane", "function", "can", "restricted", "unit", "disk", "properly", "normalize", "particular", "Gaussians", "perfectly", "good", "ndf", "include", "anisotropic", "non-centered", "one", "finally", "statement", "blur", "ndf", "Gaussian", "now", "have", "very", "precise", "meaning", "even", "though", "different", "from", "spherical", "convolution", "vmf", "Kent", "distribution", "difference", "critical", "we", "we", "simply", "use", "convolution", "avoid", "singularity", "come", "from", "unrealistically", "perfect", "surface", "p-ndf", "can", "now", "define", "probability", "distribution", "random", "variable", "define", "sampling", "footprint", "evaluate", "normal", "sample", "location", "perturb", "intrinsic", "roughness", "kernel", "last", "step", "can", "sometimes", "result", "normal", "outside", "unit", "disk", "event", "collect", "probability", "often", "near", "zero", "practice", "Figure", "show", "different", "p-ndf", "size", "pixel", "footprint", "increase", "note", "quite", "large", "footprint", "size", "require", "ndf", "mimic", "analytic", "normal", "distribution", "like", "Beckmann", "ACM", "transaction", "Graphics", "Vol", "33", "no.", "Article", "116", "publication", "date", "July", "2014", "116:4", "l.-q", "Yan", "et", "al.", "Figure", "p-ndf", "smooth", "specular", "heightfield", "gaussian", "power", "spectrum", "pixel", "footprint", "cover", "about", "15", "15", "30", "30", "90", "90", "300", "300", "texel", "respectively", "ndf", "evaluation", "flatland", "3d", "we", "core", "challenge", "find", "evaluation", "algorithm", "pndf", "-lrb-", "-rrb-", "half-vector", "correspond", "give", "footprint", "give", "normal", "map", "give", "intrinsic", "roughness", "indeed", "algorithm", "hand", "straightforward", "plug", "pndf", "standard", "microfacet", "brdf", "which", "can", "use", "direct", "illumination", "calculation", "-lrb-", "i.h", "-rrb-", "-lrb-", "i.h", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "i.n", "-rrb-", "-lrb-", "o.n", "-rrb-", "where", "-lrb-", "-rrb-", "half", "vector", "unmapped", "surface", "normal", "Fresnel", "term", "shadowing-masking", "term", "-lrb-", "only", "need", "avoid", "infinity", "grazing", "-rrb-", "follow", "section", "we", "first", "make", "p-ndf", "evaluation", "problem", "more", "approachable", "analyze", "situation", "flatland", "present", "full", "3d", "solution", "which", "naturally", "follow", "from", "flatland", "case", "flatland", "situation", "simpler", "only", "one", "texture", "parameter", "normal", "map", "can", "write", "function", "-lrb-", "-rrb-", "return", "normal", "-lrb-", "-rrb-", "which", "analogous", "unit", "disk", "from", "3d", "case", "full", "normal", "vector", "-lrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-rrb-", "pixel", "footprint", "turn", "gaussian", "reconstruction", "kernel", "-lrb-", "-rrb-", "integrate", "let", "random", "variable", "distribute", "accord", "-lrb-", "-rrb-", "key", "question", "what", "distribution", "random", "variable", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "simple", "multiplication", "convolution", "normal", "map", "instead", "pdf", "dependent", "random", "variable", "situation", "illustrate", "Figure", "we", "can", "write", "down", "p-ndf", "ACM", "transaction", "Graphics", "Vol", "33", "no.", "Article", "116", "publication", "date", "July", "2014", "Rendering", "Glints", "High-Resolution", "Normal-Mapped", "Specular", "Surfaces", "116:5", "normal", "map", "pixel", "reconstruction", "gaussian", "1.0", "0.40", "0.35", "0.5", "0.30", "0.25", "0.0", "0.20", "0.15", "0.5", "0.10", "0.05", "1.0", "0.00", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "figure", "Flatland", "illustration", "p-ndf", "sampling", "evaluation", "-lrb-", "-rrb-", "normal", "map", "1d", "curve", "-lrb-", "-rrb-", "texture", "coordinate", "u.", "-lrb-", "other", "component", "normal", "vector", "-lrb-", "-rrb-", "-rrb-", "-lrb-", "-rrb-", "pixel", "interest", "project", "gaussian", "footprint", "give", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "p-ndf", "-lrb-", "-rrb-", "give", "probability", "density", "give", "normal", "-lrb-", "-rrb-", "assume", "intrisic", "roughness", "kernel", "-lrb-", "-rrb-", "0.01", "-lrb-", "-rrb-", "p-ndf", "evaluation", "flatland", "can", "visualize", "integration", "combined", "gaussian", "query", "-lsb-", "-rsb-", "over", "segmented", "graph", "normal", "map", "area", "where", "Gaussian", "effectively", "zero", "-lrb-", "outside", "ellipse", "-rrb-", "we", "can", "prune", "segment", "use", "hierarchy", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "du", "??", "-lrb-", "-rrb-", "where", "root", "equation", "-lrb-", "-rrb-", "delta", "function", "restrict", "integral", "point", "where", "-lrb-", "-rrb-", "second", "equation", "intuitively", "account", "speed", "cross", "root", "only", "work", "finite", "set", "root", "exist", "we", "can", "see", "p-ndf", "have", "singularity", "point", "where", "-lrb-", "-rrb-", "correspond", "inflection", "point", "original", "heightfield", "analysis", "show", "p-ndf", "can", "have", "infinite", "value", "we", "use", "pinhole", "camera", "point", "light", "can", "cause", "infinitely", "bright", "pixel", "-lrb-", "we", "distant", "light/camera", "approximation", "culprit", "infinity", "could", "occur", "even", "we", "do", "make", "approximation", "-rrb-", "furthermore", "could", "constant", "region", "normal", "map", "so", "we", "get", "-lrb-", "-rrb-", "whole", "interval", "corresponding", "delta", "function", "p-ndf", "avoid", "singularity", "other", "problem", "inherent", "perfect", "specular", "surface", "we", "introduce", "tiny", "amount", "finite", "roughness", "normal-mapped", "surface", "since", "p-ndf", "just", "function", "interval", "-lrb-", "-rrb-", "we", "can", "convolve", "gaussian", "-lrb-", "-rrb-", "easily", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "dud", "??", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "ds", "du", "??", "-lrb-", "-rrb-", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "du", "??", "-lsb-", "-rsb-", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "du", "??", "last", "step", "we", "combine", "two", "1d", "gaussian", "single", "2d", "one", "-lsb-", "-rsb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "change", "integration", "order", "eliminate", "delta", "function", "we", "have", "remove", "any", "notion", "root", "finding", "singularity", "from", "problem", "leave", "single", "well-defined", "integral", "onedimensional", "real", "function", "elegant", "way", "intuitively", "visualize", "result", "we", "would", "like", "integrate", "combined", "reconstruction", "kernel", "-lsb-", "-rsb-", "along", "graph", "normal", "function", "plane", "curve", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "note", "though", "measure", "standard", "line", "measure", "axis", "arc", "length", "along", "graph", "Figure", "-lrb-", "-rrb-", "illustrate", "intuition", "immediately", "lead", "accelerate", "query", "idea", "we", "can", "use", "hierarchy", "prune", "all", "normal", "map", "segment", "area", "where", "-lsb-", "-rsb-", "effectively", "zero", "flatland", "2d", "Gaussian", "so", "we", "can", "subdivide", "graph", "many", "line", "segment", "integrate", "combined", "kernel", "along", "line", "segment", "lead", "integral", "1-dimensional", "gaussian", "over", "segment", "which", "can", "compute", "easily", "term", "erf", "-lrb-", "-rrb-", "show", "benefit", "choose", "gaussian", "filter", "other", "choice", "spline", "would", "lead", "integration", "problem", "without", "closedform", "solution", "also", "note", "we", "make", "graph", "piecewise-linear", "instead", "full", "integrand", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "latter", "would", "bad", "choice", "since", "normal", "distribution", "function", "2.0", "1.5", "1.0", "0.5", "0.0", "1.0", "0.5", "0.0", "0.5", "1.0", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "Gaussian", "can", "much", "narrower", "than", "discretization", "step", "we", "would", "like", "handle", "specular", "highlight", "arbitrarily", "smaller", "than", "finest", "discretization", "level", "choice", "key", "achieve", "goal", "3d", "analysis", "we", "can", "extend", "above", "line", "think", "three", "dimension", "two-dimensional", "texture", "space", "parameterize", "-lrb-", "-rrb-", "normal", "function", "2d", "gaussian", "reconstruction", "kernel", "now", "model", "pixel", "footprint", "random", "process", "choose", "position", "sampling", "take", "its", "normal", "have", "follow", "probability", "distribution", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "du", "det", "-lrb-", "-rrb-", "direct", "analogy", "flatland", "derivation", "while", "flatland", "case", "have", "singularity", "inflection", "point", "original", "one-dimensional", "heightfield", "here", "we", "have", "singularity", "det", "-lrb-", "-rrb-", "which", "set", "curve", "uv-space", "where", "curvature", "original", "heightfield", "flip", "between", "elliptic", "hyperbolic", "curve", "directly", "correspond", "fold", "we", "often", "see", "pndf", "visualization", "again", "piecewise", "constant", "normal", "map", "-lrb-", "affine", "region", "heightfield", "-rrb-", "make", "det", "-lrb-", "-rrb-", "over", "whole", "region", "cause", "delta", "function", "-lrb-", "-rrb-", "fact", "we", "have", "try", "implement", "eq", "-lrb-", "-rrb-", "use", "analytic", "root", "finding", "find", "impractical", "due", "singularity", "therefore", "flatland", "we", "introduce", "intrinsic", "roughness", "accomplish", "2-dimensional", "gaussian", "kernel", "-lrb-", "-rrb-", "which", "convolve", "p-ndf", "derivation", "identical", "flatland", "except", "ACM", "transaction", "Graphics", "Vol", "33", "no.", "Article", "116", "publication", "date", "July", "2014", "116:6", "l.-q", "Yan", "et", "al.", "triangle", "texel", "32", "triangle", "texel", "figure", "patch", "normal", "map", "texel", "zcomponent", "normal", "visualize", "use", "iso-line", "clearly", "depict", "curvature", "discontinuity", "use", "32", "triangle", "per", "texel", "show", "better", "smoothness", "than", "extra", "storage", "bold", "letter", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "dud", "-lsb-", "-rsb-", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "du", "where", "-lsb-", "-rsb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "we", "can", "again", "visualize", "intuitively", "integration", "combined", "4d", "reconstruction", "kernel", "-lsb-", "-rsb-", "along", "graph", "normal", "function", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "which", "2d", "surface", "4d", "space", "hard", "plot", "however", "intuition", "graph", "can", "triangulate", "reduce", "2d", "gaussian", "over", "triangle", "correct", "hierarchical", "pruning", "idea", "also", "carry", "over", "from", "flatland", "summary", "we", "have", "observe", "p-ndf", "-lrb-", "-rrb-", "trivially", "evaluate", "single", "point", "-lrb-", "direction", "-rrb-", "s.", "however", "under", "gaussian", "pixel", "roughness", "kernel", "we", "have", "cast", "evaluation", "integration", "problem", "which", "can", "solve", "discretize", "normal", "map", "small", "affine", "patch", "-lrb-", "note", "though", "specular", "highlight", "we", "handle", "can", "still", "much", "smaller", "than", "patch", "-rrb-", "next", "section", "discuss", "detail", "solve", "integration", "problem", "Analytic", "integration", "numerically", "evaluate", "equation", "-lrb-", "-rrb-", "we", "choose", "discretize", "normal", "map", "-lrb-", "-rrb-", "triangle", "linearly", "interpolate", "normal", "across", "they", "more", "precisely", "we", "linearly", "interpolate", "value", "third", "coordinate", "imply", "simplest", "solution", "split", "each", "normal", "map", "texel", "two", "triangle", "sometimes", "sufficient", "we", "find", "discretization", "can", "produce", "triangular", "artifact", "p-ndf", "resolution", "normal", "map", "too", "low", "compare", "feature", "depict", "issue", "we", "can", "up-sample", "normal", "map", "subdivide", "texel", "sub-texel", "use", "bicubic", "catmull-rom", "interpolation", "any", "other", "subdivision", "could", "use", "naturally", "match", "control", "polygon", "bicubic", "patch", "figure", "show", "difference", "between", "two", "option", "integrate", "2d", "gaussian", "over", "triangle", "we", "goal", "compute", "integral", "form", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "du", "-lrb-", "-rrb-", "du", "since", "we", "linearly", "interpolate", "normal", "affine", "function", "which", "allow", "we", "collapse", "4-dimensional", "combined", "gaussian", "some", "other", "2d", "gaussian", "problem", "have", "be", "study", "package", "implement", "one", "possible", "solution", "-lsb-", "PolyCub", "2004", "-rsb-", "exist", "numerical", "algorithm", "evaluate", "cumulative", "distribution", "function", "-lrb-", "-rrb-", "bivariate", "gaussian", "covariance", "-lsb-", "Genz", "2004", "-rsb-", "which", "can", "adapt", "evaluate", "desire", "integral", "PolyCub", "package", "also", "take", "similar", "approach", "we", "have", "implement", "method", "work", "correctly", "appear", "slower", "than", "we", "method", "related", "problem", "spherical", "Gaussians", "have", "be", "study", "Xu", "et", "al.", "-lsb-", "2014", "-rsb-", "below", "we", "describe", "implementation", "we", "find", "perform", "well", "we", "case", "triangle", "from", "we", "triangulation", "due", "its", "construction", "we", "only", "have", "right", "triangle", "two", "side", "align", "axis", "triangle", "give", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "we", "obtain", "integral", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "dv", "du", "where", "-lrb-", "-rrb-", "achieve", "triangular", "integration", "domain", "10", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "so", "far", "we", "have", "just", "explicitly", "state", "problem", "eliminate", "carry", "out", "inner", "integration", "substitute", "argument", "result", "erf", "function", "lead", "integral", "form", "11", "experf", "-lrb-", "-rrb-", "exp", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "erf", "-lrb-", "-rrb-", "dx", "some", "constant", "shift", "bound", "fact", "same", "form", "result", "we", "center", "triangle", "instead", "Gaussian", "we", "transform", "problem", "so", "Gaussian", "unit", "any", "other", "similar", "approach", "integral", "do", "have", "elementary", "solution", "we", "can", "approximate", "follow", "we", "choose", "approximate", "function", "erf", "-lrb-", "-rrb-", "interval", "-lsb-", "-rsb-", "piece-wise", "quadratic", "function", "six", "subinterval", "problem", "thus", "separate", "integral", "form", "12", "expquad", "-lrb-", "-rrb-", "exp", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "-lrb-", "-rrb-", "dx", "which", "can", "solve", "analytically", "use", "computer", "algebra", "system", "result", "long", "fundamentally", "difficult", "Figure", "illustrate", "result", "we", "integration", "algorithm", "particular", "normal", "map", "patch", "comparison", "against", "reference", "correctness", "derivation", "can", "easily", "check", "against", "binning", "method", "we", "use", "100", "million", "sample", "look-up", "normal", "map", "perturb", "store", "sample", "bin", "Figure", "show", "result", "time-sequence", "comparison", "Figure", "also", "compute", "use", "method", "note", "excellent", "match", "between", "two", "image", "compute", "use", "completely", "different", "method", "minor", "difference", "come", "from", "fact", "binning", "inherently", "compute", "bin", "integral", "instead", "bin", "center", "value", "like", "we", "evaluation", "supplementary", "datum", "contain", "several", "different", "ndf", "compare", "against", "reference", "float", "point", "format", "note", "we", "only", "provide", "ACM", "transaction", "Graphics", "Vol", "33", "no.", "Article", "116", "publication", "date", "July", "2014", "Rendering", "Glints", "High-Resolution", "Normal-Mapped", "Specular", "Surfaces", "116:7", "heightfield", "patch", "-lrb-", "-rrb-", "normal", "map", "-lrb-", "-rrb-", "det", "-lrb-", "-rrb-", "triangle", "texel", "32", "triangle", "texel", "triangle", "texel", "0.001", "0.001", "0.05", "figure", "top", "row", "heightfield", "-lrb-", "-rrb-", "gaussian", "power", "spectrum", "its", "normal", "map", "-lrb-", "-rrb-", "det", "-lrb-", "-rrb-", "term", "specify", "highlight", "brightness", "perfectly", "specular", "surface", "-lrb-", "singularity", "point", "where", "original", "heightfield", "flip", "curvature", "-rrb-", "bottom", "row", "p-ndf", "correspond", "footprint", "compute", "use", "we", "approach", "leave", "right", "roughness", "0.001", "two", "triangle", "per", "texel", "-lrb-", "show", "some", "artifact", "-rrb-", "32", "triangle", "per", "texel", "roughness", "0.05", "triangle", "per", "texel", "-lrb-", "artifact", "-rrb-", "we", "evaluation", "bin", "32", "triangles/texel", "100", "million", "sample", "Figure", "comparison", "p-ndf", "evaluate", "we", "approach", "reference", "p-ndf", "compute", "binning", "demonstrate", "cor", "rectness", "we", "derivation", "single", "pixel", "cutlery", "model", "minor", "difference", "come", "from", "anti-aliasing", "binning", "method", "which", "naturally", "compute", "bin", "integral", "instead", "bin", "center", "value", "like", "we", "evaluation", "single-pixel", "rather", "than", "full-frame", "reference", "comparison", "since", "latter", "would", "extremely", "slow", "compute", "use", "100", "million", "sample", "-lrb-", "see", "Figure", "-rrb-", "would", "arguably", "provide", "less", "insight", "than", "ndf", "comparison", "implementation", "hierarchical", "pruning", "texel", "increase", "performance", "we", "limit", "Gaussians", "non-zero", "only", "within", "-lrb-", "reasonable", "approximation", "-rrb-", "therefore", "many", "texel", "can", "prune", "because", "either", "zero", "over", "whole", "texel", "we", "can", "trivially", "reject", "texel", "fall", "outside", "we", "utilize", "min-max", "hierarchy", "over", "normal", "map", "more", "precisely", "each", "texel", "we", "precompute", "minimum", "maximum", "value", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "build", "quad-tree", "hierarchy", "over", "bound", "give", "query", "-lrb-", "-rrb-", "we", "traverse", "hierarchy", "pruning", "whole", "group", "texel", "where", "guarantee", "beyond", "recursive", "traversal", "similar", "many", "other", "bound", "volume", "approach", "importance", "sampling", "sample", "from", "p-ndf", "easy", "definition", "use", "same", "technique", "use", "create", "binning", "reference", "simply", "take", "normal", "random", "surface", "point", "see", "through", "pixel", "perturb", "intrinsic", "roughness", "kernel", "add", "other", "light", "path", "we", "implementation", "we", "separate", "glint", "component", "image", "-lrb-", "i.e.", "direct", "illumination", "normalmapped", "specular", "surface", "from", "point", "light", "-rrb-", "from", "all", "other", "light", "path", "which", "compute", "use", "path", "trace", "any", "other", "standard", "algorithm", "could", "use", "well", "first", "bounce", "from", "camera", "we", "use", "full", "normal", "map", "importance", "sampling", "further", "bounce", "we", "use", "global", "p-ndf", "approximation", "both", "sampling", "evaluation", "since", "accurate", "p-ndf", "longer", "make", "difference", "here", "we", "could", "also", "use", "normal", "map", "mip-mapping", "method", "case", "simple", "extension", "would", "smoothly", "transition", "normal", "map", "mip-mapping", "method", "distance", "once", "glint", "become", "insignificant", "alternatively", "we", "algorithm", "can", "treat", "new", "black-box", "brdf", "additional", "pixel", "footprint", "specification", "while", "keep", "all", "other", "part", "renderer", "unmodified", "however", "we", "prefer", "get", "separate", "timing", "we", "want", "make", "sure", "glint", "component", "completely", "deterministic", "avoid", "any", "confusion", "about", "how", "much", "noise", "come", "from", "true", "glint", "vs.", "algorithm", "reason", "we", "also", "do", "use", "area", "light", "depth", "field", "motion", "blur", "we", "result", "though", "would", "easy", "add", "result", "we", "implementation", "use", "Mitsuba", "framework", "-lsb-", "jakob", "2010", "-rsb-", "run", "6-core", "Intel", "i7-4770k", "desktop", "3.5", "GHz", "hyperthread", "12", "thread", "below", "we", "describe", "scene", "show", "Figure", "10", "please", "see", "temporal", "version", "attach", "video", "note", "how", "strong", "glinting", "correct", "give", "normal", "map", "lighting", "we", "method", "entirely", "deterministic", "do", "produce", "any", "Monte", "Carlo", "noise", "we", "timing", "-lrb-", "Table", "-rrb-", "refer", "one", "frame", "-lrb-", "1280", "720", "-rrb-", "note", "how", "overhead", "we", "algorithm", "smaller", "than", "standard", "render", "other", "light", "path", "also", "note", "we", "performance", "depend", "number", "pixel", "glinty", "material", "independent", "scene", "complexity", "snail", "scene", "illustrate", "snail?s", "shell", "smooth", "heightfield", "create", "inverse", "fft", "from", "isotropic", "gaussian", "spectrum", "randomize", "phase", "convert", "normal", "map", "feature", "normal", "map", "smaller", "than", "pixel", "yet", "result", "far", "from", "smooth", "produce", "fairly", "dramatic", "glint", "effect", "metallic", "paint", "snail", "metallic", "paint", "often", "use", "car", "specifically", "design", "show", "glint", "compose", "several", "layer", "most", "important", "top", "clear-coat", "-lrb-", "which", "provide", "smooth", "specular", "highlight", "-rrb-", "color", "absorptive", "layer", "embedded", "aluminum", "flake", "-lsb-", "Rump", "et", "al.", "2008", "-rsb-", "we", "model", "flake", "use", "normal", "map", "construct", "cluster", "pixel", "voronoi", "cell", "whose", "center", "choose", "use", "Poisson", "disk", "sampling", "assign", "fix", "normal", "each", "cell", "draw", "from", "Beckmann", "distribution", "normal", "interpolation", "necessary", "-lrb-", "desirable", "-rrb-", "case", "each", "texel", "have", "constant", "normal", "subdivision", "beyond", "triangle", "require", "either", "we", "also", "add", "diffuse", "lobe", "approximate", "multiple", "internal", "reflection", "between", "flake", "clear-coat", "snail", "about", "10", "cm", "long", "make", "flake", "more", "visible", "than", "car", "blender", "scene", "show", "energy", "drink", "blender", "bumpy", "plastic", "body", "brush", "metal", "lid", "brush", "metal", "notoriously", "difficult", "render", "under", "sharp", "lighting", "typical", "compromise", "clude", "increase", "groove", "size", "light", "size", "roughness", "unrealistic", "level", "none", "necessary", "we", "approach", "we", "generate", "normal", "map", "use", "inverse", "fft", "approach", "anisotropic", "gaussian", "power", "spectrum", "add", "noise", "normal", "simulate", "tiny", "dent", "blender", "body", "we", "use", "ellipsoid", "bump", "heightfield", "which", "produce", "glint", "different", "appearance", "from", "snail", "Cutlery", "scene", "show", "metallic", "cutlery", "strong", "scratch", "from", "heavy", "use", "configuration", "like", "under", "strong", "small", "led", "lighting", "fixture", "often", "see", "restaurant", "we", "generate", "scratch", "randomly", "orient", "slightly", "blur", "line-shaped", "valley", "we", "add", "dent", "through", "noise", "like", "brush", "metal", "above", "Ocean", "wave", "finally", "we", "show", "we", "method", "apply", "ocean", "similar", "larger", "feature", "than", "previous", "example", "here", "we", "model", "ocean", "single", "rectangle", "normal", "map", "generate", "use", "inverse", "fft", "method", "-lsb-", "tessendorf", "1999", "-rsb-", "while", "good", "anti-aliased", "ocean", "rendering", "have", "be", "possible", "use", "LEAN", "LEADR", "method", "we", "can", "produce", "very", "sharp", "correct", "glint", "even", "distance", "where", "multiple", "wave", "project", "pixel", "ACM", "transaction", "Graphics", "Vol", "33", "no.", "Article", "116", "publication", "date", "July", "2014", "116:8", "l.-q", "Yan", "et", "al.", "Figure", "10", "still", "frame", "from", "we", "five", "scene", "snail", "-lrb-", "show", "simple", "isotropic", "noise", "normal", "map", "-rrb-", "metallic", "paint", "snail", "-lrb-", "modeling", "metallic", "flake", "embed", "paint", "-rrb-", "blender", "-lrb-", "show", "brush", "metal", "dent", "plastic", "ellipsoid", "bump", "-rrb-", "cutlery", "-lrb-", "scratch", "metal", "dent", "-rrb-", "ocean", "-lrb-", "temporally", "vary", "wave", "cause", "wind", "-rrb-", "we", "use", "simple", "srgb", "image", "any", "tone-mapping", "could", "apply", "full", "animation", "show", "supplementary", "video", "normal", "map", "contrast", "enhance", "visualization", "purpose", "ACM", "transaction", "Graphics", "Vol", "33", "no.", "Article", "116", "publication", "date", "July", "2014", "Rendering", "Glints", "High-Resolution", "Normal-Mapped", "Specular", "Surfaces", "116:9", "Snail", "Metallic", "Blender", "Cutlery", "Ocean", "we", "2.2", "1.0", "5.5", "6.2", "9.9", "global", "15.6", "19.5", "19.0", "8.7", "envmap", "20.9", "6.1", "23.5", "total", "17.8", "20.5", "45.4", "21.0", "33.4", "Snail", "Metallic", "Blender", "Cutlery", "Ocean", "we", "2.2", "1.0", "5.5", "6.2", "9.9", "global", "15.6", "19.5", "19.0", "8.7", "envmap", "20.9", "6.1", "23.5", "total", "17.8", "20.5", "45.4", "21.0", "33.4", "Table", "timing", "typical", "frame", "minute", "6-core", "hyperthreaded", "i7", "machine", "we", "refer", "runtime", "we", "direct", "illumination", "algorithm", "rest", "cost", "standard", "path", "trace", "we", "split", "environment", "lighting", "separate", "component", "conclusion", "future", "work", "fundamental", "relationship", "between", "high-resolution", "specular", "surface", "small", "light", "source", "complex", "normal", "distribution", "glint", "important", "material", "appearance", "phenomenon", "receive", "minimal", "attention", "previous", "research", "we", "explain", "failure", "traditional", "Monte", "Carlo", "approach", "reproduce", "effect", "introduce", "new", "deterministic", "approach", "compute", "underlie", "integral", "we", "key", "idea", "shade", "surface", "patch", "see", "through", "pixel", "evaluate", "true", "normal", "distribution", "function", "patch", "single", "normal", "which", "can", "do", "under", "gaussian", "kernel", "assumption", "problem", "lead", "integral", "bivariate", "gaussian", "over", "triangle", "which", "can", "efficiently", "approximate", "we", "show", "complex", "temporally", "vary", "specular", "reflection", "from", "material", "bumpy", "plastic", "brush", "scratch", "metal", "metallic", "paint", "ocean", "wave", "future", "would", "interesting", "bring", "we", "approach", "closer", "interactivity", "further", "approximation", "extension", "displacement", "map", "would", "possible", "we", "could", "also", "explore", "related", "glinty", "phenomenon", "cause", "refraction", "see", "e.g.", "snow", "hair", "waterfall", "fabric", "plant", "cellular", "structure", "Acknowledgments", "Nolan", "Goodnight", "provide", "video", "voiceover", "snail", "model", "create", "Paul", "Deyo", "blender", "Colin", "Smith", "some", "normal", "map", "datum", "provide", "Micah", "Johnson", "Ted", "Adelson", "Funding", "work", "provide", "NSF", "grant", "1011832", "-lrb-", "Beyond", "Flat", "Images", "-rrb-", "Intel", "Science", "Technology", "Center", "Visual", "Computing", "we", "acknowledge", "equipment", "support", "from", "NVIDIA", "Nokia", "Samsung", "reference", "urley", "B.", "2012", "physically-based", "shade", "Disney", "Technical", "Report", "ook", "R.", "L.", "ARPENTER", "L.", "atmull", "E.", "1987", "REYES", "image", "render", "architecture", "SIGGRAPH", "87", "95", "102", "upuy", "J.", "EITZ", "E.", "ehl", "J.-C.", "oulin", "P.", "EYRET", "F.", "stromoukhov", "V.", "2013", "linear", "efficient", "antialiased", "displacement", "Reflectance", "mapping", "ACM", "Trans", "graph", "32", "enz", "a.", "2004", "numerical", "computation", "rectangular", "bivariate", "trivariate", "normal", "probability", "statistics", "Computing", "14", "251", "260", "C.", "UN", "B.", "AMAMOORTHI", "R.", "RINSPUN", "E.", "2007", "frequency", "domain", "normal", "map", "filter", "ACM", "Trans", "graph", "26", "28:1", "28:12", "gehy", "H.", "1999", "trace", "ray", "differential", "SIGGRAPH", "99", "179", "186", "AKOB", "W.", "arschner", "S.", "2012", "manifold", "exploration", "markov", "chain", "monte", "carlo", "technique", "render", "scene", "difficult", "specular", "transport", "ACM", "Trans", "graph", "31", "58:1", "58:13", "AKOB", "W.", "SAN", "M.", "l.-q.", "awrence", "J.", "MAMOORTHI", "R.", "arschner", "S.", "2014", "discrete", "stochastic", "microfacet", "model", "ACM", "Trans", "graph", "33", "AKOB", "W.", "2010", "Mitsuba", "renderer", "http://www.mitsuba", "renderer.org", "itchell", "D.", "ANRAHAN", "P.", "1992", "illumination", "from", "curved", "reflector", "SIGGRAPH", "Comput", "graph", "26", "283", "291", "oon", "J.", "T.", "ALTER", "B.", "arschner", "S.", "R.", "2007", "render", "discrete", "random", "media", "use", "precomputed", "scattering", "solution", "egsr", "07", "231", "242", "lano", "m.", "aker", "D.", "2010", "lean", "mapping", "ACM", "i3d", "10", "181", "188", "oly", "ub", "2004", "Polycub", "cubature", "over", "polygonal", "domain", "http://cran.r-project.org/web/packages/", "polycub", "access", "2014-01-14", "ump", "m.", "uller", "G.", "ARLETTE", "R.", "OCH", "D.", "LEIN", "R.", "2008", "photo-realistic", "rendering", "metallic", "car", "paint", "from", "image-based", "measurement", "Computer", "Graphics", "Forum", "27", "527", "536", "essendorf", "J.", "1999", "simulate", "ocean", "water", "Technical", "Report", "oksvig", "M.", "2005", "mipmapp", "normal", "map", "Journal", "Graphics", "Tools", "10", "65", "71", "each", "E.", "1997", "robust", "Monte", "Carlo", "method", "light", "transport", "simulation", "phd", "thesis", "Stanford", "University", "ALTER", "B.", "arschner", "S.", "R.", "H.", "orrance", "K.", "E.", "2007", "Microfacet", "model", "refraction", "through", "rough", "surface", "egsr", "07", "195", "206", "ALTER", "B.", "HAO", "S.", "OLZSCHUCH", "N.", "ALA", "K.", "2009", "single", "scattering", "refractive", "media", "triangle", "mesh", "boundary", "ACM", "Trans", "graph", "28", "92:1", "92:8", "K.", "ao", "y.-p.", "l.-q.", "ong", "Z.", "ang", "R.", "s.-m", "2014", "practical", "algorithm", "render", "interreflection", "all-frequency", "brdf", "ACM", "Trans", "graph", "33", "10:1", "10:16", "ACM", "transaction", "Graphics", "Vol", "33", "no.", "Article", "116", "publication", "date", "July", "2014" ],
  "content" : "\n  \n    66744f679036598ce8fd1c46517d0731b31d59fb307700af4f5272b97c34e72a\n    p3e\n    10.1145/2601097.2601155\n    Name identification was not possible. \n  \n  \n    \n      \n        Rendering Glints on High-Resolution Normal-Mapped Specular Surfaces\n      \n      Ling-Qi Yan 1? Milo s Ha san 2? Wenzel Jakob 3 Jason Lawrence 4 Steve Marschner 5 Ravi Ramamoorthi 1 ? dual first authors 1 Univ. of California, Berkeley 2 Autodesk 3 ETH Z?rich 4 Univ. of Virginia 5 Cornell Univ.\n      \n        \n        Figure 1: A rendering of highly specular objects under point lighitng. A high-resolution normal map (2048 2 ) makes rendering impractical with standard techniques: the highlights are missed by naive pixel sampling. Left inset: Our solution is based on the concept of a pixel normal distribution function (P-NDF), which can be highly complex. Right inset: Our method is accurate even in a moving-light sequence.\n      \n      Complex specular surfaces under sharp point lighting show a fascinating glinty appearance, but rendering it is an unsolved problem. Using Monte Carlo pixel sampling for this purpose is impractical: the energy is concentrated in tiny highlights that take up a minuscule fraction of the pixel. We instead compute an accurate solution using a completely different deterministic approach. Our method considers the true distribution of normals on a surface patch seen through a single pixel, which can be highly complex. We show how to evaluate this distribution efficiently, assuming a Gaussian pixel footprint and Gaussian intrinsic roughness. We also take advantage of hierarchical pruning of position-normal space to rapidly find texels that might contribute to a given normal distribution evaluation. Our results show complex, temporally varying glints from materials such as bumpy plastics, brushed and scratched metals, metallic paint and ocean waves. CR Categories: I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism?Color, shading, shadowing, and texture Keywords: glints, specular highlights, high-resolution normal maps, normal distribution functions\n      Links:\n      \n        \n      \n      DL PDF\n      \n        \n      \n      ACM Reference Format Yan, L., Hasan, M., Jakob, W., Lawrence, J., Marschner, S., Ramamoorthi, R. 2014. Rendering Glints on High-Resolution Normal-Mapped Specular Surfaces. ACM Trans. Graph. 33, 4, Article 116 (July 2014), 9 pages. DOI = 10.1145/2601097.2601155 http://doi.acm.org/10.1145/2601097.2601155. Copyright Notice Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the fi rst page. Copyrights for third-party components of this work must be honored. 2014 Copyright held by the Owner/Author. Publication rights licensed to ACM. 0730-0301/14/07-ART116 DOI: http://dx.doi.org/10.1145/2601097.2601155\n    \n    \n      \n        1 Introduction\n      \n      Conventional BRDFs model complex microgeometry using a smooth normal distribution function (NDF) of infinitely small microfacets. However, real surface features are certainly not infinitely small. Bumps and flakes from anywhere between a few microns (brushed metal) to about 0.1 mm (flakes in metallic paints) to centimeters (ocean waves) can produce interesting glinty behavior that is visible with the naked eye. These glints are very pronounced with a light source that subtends a small solid angle, such as the sun and small light fixtures. This is true for surfaces specifically designed to glint, such as metallic paints with embedded flakes or decorative brushed metals, but also for everyday objects such as plastics or ceramics (see Figure 2 , left). In fact, smooth surfaces that meet the microfacet assumption are the exception rather than the norm. Most shiny surfaces that one encounters in reality have this type of glinty behavior, readily observed under sharp lighting. Our goal is to simulate glinty appearance in still images and animations (see Figure 1 and the supplemental video). Representing geometry at a resolution sufficient to reveal the features that cause glints is not difficult: we use high-resolution normal maps. A much harder challenge is rendering a complex specular surface under sharp lighting. Standard uniform pixel sampling techniques for direct illumination have extremely large variance, and using them for this purpose is impractical. The reason is that most of the energy is concentrated in tiny highlights that take up a minuscule fraction of a pixel, and uniform pixel sampling is ineffective at hitting the highlights ( Figure 3 ). An alternative explanation is that the space of valid camera-surface-light paths is complicated and cannot be easily sampled from the camera or from the light. In some sense, we need to search the surface for normals aligned with the half vector, and this cannot be done by brute-force sampling. Normal map filtering techniques [Toksvig 2005; Han et al. 2007; Olano and Baker 2010; Dupuy et al. 2013] also do not fully solve the problem. These methods attempt to approximate the NDF at a\n      ACM Transactions on Graphics, Vol. 33, No. 4, Article 116, Publication Date: July 2014\n      116:2\n      ?\n      L.-Q. Yan et al.\n      Computer Mouse\n      \n        \n        \n      \n      (a) (b) (c)\n       Figure 2 : (a-b)\n      6.2 ?10 ?5 sr\n      ? 0.5 2 mm).\n      \n        Two photographs of an injection molded plastic computer mouse illuminated by a small light source (? solid angle) reveal its glinty appearance. These effects are impractical to simulate using uniform pixel sampling. Real-world normal distribution functions of a dark bumpy ceramic tile were measured by illuminating the surface with a small focused incoherent source (? solid angle covering a surface patch of The images in (d) and (e) were captured by a camera located opposite a diffuse acrylic barrier from the source. They reveal a distinct non-Gaussian distribution of scattered light, corresponding to the of the surface patch, only slightly warped and blurred because of the optical limits of our setup.\n        given scale by broad lobes, but the true NDF is highly complex; it cannot be approximated well using a single Gaussian lobe, or even a small number of lobes ( Figure 4 ). Although these approaches avoid aliasing artifacts, they are not able to reproduce glinty appearance under high-frequency lighting. We instead desire to compute the true solution that Monte Carlo would eventually converge to, using a completely different deterministic approach with minimal approximations. 1 We consider the actual, unsimplified NDF of a surface patch P seen through a single pixel (an example is shown in Figure 1 , left inset). This P-NDF can be easily estimated by binning: repeatedly choose a point on the patch, take its normal, perturbed by the intrinsic surface roughness, and add it into a bin. The key problem is that for direct illumination, we need to evaluate the P-NDF for a single half-vector. Clearly, it would be extremely inefficient to use the binning approach here, wasting all but a single bin. Indeed, this is equivalent to what a standard renderer would do, trying to hit a tiny light source by chance. Instead, we require evaluation of the density of a single normal coming from anywhere on the patch. Moreover, the P-NDF is different for every pixel, so computations cannot be reused. In our method, the P-NDF is just a mathematical tool to derive what the correct pixel brightness should be; it is never fully constructed, and only evaluated for a single vector. We introduce an algorithm for P-NDF evaluation in Section 4. The key assumptions that make the evaluation possible are a Gaussian pixel filter and a tiny amount of Gaussian roughness on the specular surface. These combine into a single 4-dimensional Gaussian ?query? that is analytically integrated across the normal map, avoiding random sampling. A basic computational block of our solution is an integral of a 2-dimensional Gaussian over a triangular domain, described in Section 5. We hierarchically prune positionnormal space to quickly find texels that might contribute to a given P-NDF evaluation (Section 6). Our results show complex, temporally varying glints from bumpy plastics, brushed and scratched metals, metallic paint and ocean waves; see Section 7 and Figure 10 .\n        1 Specifically, constant view and light direction over P, and the approximations made when solving the integral in Section 5.\n        NDF Measurements\n        (d) (e)\n        3.5 ? 10 ?5 sr\n        (c-e)\n        P-NDF\n      \n      \n        2 Related work\n        Naive pixel sampling. The standard approach to compute direct illumination on a bumpy specular surface is to trace a ray through the pixel, evaluate the normal of the hit point, and shade the point from a light source using the point?s finite roughness BRDF; this fails at rendering glints ( Figure 3 ). Multiple importance sampling [Veach 1997] does not help, because it is the pixel integral that is inefficiently sampled, rather than the BRDF/light combination. The REYES approach of surface subdivision into micropolygons [Cook et al. 1987] is equally inefficient, since it would require micropolygons as small as the highlights. Though we use fine triangulations of the normal map for smoothness, our method can handle highlights that are arbitrarily smaller than the triangles. Normal map filtering techniques can deliver artifact-free renderings by approximating a pixel?s NDF by a single lobe [Toksvig 2005; Olano and Baker 2010; Dupuy et al. 2013] or a small number of lobes [Han et al. 2007]. However, none of these methods can correctly capture glinty appearance. The core of the problem is that the true NDFs can be highly complex, and their sharp features directly translate into spatial and temporal glinting. Approximating them by broad lobes is only applicable under low-frequency illumination that would filter the complex features anyway. Figure 4 shows the effect of replacing the true NDF by a single Gaussian or a mixture of Gaussians, thus losing the sharp features. Single-point evaluation of caustics. Caustics are related to our work, since glints can be interpreted as ?directional caustics?. Most methods sample paths (particles, photons) and accumulate them in a data structure (kd-tree, hash grid, or bins). However, this is not sufficient for our purposes; we require point evaluation, which is much harder. Walter et al. [2009] compute volumetric caustics due to the refraction of a point light into a scattering volume through a bumpy interface. This is related to our approach: linear normal interpolation over triangles is used, a discrete set of specular connections is enumerated, the Jacobian determinant term determines highlight intensity, and a hierarchy is used to speed up the enumeration. However, no intrinsic roughness is considered (resulting in singularities), and the phenomenon rendered is quite different. Mitchell and Hanrahan [1992] compute reflected caustics from an implicit surface by enumerating the discrete set of valid light paths through interval arithmetic. They used wavefront tracing as a way to compute the contribution of a valid specular path; this is again\n        ACM Transactions on Graphics, Vol. 33, No. 4, Article 116, Publication Date: July 2014\n        Rendering Glints on High-Resolution Normal-Mapped Specular Surfaces\n        ?\n        116:3\n        \n          \n        \n        Our method (17 min, 2.2 min actual glints) Naive sampling (2 hours, 4,096 samples)\n        \n          Figure 3: Naive pixel sampling fails at rendering complex specular surfaces under small lights. The reason is that the highlights are too small to be efficiently hit by uniform pixel sampling, which is obvious from the zoomed pixel on the right. Multiple importance sampling would not help, since it is the pixel integral that is inefficiently sampled, not the light/BRDF combination.\n          \n          \n        \n        correct NDF isotropic Gaussian (our approach) [Toksvig 2005]\n        \n          \n          \n        \n        anisotropic Gaussian mixture of 10 anisotropic (LEAN, LEADR) [Han et al 2007]\n        \n          Figure 4:\n        \n        Approximating the true NDF by a single Gaussian (Toksvig, LEAN, LEADR) or a small number of Gaussians (Han et al.) loses the sharp features that cause glinting.\n        equivalent to the Jacobian determinant term for a single reflection, with the associated singularities.  Other work on specular paths. Jakob and Marschner [2012] is an extension of Metropolis light transport, which allows mutation of a specular path at a single diffuse vertex; however, in our case, no diffuse vertex is available for mutations. In the perfectly specular case, there is a discrete set (rather than a manifold) of valid paths, as already noted above. Moon et al. published several approaches to approximate higher-order specular bounces, e.g. [2007], but loworder specular paths are still computed brute-force with a relatively large light source. Stochastic reflectance. [Jakob et al. 2014] is concurrent work that also addresses the problem of glinty surfaces, using a stochastic approach. Rather than work from a normal map, that method models the surface as a procedural random collection of specular flakes that occur according to a particular normal distribution. The key to their method is counting up the particles contributing to a particular illumination calculation without actually generating them, providing efficiency for large query areas where many particles contribute. When used as a model for a bumpy smooth surface, the stochastic approach is phenomenological: the random-flake approximation replaces the P-NDF. In contrast, our algorithm exactly determines how a given specular surface, defined by a particular normal map, really looks under given sharp illumination. Moreover, normal maps can express surface features large enough to be visible in the image, e.g. the scratched and brushed examples in this paper.\n        \n          \n             Zoom-in of a single pixel\n            \n              \n                \n                   symbol\n                   domain\n                   definition\n                \n              \n              \n                \n                   D\n                  \n                   unit disk (proj. hemisphere)\n                \n                \n                   ?\n                  \n                   invalid normal\n                \n                \n                   s = (s, t)\n                   D\n                   unit disk parameters, ? defining\n                \n                \n                  \n                  \n                   vectors (s, t, 1 ? s 2 ? t 2 )\n                \n                \n                   u = (u, v)\n                   R 2\n                   texture space parameters\n                \n                \n                   n(u)\n                   R 2 ? D\n                   normal map function\n                \n                \n                   J(u)\n                   R 2 ? R 2?2\n                   Jacobian of n(u)\n                \n                \n                   P\n                  \n                   pixel footprint\n                \n                \n                   G p (u)\n                   R 2 ? R\n                   pixel Gaussian\n                \n                \n                   G r (s)\n                   R 2 ? R\n                   intrinsic roughness Gaussian\n                \n                \n                   G c [P, s](x, y)\n                   R 4 ? R\n                   combined Gaussian query for footprint P and normal s\n                \n                \n                   D(s)\n                   D??? R\n                   normal distribution function\n                \n              \n            \n          \n          Zoom-in of a single pixel\n          symbol domain definition D unit disk (proj. hemisphere) ? invalid normal s = (s, t) D unit disk parameters, ? defining vectors (s, t, 1 ? s 2 ? t 2 ) u = (u, v) R 2 texture space parameters n(u) R 2 ? D normal map function J(u) R 2 ? R 2?2 Jacobian of n(u) P pixel footprint G p (u) R 2 ? R pixel Gaussian G r (s) R 2 ? R intrinsic roughness Gaussian G c [P, s](x, y) R 4 ? R combined Gaussian query for footprint P and normal s D(s) D??? R normal distribution function\n          Table 1: Notation used in the paper.\n        \n      \n      \n        3 Preliminaries\n        Solving our problem requires thinking about a surface patch P seen through a pixel all at once, rather than one point at a time. Just as every surface point has a local BRDF, we can think of areas of the surface having P-BRDFs that describe how the total contribution to the pixel depends on the illumination. Rendering detailed normal maps requires an efficient way to evaluate the area-integrated PBRDF, rather than letting the pixel filter do it implicitly by point sampling.  For a specular normal-mapped surface, this area-integrated BRDF is primarily determined by the distribution of surface normals over the relevant patch of surface: we need to be able to ask ?how often? a given normal vector occurs in the patch. We call this distribution the P-NDF; it is just like the microfacet distribution in a standard BRDF model, but it gives the normal distribution for a particular area rather than a global average over the whole surface. A crucial observation is that the P-NDF is not a simple, broad function. It contains a surprising amount of structure ( Figure 5 ) even when the surface patch is far larger than the features in the normal map. It also varies dramatically across the surface. Evaluating the P-NDF efficiently while preserving this detailed spatio-angular structure is the key to accurately capturing glinty appearance. Let us define these terms more precisely. Table 1 lists the symbols used throughout the paper. Pixel footprint. We assume a Gaussian pixel reconstruction filter. This projects to an approximately Gaussian footprint P in the uv-parameterization of the normal map, whose covariance matrix is easily computed by propagating ray differentials to the surface [Igehy 1999]. In practice, we actually subdivide pixels into 4 ? 4 subpixels, and make the footprints smaller accordingly. This handles edges better, but for simplicity we will talk about pixel rather than subpixel footprints. Projected hemisphere. We will use the unit disk D to express hemispherical unit vectors. ? The point s = (s, t) ? D represents the unit vector (s, t, 1 ? s 2 ? t 2 ) on the hemisphere. Let us also define the extended unit disk as the union of the unit disk and a special symbol ?, which allows for normal distributions that sometimes return invalid normals. This is less common than working with hemispheres, but it will be useful shortly. Normal maps can be given directly or as the derivative of a heightfield. We use the direct option, though all but one normal map in our examples do come from a heightfield (the exception is the metallic paint flakes). The normal map is then defined as a function n : R 2 ? D from points u = (u, v) in texture space to normals s = (s, t). The Jacobian of n(u), denoted J(u), plays an important role in determining highlight brightness, and points where det J(u) = 0 cause problems unless we are careful. Intrinsic roughness. We could treat the surface as perfectly specular; however, we found that it is useful to consider a small amount of unresolved fine roughness. This matches the real world in that perfect smoothness is unachievable and the limits of geometric optics are reached at very high resolutions. It also prevents singularities (infinitely bright highlights), which arise with perfectly specular surfaces when det J(u) = 0, and cleanly deals with normal maps that contain piece-wise constant regions. NDFs. We can now define a normal distribution function (NDF) as a probability distribution on the extended unit disk, with the obvious measure. (The associated random event is simply a ?choice of normal?.) This definition slightly deviates from standard references such as [Walter et al. 2007] and [Burley 2012], but it is fully compatible with them, and is actually more convenient. In hemispherical terms, NDFs like Beckmann and GGX require an additional cosine term to integrate to 1, and their associated sampling routines also bake in a cosine (see eq. (4) and (28) in Walter et al. [2007]); in our formulation, no cosines need to be worried about. Furthermore, we now have more freedom in what passes as an NDF: any suitable plane function can be restricted to the unit disk and properly normalized. In particular, Gaussians are perfectly good NDFs, and this includes anisotropic and non-centered ones. Finally, statements such as ?blur an NDF by a Gaussian? now have a very precise meaning. Even though this is different from spherical convolutions with vMF or Kent distributions, the difference is not critical to us: we simply use the convolutions to avoid singularities coming from unrealistically perfect surfaces. The P-NDF can now be defined as the probability distribution of the random variable defined by sampling the footprint P, evaluating the normal at the sampled location, and perturbing by the intrinsic roughness kernel. The last step can sometimes result in a normal outside of the unit disk; these events are collected by the probability of ?, and are often near zero in practice. Figure 5 shows different P-NDFs as the size of the pixel footprint increases. Note that quite large footprint sizes are required for these NDFs to start to mimic analytic normal distributions like Beckmann.\n        ACM Transactions on Graphics, Vol. 33, No. 4, Article 116, Publication Date: July 2014\n        116:4\n        ?\n        L.-Q. Yan et al.\n        \n          \n          Figure 5: The P-NDFs of a smooth specular heightfield with a Gaussian power spectrum, with a pixel footprint covering about 15 ? 15, 30 ? 30, 90 ? 90 and 300 ? 300 texels respectively.\n        \n      \n      \n        4 -NDF evaluation in flatland and 3D\n        P\n        Our core challenge is to find an evaluation algorithm for the PNDF D(s) for a half-vector s, corresponding to a given footprint on a given normal map and with a given intrinsic roughness; indeed, with such an algorithm at hand, it is straightforward to plug the PNDF into a standard microfacet BRDF, which can be used for direct illumination calculations:\n        \n          1\n          F (i.h)G(i.h)D(h) f r (i, o) = 4 (i.n) (o.n)\n        \n        where h = (i+o)/ i+o is the half vector, n is the unmapped surface normal, F is the Fresnel term, and G is a shadowing-masking term (only needed to avoid infinities at grazing). In the following sections, we will first make the P-NDF evaluation problem more approachable by analyzing the situation in flatland, and then present the full 3D solution, which naturally follows from the flatland case. The flatland situation is simpler: there is only one texture parameter u. The normal map can be written as a function n(u) returning normals in (?1, 1), which is analogous to the unit disk from the 3D case. The full normal vector is (n(u), 1 ? n(u) 2 ). The pixel footprint P will turn into a Gaussian reconstruction kernel G p (u) that integrates to 1. Let X be a random variable that is distributed  according to G p (u). The key question is, what is the distribution of the random variable n(X) on (?1, 1)? This is not a simple multiplication or convolution of the normal map with G p , but instead a pdf of a dependent random variable. The situation is illustrated in Figure 6 . We can write down the P-NDF as:\n        ACM Transactions on Graphics, Vol. 33, No. 4, Article 116, Publication Date: July 2014\n        Rendering Glints on High-Resolution Normal-Mapped Specular Surfaces\n        ?\n        116:5\n        Normal map Pixel reconstruction Gaussian 1.0 0.40 0.35 0.5 0.30 0.25 0.0 0.20 0.15 0.5 0.10 0.05 1.0 0.00 4 3 2 1 0 1 2 3 4 4 3 2 1 0 1 2 3 4 (a) (b)\n        \n          Figure 6: Flatland illustration of P-NDF sampling and evaluation. (a) A normal map is a 1D curve n(u) of the texture coordinate u. (The other component of the normal vector is 1 ? n(u) 2 ). (b) The pixel ? of interest projects to a Gaussian footprint given by G p (u). (c) The P-NDF D(s) giving the probability density of a given normal (s, 1 ? s 2 ), assuming an intrisic roughness kernel G r (s) with ? = 0.01. (d) P-NDF evaluation in flatland can be visualized as integration of the combined Gaussian query G c [P, s] over the segmented graph of the normal map. In areas where the Gaussian is effectively zero (outside of the ellipse) we can prune the segments using a hierarchy.\n        \n        \n          2\n          ? G p (u i ) D(s) = G p (u)?(n(u) ? s)du = , ?? i |n (u i )|\n        \n        where u i are the roots of the equation n(u) = s. The delta function restricts the integral to points where n(u) = s, and the second equation intuitively accounts for the ?speed? of crossing the root; it only works if a finite set of roots exists. As we can see, the P-NDF will have singularities at points where n (u) = 0. These correspond to inflection points of the original heightfield. This analysis shows that the P-NDF can have infinite values. If we use a pinhole camera and a point light, this can cause infinitely bright pixels. (Our distant light/camera approximation is not the culprit; infinities could occur even if we did not make this approximation.) Furthermore, there could be constant regions in the normal map, so we get n (u) = 0 for whole intervals, and corresponding delta functions in the P-NDF . To avoid singularities and other problems inherent in perfect specular surfaces, we introduce a tiny amount of finite roughness to the normal-mapped surface. Since the P-NDF is just a function on the interval (?1, 1), we can convolve it with a Gaussian G r (s) easily:\n        \n          3\n          1 ? D(s) = G r (s ? s ) G p (u)?(n(u) ? s )duds ?1 ?? ? 1 = G p (u) G r (s ? s )?(n(u) ? s )ds du ?? ?1 ? = G p (u)G r (n(u) ? s)du ?? ? = G c [P, s](u, n(u))du. ??\n        \n        In the last step, we combined the two 1D Gaussians into a single 2D one:\n        \n          4\n          G c [P, s](x, y) = G p (x)G r (y ? s).\n        \n        By changing the integration order and eliminating delta functions, we have removed any notion of root finding or singularities from the problem, leaving a single well-defined integral of a onedimensional real function. An elegant way to intuitively visualize  the result is that we would like to integrate the combined reconstruction kernel G c [P, s] along the graph of the normal function, the plane curve (u, n(u)). Note, though, that the measure is the standard line measure on the u axis, not arc length along the graph. Figure 6 (d) illustrates this intuition, and immediately leads to an accelerated query idea: we can use a hierarchy to prune all normal map segments in areas where G c [P, s] is effectively zero. In flatland, G c is a 2D Gaussian, so we can subdivide the graph into many line segments, and integrate the combined kernel along the line segments. This leads to integrals of 1-dimensional Gaussians over the segments, which can be computed easily in terms of erf(?). This shows the benefit of choosing Gaussian filters; other choices such as splines would lead to integration problems without closedform solutions. Also note that we made the graph piecewise-linear, instead of the full integrand G c (u, n(u)): the latter would be a bad choice, since\n        Normal distribution function 2.0 1.5 1.0 0.5\n        \n          \n        \n        0.0 1.0 0.5 0.0 0.5 1.0 (c) (d)\n      \n      \n        the Gaussian can be much narrower than the discretization step.\n        We would like to handle specular highlights arbitrarily smaller than the finest discretization level, and this choice is key to achieving that goal. 3D analysis. We can extend the above line of thinking to three dimensions, with two-dimensional texture space parameterized by u = (u, v), and a normal function n : R 2 ? D. A 2D Gaussian reconstruction kernel G p : R 2 ? R now models the pixel footprint P. The random process of choosing a position u by sampling G p and taking its normal will have the following probability distribution:\n        \n          5\n          G p (u i ) D(s) = G p (u)?(n(u) ? s)du = . R 2 i | det J(u i )|\n        \n        This is in direct analogy to the flatland derivation. While the flatland case has singularities at the inflection points of the original one-dimensional heightfield, here we have singularities at det J(u) = 0, which is a set of curves in uv-space where the curvature of the original heightfield flips between elliptic and hyperbolic. These curves directly correspond to the ?folds? we often see in PNDF visualizations. Again, piecewise constant normal maps (or affine regions of the heightfield) make det J(u) = 0 over whole regions, causing delta functions in D(s). In fact, we have tried to implement eq. (5) using analytic root finding and found it impractical due to the singularities. Therefore, as in flatland, we introduce intrinsic roughness. This is accomplished by a 2-dimensional Gaussian kernel G r (s), which convolves the P-NDF . The derivation is identical to flatland except\n        ACM Transactions on Graphics, Vol. 33, No. 4, Article 116, Publication Date: July 2014\n        116:6\n        ?\n        L.-Q. Yan et al.\n        2 triangles / texel 32 triangles / texel\n        \n          Figure 7: A patch of the normal map with 9 ? 9 texels. The zcomponent of the normal is visualized using iso-lines, to clearly depict curvature discontinuities. Using 32 triangles per texel shows better smoothness than 2, at no extra storage.\n        \n        with bold letters:\n        \n          6\n          D(s) = G r (s ? s ) G p (u)?(n(u) ? s )duds D R 2 = G c [P, s](u, n(u))du. 2 R\n        \n        where\n        \n          7\n          G c [P, s](x, y) = G p (x)G r (y ? s)\n        \n        We can again visualize this intuitively as integration of the combined 4D reconstruction kernel G c [P, s] along the graph of the normal function, (u, n(u)), which is a 2D surface in 4D space. This is hard to plot; however, the intuition that the graph can be triangulated and G c reduces to 2D Gaussians over the triangles is correct. The hierarchical pruning idea also carries over from flatland. In summary, we have observed that the P-NDF D(s) is not trivially evaluated at a single point (direction) s. However, under Gaussian pixel and roughness kernels, we have cast this evaluation as an integration problem, which can be solved by discretizing the normal map into small affine patches. (Note, though, that the specular highlights we handle can still be much smaller than the patches.) The next section discusses the details of solving this integration problem.\n      \n      \n        5 Analytic integration\n        To numerically evaluate equation (6), we choose to discretize the normal map n(u, v) into triangles, and linearly interpolate the normal across them. More precisely, we linearly interpolate the s and t values; the third coordinate is implied. The simplest solution is to split each normal map texel into two triangles. This is sometimes sufficient, but we found that this discretization can produce triangular artifacts in the P-NDF, if the resolution of the normal map is too low compared to the features it depicts. If this is an issue, we can up-sample the normal map, or subdivide texels into 4 ? 4 sub-texels using bicubic Catmull-Rom interpolation. Any other subdivision could be used, but 4 ? 4 naturally matches the control polygon of the bicubic patch. Figure 7 shows the difference between the two options.\n        Integrating a 2D Gaussian over a triangle . Our goal is to compute integrals of the form\n        \n          8\n          I = G c (u, n(u))du = G(u)du.\n        \n        Since we linearly interpolate the normals, n is an affine function on , which allows us to collapse the 4-dimensional combined Gaussian G c into some other 2D Gaussian G. This problem has been studied, and an R package implements one possible solution [PolyCub 2004]. There exist numerical algorithms for evaluating the cumulative distribution function ?(x, y, ?) of a bivariate Gaussian with ? x = ? y = 1 and covariance ? [Genz 2004], which can be adapted to evaluate the desired integral. The PolyCub package also takes a similar approach. We have implemented this method and it works correctly, but appears slower than our method. A related problem for spherical Gaussians has been studied by Xu et al. [2014]. Below we describe the implementation that we found to perform well in our case. is a triangle from our triangulation; due to its construction, we only have right triangles, with two sides aligned to the axes. If is the triangle given by (u 0 , v 0 ), (u 1 , v 0 ) and (u 0 , v 1 ), we obtain an integral\n        \n          9\n          u 1 f (u) I = G(u, v)dv du, u 0 v 0\n        \n        where f (u) achieves a triangular integration domain:\n        \n          10\n          (u 1 ? u)v 1 + (u ? u 0 )v 0 f (u) = . u 1 ? u 0\n        \n        So far, we have just explicitly stated the problem. Eliminating v by carrying out the inner integration, and substituting x for the argument of the resulting erf function, this leads to integrals of the form\n        \n          11\n          x 1 experf(a, b, x 0 , x 1 ) = exp(?a(x ? b) 2 )erf(x)dx x 0\n        \n        for some constants a and b, and shifted bounds x 0 and x 1 . In fact, the same form will result if we center the triangle instead of the Gaussian, or if we transform the problem so the Gaussian is unit, or with any other similar approach. This integral does not have an elementary solution, but we can approximate it as follows. We choose to approximate the function erf(x) on the interval [?3, 3] by a piece-wise quadratic function on six subintervals, and as ?1 and 1 for |x| ? 3. The problem thus separates into integrals of the form\n        \n          12\n          expquad(a, b, c 0 , c 1 , c 2 , x 0 , x 1 ) = x 1 exp(?a(x ? b) 2 )(c 0 + c 1 x + c 2 x 2 )dx, x 0\n        \n        which can be solved analytically using a computer algebra system. The result is long but not fundamentally difficult. Figure 8 illustrates the result of our integration algorithm on a particular normal map patch. Comparison against reference. The correctness of the derivation can be easily checked against the binning method. That is, we use 100 million samples of G p , look-up the normal map, perturb by G r , and store the samples in bins. Figure 9 shows the result. The time-sequence comparison in Figure 1 is also computed using this method. Note the excellent match between the two images, computed using completely different methods. A minor difference comes from the fact that the binning inherently computes bin integrals instead of bin center values like our evaluation. The supplementary data contains several different NDFs compared against the reference, in floating point format. Note that we only provide\n        ACM Transactions on Graphics, Vol. 33, No. 4, Article 116, Publication Date: July 2014\n        Rendering Glints on High-Resolution Normal-Mapped Specular Surfaces\n        ?\n        116:7\n        \n          \n        \n        heightfield patch h(u) normal map n(u) 1/| det J(u)|\n        \n          \n        \n        2 triangles / texel 32 triangles / texel 2 triangles / texel ? = 0.001 ? = 0.001 ? = 0.05\n        \n          Figure 8: Top row: A heightfield h(u) with a Gaussian power spectrum, its normal map n(u) and the 1/| det J(u)| term that specifies the highlight brightness on a perfectly specular surface (with singularities at points where the original heightfield flips curvature). Bottom row: the P-NDF corresponding to the footprint, computed using our approach. Left to right, with roughness 0.001 and two triangles per texel (showing some artifacts), with 32 triangles per texel, and with roughness 0.05 and 2 triangles per texel (no artifacts).\n          \n        \n        our evaluation binning 32 triangles/texel 100 million samples\n        \n          Figure 9: Comparison of the P-NDF evaluated by our approach to the reference P-NDF computed by binning, demonstrating the cor-\n        \n        rectness of our derivations, for a single pixel of the cutlery model. A minor difference comes from the ?anti-aliasing? of the binning method, which naturally computes bin integrals instead of bin center values like our evaluation.\n        single-pixel rather than full-frame reference comparisons, since the latter would be extremely slow to compute using the 100 million samples (see Figure 3 ), and would arguably provide less insight than NDF comparisons.\n      \n      \n        6 Implementation\n        Hierarchical pruning of texels. To increase performance, we limit the Gaussians to be non-zero only within 5? (a reasonable approximation). Therefore, many texels can be pruned, because either G p or G r are zero over the whole texel. We can trivially reject texels that fall outside of G p . For G r we utilize a min-max hierarchy over the normal map. More precisely, for each texel, we precompute the minimum and maximum value of s(u, v) and t(u, v), and build a quad-tree hierarchy over these bounds. For a given query of D(s), we traverse the hierarchy, pruning whole groups of texels where G r  is guaranteed to be beyond 5?. The recursive traversal is similar to many other bounding volume approaches. Importance sampling. Sampling from a P-NDF is easy by definition, using the same technique as was used to create the binning reference: simply take the normal of a random surface point seen through the pixel, and perturb by the intrinsic roughness kernel. Adding other light paths. In our implementation, we separate the glint component of the image (i.e. direct illumination on normalmapped specular surfaces from point lights) from all other light paths, which are computed using path tracing; any other standard algorithm could be used as well. On the first bounce from the camera, we use the full normal map for importance sampling. On further bounces we use a global P-NDF approximation for both sampling and evaluation, since an accurate P-NDF no longer makes a difference here. We could also use a normal map mip-mapping method in that case. A simple extension would be to smoothly transition to a normal map mip-mapping method in the distance, once glinting becomes insignificant. Alternatively, our algorithm can be treated as a new ?black-box? BRDF with an additional pixel footprint specification, while keeping all other parts of a renderer unmodified. However, we prefer to get separate timings, and we wanted to make sure the glint component is completely deterministic, to avoid any confusion about how much noise comes from the true glints vs. the algorithm. For this reason, we also do not use area lights, depth of field, or motion blur in our results, though they would be easy to add.\n      \n      \n        7 Results\n        Our implementation uses the Mitsuba framework [Jakob 2010], and runs on a 6-core Intel i7-4770K desktop at 3.5 GHz, hyperthreaded to 12 threads. Below we describe the scenes shown in Figure 10 . Please see their temporal versions in the attached video. Note how the strong glinting is correct, given the normal map and the lighting; our method is entirely deterministic and does not produce any Monte Carlo noise. Our timings ( Table 2 ) refer to one frame (1280 ? 720). Note how the overhead of our algorithm is smaller than the standard rendering with other light paths. Also note that our performance depends on the number of pixels with glinty materials, and is independent of scene complexity. Snail. This scene illustrates, on the snail?s shell, a smooth heightfield created by inverse FFT from an isotropic Gaussian spectrum with randomized phase, converted to a normal map. The features of the normal map are smaller than a pixel, and yet the result is far from smooth, producing a fairly dramatic glint effect. Metallic paint snail. Metallic paint, often used on cars, is specifically designed to show glints. Composed of several layers, the most important are the top clear-coat (which provides the smooth specular highlight) and the colored absorptive layer with embedded aluminum flakes [Rump et al. 2008]. We model the flakes using a normal map that is constructed by clustering the pixels into Voronoi cells, whose centers are chosen using Poisson disk sampling, and assigning a fixed normal to each cell, drawn from the Beckmann distribution. No normal interpolation is necessary (or desirable) in this case: each texel has a constant normal. No subdivision beyond 2 triangles is required either. We also added a diffuse lobe to approximate multiple internal reflections between the flakes and the clear-coat. The snail is about 10 cm long, making the flakes more visible than on a car. Blender. This scene shows an energy drink blender with a bumpy plastic body and a brushed metal lid. Brushed metal is notoriously difficult to render under sharp lighting; typical compromises in- clude increasing groove size, light size and roughness to unrealistic levels. None of this is necessary with our approach. We generated a normal map using the inverse FFT approach but with an anisotropic Gaussian power spectrum, and added noise to the normals to simulate tiny dents. For the blender body, we used an ellipsoid bump heightfield, which produces glints of different appearance from the snail. Cutlery. This scene shows metallic cutlery with strong scratches from heavy use. A configuration like this, under strong small LED lighting fixtures, is often seen in restaurants. We generated the scratches as randomly oriented, slightly blurred line-shaped valleys. We then added dents through noise, like with brushed metal above. Ocean waves. Finally, we show our method applied to the ocean, with similar but larger features than previous examples. Here we model the ocean as a single rectangle with a normal map generated using the inverse FFT method [Tessendorf 1999]. While good anti-aliased ocean renderings have been possible using LEAN or LEADR methods, we can produce very sharp and correct glints even in the distance, where multiple waves project to a pixel.\n        ACM Transactions on Graphics, Vol. 33, No. 4, Article 116, Publication Date: July 2014\n        116:8\n        ?\n        L.-Q. Yan et al.\n        \n          \n          Figure 10: Still frames from our five scenes: snail (showing a simple isotropic noise normal map), metallic paint snail (modeling metallic flakes embedded in paint), blender (showing brushed metal with dents and plastic with ellipsoid bumps), cutlery (scratched metal with dents) and ocean (temporally varying waves caused by wind). We used simple sRGB in these images, but any tone-mapping could be applied. The full animations are shown in the supplementary video. Normal map contrast was enhanced for visualization purposes.\n        \n        ACM Transactions on Graphics, Vol. 33, No. 4, Article 116, Publication Date: July 2014\n        Rendering Glints on High-Resolution Normal-Mapped Specular Surfaces\n        ?\n        116:9\n        \n          \n            \n              \n                \n                  \n                   Snail\n                   Metallic\n                   Blender\n                   Cutlery\n                   Ocean\n                \n              \n              \n                \n                   Our\n                   2.2\n                   1.0\n                   5.5\n                   6.2\n                   9.9\n                \n                \n                   Global\n                   15.6\n                   19.5\n                   19.0\n                   8.7\n                   -\n                \n                \n                   Envmap\n                   -\n                   -\n                   20.9\n                   6.1\n                   23.5\n                \n              \n              \n                \n                   Total\n                   17.8\n                   20.5\n                   45.4\n                   21.0\n                   33.4\n                \n              \n            \n          \n          Snail Metallic Blender Cutlery Ocean Our 2.2 1.0 5.5 6.2 9.9 Global 15.6 19.5 19.0 8.7 Envmap 20.9 6.1 23.5 Total 17.8 20.5 45.4 21.0 33.4\n          Table 2: Timings of a typical frame in minutes on a 6-core hyperthreaded i7 machine. ?Our? refers to the runtime of our direct illumination algorithm, the rest is the cost of standard path tracing. We split environment lighting into a separate component.\n        \n      \n      \n        8 Conclusion and future work\n        The fundamental relationships between high-resolution specular surfaces, small light sources, complex normal distributions and glints are an important material appearance phenomenon that received minimal attention in previous research. We explained the failure of traditional Monte Carlo approaches at reproducing this effect, and introduced a new deterministic approach for computing the underlying integrals. Our key idea is to shade a surface patch seen through a pixel by evaluating the true normal distribution function of the patch for a single normal, which can be done under Gaussian kernel assumptions. The problem leads to integrals of bivariate Gaussians over triangles, which can be efficiently approximated. We showed complex, temporally varying specular reflections from materials such as bumpy plastics, brushed and scratched metals, metallic paint and ocean waves. In the future, it would be interesting to bring our approach closer to interactivity with further approximations. An extension to displacement maps would be possible. We could also explore related glinty phenomena caused by refraction, seen e.g. in snow, hair, waterfalls, fabrics or plant cellular structures.\n      \n      \n        Acknowledgments\n        Nolan Goodnight provided the video voiceover. The snail model was created by Paul Deyo and the blender by Colin Smith. Some normal map data was provided by Micah Johnson and Ted Adelson. Funding for this work was provided by NSF grant 1011832 (Beyond Flat Images) and the Intel Science and Technology Center for Visual Computing. We acknowledge equipment and support from NVIDIA, Nokia and Samsung.\n      \n      \n        References\n        \n          B URLEY , B. 2012. Physically-based shading at Disney.\n        \n      \n      \n        Technical\n      \n      \n        Report.\n        C OOK , R. L., C ARPENTER , L., AND C ATMULL , E. 1987. The REYES image rendering architecture. SIGGRAPH ?87, 95?102. D UPUY , J., H EITZ , E., I EHL , J.-C., P OULIN , P., N EYRET , F., AND O STROMOUKHOV , V. 2013. Linear Efficient Antialiased Displacement and Reflectance Mapping. ACM Trans. Graph. 32, 6. G ENZ , A. 2004. Numerical computation of rectangular bivariate and trivariate normal and t probabilities. Statistics and Computing 14, 3, 251?260. H AN , C., S UN , B., R AMAMOORTHI , R., AND G RINSPUN , E. 2007. Frequency domain normal map filtering. ACM Trans. Graph. 26, 3, 28:1?28:12. I GEHY , H. 1999. Tracing ray differentials. SIGGRAPH ?99, 179? 186. J AKOB , W., AND M ARSCHNER , S. 2012. Manifold exploration: A markov chain monte carlo technique for rendering scenes with difficult specular transport. ACM Trans. Graph. 31, 4, 58:1? 58:13. J AKOB , W., H A SAN , M., Y AN , L.-Q., L AWRENCE , J., R A MAMOORTHI , R., AND M ARSCHNER , S. 2014. Discrete stochastic microfacet models. ACM Trans. Graph. 33, 4. J AKOB , W., 2010. Mitsuba renderer. http://www.mitsuba renderer.org. M ITCHELL , D., AND H ANRAHAN , P. 1992. Illumination from curved reflectors. SIGGRAPH Comput. Graph. 26, 2, 283?291. M OON , J. T., W ALTER , B., AND M ARSCHNER , S. R. 2007. Rendering discrete random media using precomputed scattering solutions. EGSR 07, 231?242. O LANO , M., AND B AKER , D. 2010. Lean mapping. ACM, I3D ?10, 181?188. P OLY C UB , 2004. Polycub: Cubature over polygonal domains. http://cran.r-project.org/web/packages/ polyCub/. Accessed: 2014-01-14. R UMP , M., M ULLER  ? , G., S ARLETTE , R., K OCH , D., AND K LEIN , R. 2008. Photo-realistic rendering of metallic car paint from image-based measurements. Computer Graphics Forum 27, 2, 527?536. T ESSENDORF , J. 1999. Simulating ocean water. Technical Report. T OKSVIG , M. 2005. Mipmapping normal maps. Journal of Graphics Tools 10, 3, 65?71. V EACH , E. 1997. Robust Monte Carlo Methods for Light Transport Simulation. PhD thesis, Stanford University. W ALTER , B., M ARSCHNER , S. R., L I , H., AND T ORRANCE , K. E. 2007. Microfacet models for refraction through rough surfaces. EGSR 07, 195?206. W ALTER , B., Z HAO , S., H OLZSCHUCH , N., AND B ALA , K. 2009. Single scattering in refractive media with triangle mesh boundaries. ACM Trans. Graph. 28, 3, 92:1?92:8. X U , K., C AO , Y.-P., M A , L.-Q., D ONG , Z., W ANG , R., AND H U , S.-M. 2014. A practical algorithm for rendering interreflections with all-frequency brdfs. ACM Trans. Graph. 33, 1, 10:1?10:16.\n        ACM Transactions on Graphics, Vol. 33, No. 4, Article 116, Publication Date: July 2014\n      \n    \n  ",
  "resources" : [ ]
}