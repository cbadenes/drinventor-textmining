{
  "uri" : "sig2007-a17-todo_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2007/a17-todo_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Locally Controllable Stylized Shading",
    "published" : "2007",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Hideki-Todo",
      "name" : "Hideki",
      "surname" : "Todo"
    }, {
      "uri" : "http://drinventor/Ken-ichi Anjyo",
      "name" : "Ken",
      "surname" : "ichi Anjyo"
    }, {
      "uri" : "http://drinventor/William V. Baxter-III",
      "name" : "William V. Baxter",
      "surname" : "III"
    }, {
      "uri" : "http://drinventor/Takeo-Igarashi",
      "name" : "Takeo",
      "surname" : "Igarashi"
    } ]
  },
  "bagOfWords" : [ "cr", "category", "i.", "3.3", "-lsb-", "Computer", "Graphics", "-rsb-", "picture/image", "generation?display", "algorithm", "i.", "3.6", "-lsb-", "Computer", "Graphics", "-rsb-", "methodology", "techniques?interaction", "technique", "i.", "3.7", "-lsb-", "Computer", "Graphics", "-rsb-", "animation", "keyword", "non-photorealistic", "rendering", "stylized", "shading", "direct", "manipulation", "we", "consider", "problem", "how", "provide", "user", "intuitive", "fine-grained", "control", "over", "stylized", "light", "shade", "3d", "object", "over", "past", "decade", "variety", "non-photorealistic", "rendering", "technique", "have", "be", "develop", "facilitate", "visual", "interpretation", "3d", "object", "multi-scale", "shading", "method", "-lsb-", "Rusinkiewicz", "et", "al.", "2006", "-rsb-", "make", "detailed", "3d", "shape", "depiction", "all", "frequency", "possible", "example", "canonical", "cartoon", "shader", "use", "routinely", "3d", "animation", "often", "create", "undesirable", "shaded", "area", "despite", "crucial", "importance", "fine-grained", "artistic", "control", "stylized", "light", "shade", "very", "little", "research", "exist", "how", "provide", "control", "suitable", "interactive", "technique", "support", "begin", "make", "initial", "3d", "scene", "which", "include", "lighting", "animation", "setting", "use", "conventional", "3d", "software", "tool", "process", "perform", "interactive", "rate", "prescribe", "boundary", "constraint", "obtain", "area", "avoid", "need", "manipulate", "light", "vector", "normal", "can", "efficiently", "implement", "use", "scalar-valued", "radial", "basis", "function", "-lrb-", "-lsb-", "Wahba", "1990", "-rsb-", "-rrb-", "number", "npr", "technique", "those", "-lsb-", "Gooch", "Gooch", "2001", "-rsb-", "have", "be", "develop", "emulate", "various", "stylistic", "appearance", "Lit-Sphere", "method", "Sloan", "et", "al.", "-lsb-", "2001", "-rsb-", "can", "describe", "view-independent", "tone", "detail", "use", "paint", "spherical", "environment", "map", "multi-scale", "shading", "technique", "Rusinkiewicz", "et", "al.", "-lsb-", "2006", "-rsb-", "can", "also", "control", "appearance", "shape", "detail", "tuning", "parameter", "lighting", "model", "Barla", "et", "al.", "-lsb-", "2006", "-rsb-", "propose", "extension", "traditional", "cartoon", "shader", "which", "can", "control", "view-dependent", "tone", "detail", "include", "effect", "aerial", "perspective", "depth", "field", "design", "issue", "photorealistic", "lighting", "find", "light", "placement", "result", "user-specified", "highlight", "shadow", "scene", "-lrb-", "see", "-lsb-", "Lee", "et", "al.", "2006", "-rsb-", "more", "detailed", "discussion", "-rrb-", "Okabe", "et", "al.", "-lsb-", "2006", "-rsb-", "Akers", "et", "al.", "-lsb-", "2003", "-rsb-", "take", "other", "approach", "modify", "lighting", "provide", "intuitive", "painting", "method", "modify", "illumination", "3d", "model", "particular", "we", "describe", "how", "use", "paint-brush", "metaphor", "design", "shaded", "area", "keyframe", "editing", "straightforward", "we", "technique", "while", "would", "very", "time-consuming", "difficult", "manage", "use", "conventional", "lighting", "intensity", "distribution", "scalar", "function", "so", "greatly", "simplify", "problem", "when", "compare", "work", "directly", "light", "vector", "normal", "other", "hand", "make", "offset", "function", "active", "only", "neighborhood", "we", "wish", "have", "area", "which", "include", "limit", "extent", "domain", "where", "modification", "lighting", "apply", "-lrb-", "see", "Figure", "-rrb-", "above", "procedure", "can", "repeat", "each", "stroke", "building", "upon", "offset", "function", "create", "previous", "stroke", "make", "above", "strategy", "computationally", "tractable", "interactive", "rate", "we", "represent", "offset", "function", "-lrb-", "-rrb-", "sum", "Radial", "Basis", "function", "-lrb-", "rbf", "-rrb-", "denote", "-lrb-", "-rrb-", "place", "boundary", "constraint", "-lrb-", "-rrb-", "only", "discretely", "enforce", "finite", "number", "point", "after", "obtain", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "we", "want", "find", "+1", "-lrb-", "-rrb-", "which", "satisfy", "boundary", "condition", "-lrb-", "-rrb-", "finite", "number", "discrete", "point", "each", "intersect", "edge", "linear", "interpolation", "between", "vertex", "other", "end", "use", "determine", "approximate", "location", "boundary", "point", "where", "radial", "basis", "function", "weight", "polynomial", "whose", "degree", "depend", "upon", "choice", "satisfy", "discretize", "version", "-lrb-", "-rrb-", "reduce", "solve", "linear", "system", "equation", "unknown", "weight", "-lcb-", "-rcb-", "four", "coefficient", "linear", "polynomial", "use", "smoothing", "brush", "make", "smoother", "show", "-lrb-", "-rrb-", "continuous", "tone", "control", "threshold", "-lrb-", "-rrb-", "global", "constant", "which", "control", "shaded", "area", "accordance", "-lrb-", "-rrb-", "essential", "assumption", "we", "GPU", "implementation", "each", "vertex", "position", "surface", "mesh", "offset", "function", "value", "-lrb-", "-rrb-", "assign", "store", "vertex", "color", "datum", "maya", "transfer", "from", "maya", "GPU", "vary", "parameter" ],
  "content" : "CR Categories: I.3.3 [Computer Graphics]: Picture/Image Generation?Display Algorithms; I.3.6 [Computer Graphics]: Methodology and Techniques?Interaction Techniques; I.3.7 [Computer Graphics]: Animation Keywords: non-photorealistic rendering, stylized shading, direct manipulation We consider the problem of how to provide users with intuitive, fine-grained control over stylized light and shade on a 3D object. Over the past decade, a variety of non-photorealistic rendering techniques have been developed to facilitate visual interpretation of 3D objects. The multi-scale shading method by [Rusinkiewicz et al. 2006] makes detailed 3D shape depiction at all frequencies possible. For example, the canonical cartoon shader used routinely in 3D animation often creates undesirable shaded areas. Despite the crucial importance of such fine-grained artistic control of stylized light and shade, very little research exists on how to provide such control or suitable interactive techniques to support it. Begin by making an initial 3D scene, which includes the lighting and animation settings, using a conventional 3D software tool. This process is performed at interactive rates, prescribing the boundary constraint of the obtained area. This avoids the need to manipulate light vectors and normals and can be efficiently implemented using scalar-valued radial basis functions ([Wahba 1990]). A number of NPR techniques, such as those in [Gooch and Gooch 2001], have been developed to emulate various stylistic appearances. The Lit-Sphere method by Sloan et al.[2001] can describe view-independent tone detail, using a painted spherical environment map. The multi-scale shading technique by Rusinkiewicz et al.[2006] can also control the appearance of shape detail by tuning parameters of the lighting model. Barla et al.[2006] proposed an extension of the traditional cartoon shader, which can control view-dependent tone detail, including such effects as aerial perspective and depth of field. The design issue in photorealistic lighting is to find the light placement that results in the user-specified highlights and shadows in the scene (see [Lee et al. 2006] for more detailed discussion). Okabe et al.[2006] and Akers et al.[2003] take other approaches to modifying lighting, providing an intuitive painting method for modifying the illumination of 3D models. In particular, we describe how to use a paint-brush metaphor to design the shaded area at keyframes. Such editing is straightforward with our technique, while it would be very time-consuming and difficult to manage using conventional lighting. The intensity distribution is a scalar function, so this greatly simplifies the problem when compared to working directly with light vectors and normals. On the other hand, to make the offset function ?active? only in the neighborhood of C 0 , we wish to have an area D 0 , which includes C 0 , that limits the extent of the domain where modifications to the lighting are applied (see Figure 2 ). The above procedure can be repeated for each stroke, building upon the offset function created by the previous stroke. To make the above strategy computationally tractable at interactive rates, we represent the offset function o k (p) with a sum of Radial Basis Functions (RBF), denoted by o ? k (p). in place of B k , and the boundary constraint (5) is only discretely enforced at a finite number of points. After obtaining o ? k (p) and B k in (6), we want to find o ? k+1 (p), which satisfies the boundary conditions (5) at a finite number of discrete points. For each intersecting edge, linear interpolation between p m and the vertex at the other end, p n , is used to determine the approximate location of the boundary point x i . where ? is a radial basis function, i are weights, and P is a polynomial whose degree depends upon the choice of ? . Satisfying a discretized version of (5) reduces to solving a linear system of equations for the unknown weights {w i }, and the four coefficients of the linear polynomial P on 3 . Using the smoothing brush, it is made smoother, as shown in (d). Continuous tone control: The threshold d 0 in (1) is a global constant which controls the shaded area in accordance with (6), but this is not an essential assumption. In our GPU implementation, for each vertex i with position v i on surface meshes, the offset function value o k (v i ) is assigned and stored as a vertex color data in Maya, and is transferred from Maya to GPU as a varying parameter.",
  "resources" : [ ]
}