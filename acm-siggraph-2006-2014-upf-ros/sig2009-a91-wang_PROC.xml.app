{
  "uri" : "sig2009-a91-wang_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2009/a91-wang_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "An Efficient GPU-based Approach for Interactive Global Illumination",
    "published" : "2009",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Rui Wang-null",
      "name" : "Rui Wang",
      "surname" : null
    }, {
      "uri" : "http://drinventor/Rui Wang-null",
      "name" : "Rui Wang",
      "surname" : null
    }, {
      "uri" : "http://drinventor/Kun-Zhou",
      "name" : "Kun",
      "surname" : "Zhou"
    }, {
      "uri" : "http://drinventor/Minghao-Pan",
      "name" : "Minghao",
      "surname" : "Pan"
    }, {
      "uri" : "http://drinventor/Hujun-Bao",
      "name" : "Hujun",
      "surname" : "Bao"
    } ]
  },
  "bagOfWords" : [ "paper", "present", "gpu-based", "method", "interactive", "global", "illumination", "integrate", "complex", "effect", "multi-bounce", "indirect", "lighting", "glossy", "reflection", "caustic", "arbitrary", "specular", "path", "we", "method", "build", "upon", "scatter", "datum", "sampling", "interpolation", "GPU", "we", "raytraced", "shade", "point", "partition", "they", "coherent", "shade", "cluster", "use", "adaptive", "seeding", "follow", "k-means", "each", "cluster", "center", "we", "apply", "final", "gather", "evaluate", "its", "incident", "irradiance", "use", "gpu-based", "photon", "mapping", "we", "approximate", "entire", "photon", "tree", "compact", "illumination", "cut", "thus", "reduce", "final", "gather", "cost", "each", "ray", "we", "method", "exploit", "spatial", "coherence", "illumination", "reduce", "sampling", "cost", "we", "sample", "sparsely", "distribution", "sample", "point", "conform", "underlie", "illumination", "change", "therefore", "we", "method", "both", "fast", "preserve", "high", "render", "quality", "contrast", "we", "select", "sample", "point", "adaptively", "single", "pass", "enable", "parallel", "computation", "keyword", "global", "illumination", "GPU", "photon", "mapping", "final", "gather", "k-means", "illumination", "cut", "however", "conventional", "cpu-based", "algorithm", "simulation", "cost", "effect", "often", "too", "high", "permit", "dynamic", "interaction", "where", "user", "can", "simultaneously", "change", "lighting", "viewpoint", "material", "geometry", "expect", "accurate", "real-time", "feedback", "change", "rapidly", "increase", "computation", "power", "modern", "gpus", "much", "attention", "have", "be", "direct", "exploit", "GPU", "achieve", "interactive", "global", "illumination", "instance", "gpu-based", "ambient", "occlusion", "-lsb-", "Shanmugam", "Arikan", "bution", "point", "conform", "actual", "irradiance", "change", "next", "each", "cluster", "center", "we", "perform", "final", "gather", "sample", "its", "incident", "radiance", "field", "due", "indirect", "lighting", "step", "use", "fast", "gpu-based", "photon", "mapping", "algorithm", "-lsb-", "Zhou", "et", "al.", "2008", "-rsb-", "accelerate", "density", "estimation", "final", "gather", "we", "approximate", "entire", "photon", "tree", "compact", "illumination", "cut", "compute", "dynamically", "GPU", "we", "interpolate", "sample", "irradiance", "value", "each", "shade", "point", "produce", "final", "render", "result", "select", "irradiance", "sample", "point", "adaptively", "single", "pass", "we", "eliminate", "sequential", "computation", "require", "standard", "caching", "base", "method", "Figure", "show", "example", "we", "gpu-based", "solution", "can", "easily", "adapt", "other", "many-core", "platform", "intel?s", "upcome", "Larrabee", "-lsb-", "Seiler", "et", "al.", "2008", "-rsb-", "today?s", "chip", "design", "quickly", "switch", "streaming", "massively", "parallel", "processor", "model", "we", "believe", "essential", "develop", "new", "algorithm", "exploit", "architecture", "achieve", "interactive", "global", "illumination", "approach", "drastically", "reduce", "computation", "cost", "limit", "small", "number", "vpl", "only", "suitable", "primarily", "diffuse", "material", "complex", "scene", "large", "number", "photon", "need", "lead", "high", "computation", "cost", "recently", "-lsb-", "Walter", "et", "al.", "2005", "-rsb-", "present", "LightCuts", "scalable", "method", "compute", "illumination", "from", "large", "number", "point", "light", "sublinear", "cost", "caching", "interpolation", "since", "global", "illumination", "involve", "compute", "many", "ray", "common", "exploit", "coherence", "among", "ray", "reduce", "radiance", "sampling", "cost", "especially", "true", "indirect", "illumination", "which", "change", "smoothly", "make", "good", "candidate", "sparse", "sampling", "make", "they", "unsuitable", "gpu?s", "data-parallel", "computation", "model", "exploit", "temporal", "coherence", "render", "take", "long", "time", "converge", "however", "incorporate", "general", "illumination", "effect", "remain", "unsolved", "framework", "incorporate", "area", "environment", "lighting", "possible", "would", "require", "efficient", "method", "compute", "shadowed", "direct", "illumination", "from", "they", "therefore", "follow", "we", "focus", "discuss", "computation", "indirect", "illumination", "we", "goal", "reduce", "spatial", "sampling", "cost", "evaluate", "incident", "radiance", "only", "small", "number", "shade", "point", "even", "spatial", "caching", "density", "estimation", "each", "secondary", "ray", "still", "quite", "expensive", "due", "large", "number", "photon", "store", "kd-tree", "use", "algorithm", "Zhou", "et", "al.", "achieve", "real-time", "performance", "direct", "lighting", "caustic", "shade", "point", "collection", "non-specular", "hit", "point", "step", "-rrb-", "above", "define", "we", "shade", "point", "represent", "all", "point", "either", "directly", "visible", "visible", "after", "specular", "path", "photon", "store", "global", "photon", "map", "its", "immediate", "previous", "hit", "non-specular", "surface", "otherwise", "we", "store", "caustic", "photon", "map", "we", "solution", "find", "error", "metric", "can", "reliably", "predict", "actual", "irradiance", "change", "base", "scene?s", "geometric", "information", "because", "evaluate", "require", "final", "gathering", "which", "what", "we", "would", "like", "avoid", "computing", "stage", "we", "initialize", "average", "position", "normal", "each", "node", "main", "bottleneck", "find", "nearest", "cluster", "center", "every", "shading", "point", "which", "incur", "computation", "cost", "linear", "use", "brute-force", "approach", "reduce", "artifact", "we", "attempt", "preserve", "temporal", "coherence", "among", "sample", "point", "other", "hand", "we", "create", "new", "cluster", "all", "shade", "point", "can", "classify", "reduce", "cost", "we", "goal", "use", "smaller", "set", "sample", "approximate", "illumination", "represent", "large", "number", "photon", "do", "delete", "node", "whose", "child", "already", "cut", "add", "node", "cover", "leaf", "node", "do", "have", "parent", "represent", "they", "cut", "base", "heuristic", "initial", "illumination", "cut", "should", "close", "its", "target", "size", "which", "approximately", "4k", "8k", "we", "believe", "because", "algorithm", "unsuitable", "GPU", "rather", "because", "fundamental", "challenge", "parallelize", "exist", "sequential", "algorithm", "acknowledgement", "we", "would", "like", "thank", "SIGGRAPH", "reviewer", "thoughtful", "comment", "author", "would", "like", "thank", "NVIDIA", "generous", "donation" ],
  "content" : "This paper presents a GPU-based method for interactive global illumination that integrates complex effects such as multi-bounce indirect lighting, glossy reflections, caustics, and arbitrary specular paths. Our method builds upon scattered data sampling and interpolation on the GPU. We start with raytraced shading points and partition them into coherent shading clusters using adaptive seeding followed by k-means. At each cluster center we apply final gather to evaluate its incident irradiance using GPU-based photon mapping. We approximate the entire photon tree as a compact illumination cut, thus reducing the final gather cost for each ray. Our method exploits the spatial coherence of illumination to reduce sampling cost. We sample sparsely and the distribution of sample points conforms with the underlying illumination changes. Therefore our method is both fast and preserves high rendering quality. In contrast, we select sample points adaptively in a single pass, enabling parallel computation. Keywords: global illumination, GPU, photon mapping, final gather, k-means, illumination cut. However, with conventional CPU-based algorithms the simulation costs of such effects are often too high to permit dynamic interactions, where the user can simultaneously change the lighting, viewpoint, materials, and geometry, and expect accurate real-time feedbacks of such changes. With the rapidly increasing computation power of modern GPUs, much attention has been directed to exploiting the GPU to achieve interactive global illumination. For instance, GPU-based ambient occlusion [Shanmugam and Arikan bution of these points conforms with the actual irradiance changes. Next, at each cluster center, we perform final gather to sample its incident radiance field due to indirect lighting. This step uses a fast GPU-based photon mapping algorithm [Zhou et al. 2008]. To accelerate the density estimation in final gather, we approximate the entire photon tree as a compact illumination cut that is computed dynamically on the GPU. We then interpolate the sampled irradiance values at each shading point to produce the final rendering result. By selecting irradiance sample points adaptively in a single pass, we eliminate the sequential computation required by standard caching based methods. Figure 1 shows an example. Our GPU-based solution can be easily adapted to other many-core platforms such as Intel?s upcoming Larrabee [Seiler et al. 2008]. As today?s chip design is quickly switching to streaming and massively parallel processor models, we believe that it is essential to develop new algorithms that exploit such architecture to achieve interactive global illumination. This approach drastically reduces the computation cost, but is limited to a small number of VPLs and is only suitable for primarily diffuse materials. For complex scenes, a large number of photons are needed, leading to high computation cost. Recently, [Walter et al. 2005] presented LightCuts ? a scalable method that computes illumination from a large number of point lights at sublinear cost. Caching and Interpolation Since global illumination involves computing many rays, it is common to exploit the coherence among rays to reduce radiance sampling cost. This is especially true for indirect illumination, which changes smoothly and makes a good candidate for sparse sampling. This makes them unsuitable for the GPU?s data-parallel computation model. It  exploits temporal coherence but the rendering takes a long time to converge. However, incorporating general illumination effects remains unsolved in their framework. Incorporating area or environment lighting is possible but would require efficient methods to compute shadowed direct illumination from them. Therefore in the following we focus on discussing the computation of indirect illumination. Our goal is to reduce spatial sampling cost by evaluating incident radiance only at a small number of shading points. Even with spatial caching, the density estimation for each secondary ray is still quite expensive, due to the large number of photons stored in the kd-tree. Using this algorithm, Zhou et al. achieved real-time performance for direct lighting and caustics. Shading Points The collection of non-specular hit points in step 5) above defines our shading points: they represent all the points that are either directly visible, or are visible after specular paths. A photon is stored in the global photon map if its immediate previous hit is on a non-specular surface, otherwise we store it in the caustics photon map. Our solution is to find an error metric that can reliably predict the actual irradiance changes based on the scene?s geometric information. This is because evaluating R k requires final gathering, which is what we would like to avoid computing at this stage. We initialize x k and n k to be the average position and normal at each node q. The main bottleneck is in finding the nearest cluster center for every shading point, which incurs a computation cost linear to K using the brute-force approach. To reduce such artifacts, we attempt to preserve the temporal coherence among sample points. On the other hand, we create new clusters for all shading points that cannot be classified. To reduce this cost, our goal is to use a smaller set of samples to approximate the illumination represented by the large number of photons. This is done by deleting nodes whose children are already in the cut, and adding nodes to cover leaf nodes that do not have parents representing them in the cut. This is based on the heuristic that the initial illumination cut should be close to its target size, which is approximately 4K?8K. We believe they are not because such algorithms are unsuitable for the GPU, but rather because these are fundamental challenges in parallelizing existing sequential algorithms. Acknowledgements We would like to thank the SIGGRAPH reviewers for their thoughtful comments. The authors would like to thank NVIDIA for their generous donations.",
  "resources" : [ ]
}