{
  "uri" : "sig2014-a116-yan_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2014/a116-yan_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Rendering Glints on High-Resolution Normal-Mapped Specular Surfaces",
    "published" : "2014",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Ling-Qi-Yan",
      "name" : "Ling-Qi",
      "surname" : "Yan"
    }, {
      "uri" : "http://drinventor/Milo\\v{s}-Ha\\v{s}an",
      "name" : "Milo\\v{s}",
      "surname" : "Ha\\v{s}an"
    }, {
      "uri" : "http://drinventor/Wenzel-Jakob",
      "name" : "Wenzel",
      "surname" : "Jakob"
    }, {
      "uri" : "http://drinventor/Jason-Lawrence",
      "name" : "Jason",
      "surname" : "Lawrence"
    }, {
      "uri" : "http://drinventor/Steve-Marschner",
      "name" : "Steve",
      "surname" : "Marschner"
    }, {
      "uri" : "http://drinventor/Ravi-Ramamoorthi",
      "name" : "Ravi",
      "surname" : "Ramamoorthi"
    } ]
  },
  "bagOfWords" : [ "Standard", "uniform", "pixel", "sampling", "technique", "direct", "illumination", "have", "extremely", "large", "variance", "use", "they", "purpose", "impractical", "reason", "most", "energy", "concentrate", "tiny", "highlight", "take", "up", "minuscule", "fraction", "pixel", "uniform", "pixel", "sampling", "ineffective", "hit", "highlight", "-lrb-", "figure", "-rrb-", "normal", "map", "filter", "technique", "-lsb-", "Toksvig", "2005", "Han", "et", "al.", "2007", "Olano", "Baker", "2010", "Dupuy", "et", "al.", "2013", "-rsb-", "also", "do", "fully", "solve", "problem", "p-ndf", "can", "easily", "estimate", "binning", "repeatedly", "choose", "point", "patch", "take", "its", "normal", "perturb", "intrinsic", "surface", "roughness", "add", "bin", "we", "method", "p-ndf", "just", "mathematical", "tool", "derive", "what", "correct", "pixel", "brightness", "should", "never", "fully", "construct", "only", "evaluate", "single", "vector", "we", "introduce", "algorithm", "p-ndf", "evaluation", "section", "basic", "computational", "block", "we", "solution", "integral", "2-dimensional", "gaussian", "over", "triangular", "domain", "describe", "section", "we", "hierarchically", "prune", "positionnormal", "space", "quickly", "find", "texel", "might", "contribute", "give", "p-ndf", "evaluation", "-lrb-", "section", "-rrb-", "we", "result", "show", "complex", "temporally", "vary", "glint", "from", "bumpy", "plastic", "brush", "scratch", "metal", "metallic", "paint", "ocean", "wave", "see", "section", "Figure", "10", "specifically", "constant", "view", "light", "direction", "over", "approximation", "make", "when", "solve", "integral", "section", "naive", "pixel", "sampling", "multiple", "importance", "sampling", "-lsb-", "Veach", "1997", "-rsb-", "do", "help", "because", "pixel", "integral", "inefficiently", "sample", "rather", "than", "brdf/light", "combination", "REYES", "approach", "surface", "subdivision", "micropolygon", "-lsb-", "cook", "et", "al.", "1987", "-rsb-", "equally", "inefficient", "since", "would", "require", "micropolygon", "small", "highlight", "though", "we", "use", "fine", "triangulation", "normal", "map", "smoothness", "we", "method", "can", "handle", "highlight", "arbitrarily", "smaller", "than", "triangle", "approximate", "they", "broad", "lobe", "only", "applicable", "under", "low-frequency", "illumination", "would", "filter", "complex", "feature", "anyway", "Figure", "show", "effect", "replace", "true", "ndf", "single", "gaussian", "mixture", "Gaussians", "thus", "lose", "sharp", "feature", "single-point", "evaluation", "caustic", "Walter", "et", "al.", "-lsb-", "2009", "-rsb-", "compute", "volumetric", "caustic", "due", "refraction", "point", "light", "scattering", "volume", "through", "bumpy", "interface", "however", "intrinsic", "roughness", "consider", "-lrb-", "result", "singularity", "-rrb-", "phenomenon", "render", "quite", "different", "use", "wavefront", "trace", "way", "compute", "contribution", "valid", "specular", "path", "again", "we", "method", "-lrb-", "17", "min", "2.2", "min", "actual", "glint", "-rrb-", "naive", "sampling", "-lrb-", "hour", "4,096", "sample", "-rrb-", "correct", "ndf", "isotropic", "gaussian", "-lrb-", "we", "approach", "-rrb-", "-lsb-", "Toksvig", "2005", "-rsb-", "perfectly", "specular", "case", "discrete", "set", "-lrb-", "rather", "than", "manifold", "-rrb-", "valid", "path", "already", "note", "above", "stochastic", "reflectance", "key", "method", "count", "up", "particle", "contribute", "particular", "illumination", "calculation", "without", "actually", "generate", "they", "provide", "efficiency", "large", "query", "area", "where", "many", "particle", "contribute", "when", "use", "model", "bumpy", "smooth", "surface", "stochastic", "approach", "phenomenological", "random-flake", "approximation", "replace", "p-ndf", "contrast", "we", "algorithm", "exactly", "determine", "how", "give", "specular", "surface", "define", "particular", "normal", "map", "really", "look", "under", "give", "sharp", "illumination", "solve", "we", "problem", "require", "think", "about", "surface", "patch", "see", "through", "pixel", "all", "once", "rather", "than", "one", "point", "time", "just", "every", "surface", "point", "have", "local", "brdf", "we", "can", "think", "area", "surface", "have", "p-brdf", "describe", "how", "total", "contribution", "pixel", "depend", "illumination", "render", "detailed", "normal", "map", "require", "efficient", "way", "evaluate", "area-integrated", "pbrdf", "rather", "than", "let", "pixel", "filter", "do", "implicitly", "point", "sampling", "we", "call", "distribution", "p-ndf", "just", "like", "microfacet", "distribution", "standard", "brdf", "model", "give", "normal", "distribution", "particular", "area", "rather", "than", "global", "average", "over", "whole", "surface", "crucial", "observation", "p-ndf", "simple", "broad", "function", "contain", "surprising", "amount", "structure", "-lrb-", "figure", "-rrb-", "even", "when", "surface", "patch", "far", "larger", "than", "feature", "normal", "map", "also", "vary", "dramatically", "across", "surface", "evaluate", "p-ndf", "efficiently", "while", "preserve", "detailed", "spatio-angular", "structure", "key", "accurately", "capture", "glinty", "appearance", "let", "we", "define", "term", "more", "precisely", "Pixel", "footprint", "we", "assume", "gaussian", "pixel", "reconstruction", "filter", "practice", "we", "actually", "subdivide", "pixel", "subpixel", "make", "footprint", "smaller", "accordingly", "project", "hemisphere", "let", "we", "also", "define", "extended", "unit", "disk", "union", "unit", "disk", "special", "symbol", "which", "allow", "normal", "distribution", "sometimes", "return", "invalid", "normal", "less", "common", "than", "work", "hemisphere", "useful", "shortly", "normal", "map", "can", "give", "directly", "derivative", "heightfield", "we", "use", "direct", "option", "though", "all", "one", "normal", "map", "we", "example", "do", "come", "from", "heightfield", "-lrb-", "exception", "metallic", "paint", "flake", "-rrb-", "intrinsic", "roughness", "we", "could", "treat", "surface", "perfectly", "specular", "however", "we", "find", "useful", "consider", "small", "amount", "unresolved", "fine", "roughness", "also", "prevent", "singularity", "-lrb-", "infinitely", "bright", "highlight", "-rrb-", "which", "arise", "perfectly", "specular", "surface", "when", "det", "-lrb-", "-rrb-", "cleanly", "deal", "normal", "map", "contain", "piece-wise", "constant", "region", "-lrb-", "associate", "random", "event", "simply", "choice", "normal", "-rrb-", "definition", "slightly", "deviate", "from", "standard", "reference", "-lsb-", "Walter", "et", "al.", "2007", "-rsb-", "-lsb-", "Burley", "2012", "-rsb-", "fully", "compatible", "they", "actually", "more", "convenient", "hemispherical", "term", "ndf", "like", "Beckmann", "GGX", "require", "additional", "cosine", "term", "integrate", "associate", "sampling", "routine", "also", "bake", "cosine", "-lrb-", "see", "eq", "-lrb-", "-rrb-", "-lrb-", "28", "-rrb-", "Walter", "et", "al.", "-lsb-", "2007", "-rsb-", "-rrb-", "we", "formulation", "cosine", "need", "worry", "about", "particular", "Gaussians", "perfectly", "good", "ndf", "include", "anisotropic", "non-centered", "one", "last", "step", "can", "sometimes", "result", "normal", "outside", "unit", "disk", "event", "collect", "probability", "often", "near", "zero", "practice", "Figure", "show", "different", "p-ndf", "size", "pixel", "footprint", "increase", "note", "quite", "large", "footprint", "size", "require", "ndf", "mimic", "analytic", "normal", "distribution", "like", "Beckmann", "we", "core", "challenge", "find", "evaluation", "algorithm", "pndf", "-lrb-", "-rrb-", "half-vector", "correspond", "give", "footprint", "give", "normal", "map", "give", "intrinsic", "roughness", "indeed", "algorithm", "hand", "straightforward", "plug", "pndf", "standard", "microfacet", "brdf", "which", "can", "use", "direct", "illumination", "calculation", "follow", "section", "we", "first", "make", "p-ndf", "evaluation", "problem", "more", "approachable", "analyze", "situation", "flatland", "present", "full", "3d", "solution", "which", "naturally", "follow", "from", "flatland", "case", "flatland", "situation", "simpler", "only", "one", "texture", "parameter", "normal", "map", "can", "write", "function", "-lrb-", "-rrb-", "return", "normal", "-lrb-", "-rrb-", "which", "analogous", "unit", "disk", "from", "3d", "case", "full", "normal", "vector", "-lrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-rrb-", "pixel", "footprint", "turn", "gaussian", "reconstruction", "kernel", "-lrb-", "-rrb-", "integrate", "let", "random", "variable", "distribute", "accord", "-lrb-", "-rrb-", "key", "question", "what", "distribution", "random", "variable", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "situation", "illustrate", "Figure", "where", "root", "equation", "-lrb-", "-rrb-", "delta", "function", "restrict", "integral", "point", "where", "-lrb-", "-rrb-", "second", "equation", "intuitively", "account", "speed", "cross", "root", "only", "work", "finite", "set", "root", "exist", "we", "can", "see", "p-ndf", "have", "singularity", "point", "where", "-lrb-", "-rrb-", "correspond", "inflection", "point", "original", "heightfield", "analysis", "show", "p-ndf", "can", "have", "infinite", "value", "-lrb-", "we", "distant", "light/camera", "approximation", "culprit", "infinity", "could", "occur", "even", "we", "do", "make", "approximation", "-rrb-", "furthermore", "could", "constant", "region", "normal", "map", "so", "we", "get", "-lrb-", "-rrb-", "whole", "interval", "corresponding", "delta", "function", "p-ndf", "avoid", "singularity", "other", "problem", "inherent", "perfect", "specular", "surface", "we", "introduce", "tiny", "amount", "finite", "roughness", "normal-mapped", "surface", "since", "p-ndf", "just", "function", "interval", "-lrb-", "-rrb-", "we", "can", "convolve", "gaussian", "-lrb-", "-rrb-", "easily", "last", "step", "we", "combine", "two", "1d", "gaussian", "single", "2d", "one", "note", "though", "measure", "standard", "line", "measure", "axis", "arc", "length", "along", "graph", "Figure", "-lrb-", "-rrb-", "illustrate", "intuition", "immediately", "lead", "accelerate", "query", "idea", "we", "can", "use", "hierarchy", "prune", "all", "normal", "map", "segment", "area", "where", "-lsb-", "-rsb-", "effectively", "zero", "show", "benefit", "choose", "gaussian", "filter", "other", "choice", "spline", "would", "lead", "integration", "problem", "without", "closedform", "solution", "also", "note", "we", "make", "graph", "piecewise-linear", "instead", "full", "integrand", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "latter", "would", "bad", "choice", "since", "3d", "analysis", "we", "can", "extend", "above", "line", "think", "three", "dimension", "two-dimensional", "texture", "space", "parameterize", "-lrb-", "-rrb-", "normal", "function", "2d", "gaussian", "reconstruction", "kernel", "now", "model", "pixel", "footprint", "random", "process", "choose", "position", "sampling", "take", "its", "normal", "have", "follow", "probability", "distribution", "direct", "analogy", "flatland", "derivation", "while", "flatland", "case", "have", "singularity", "inflection", "point", "original", "one-dimensional", "heightfield", "here", "we", "have", "singularity", "det", "-lrb-", "-rrb-", "which", "set", "curve", "uv-space", "where", "curvature", "original", "heightfield", "flip", "between", "elliptic", "hyperbolic", "curve", "directly", "correspond", "fold", "we", "often", "see", "pndf", "visualization", "again", "piecewise", "constant", "normal", "map", "-lrb-", "affine", "region", "heightfield", "-rrb-", "make", "det", "-lrb-", "-rrb-", "over", "whole", "region", "cause", "delta", "function", "-lrb-", "-rrb-", "fact", "we", "have", "try", "implement", "eq", "-lrb-", "-rrb-", "use", "analytic", "root", "finding", "find", "impractical", "due", "singularity", "therefore", "flatland", "we", "introduce", "intrinsic", "roughness", "accomplish", "2-dimensional", "gaussian", "kernel", "-lrb-", "-rrb-", "which", "convolve", "p-ndf", "derivation", "identical", "flatland", "except", "bold", "letter", "we", "can", "again", "visualize", "intuitively", "integration", "combined", "4d", "reconstruction", "kernel", "-lsb-", "-rsb-", "along", "graph", "normal", "function", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "which", "2d", "surface", "4d", "space", "hierarchical", "pruning", "idea", "also", "carry", "over", "from", "flatland", "however", "under", "gaussian", "pixel", "roughness", "kernel", "we", "have", "cast", "evaluation", "integration", "problem", "which", "can", "solve", "discretize", "normal", "map", "small", "affine", "patch", "-lrb-", "note", "though", "specular", "highlight", "we", "handle", "can", "still", "much", "smaller", "than", "patch", "-rrb-", "next", "section", "discuss", "detail", "solve", "integration", "problem", "more", "precisely", "we", "linearly", "interpolate", "value", "third", "coordinate", "imply", "simplest", "solution", "split", "each", "normal", "map", "texel", "two", "triangle", "sometimes", "sufficient", "we", "find", "discretization", "can", "produce", "triangular", "artifact", "p-ndf", "resolution", "normal", "map", "too", "low", "compare", "feature", "depict", "issue", "we", "can", "up-sample", "normal", "map", "subdivide", "texel", "sub-texel", "use", "bicubic", "catmull-rom", "interpolation", "any", "other", "subdivision", "could", "use", "naturally", "match", "control", "polygon", "bicubic", "patch", "figure", "show", "difference", "between", "two", "option", "integrate", "2d", "gaussian", "over", "triangle", "exist", "numerical", "algorithm", "evaluate", "cumulative", "distribution", "function", "-lrb-", "-rrb-", "bivariate", "gaussian", "covariance", "-lsb-", "Genz", "2004", "-rsb-", "which", "can", "adapt", "evaluate", "desire", "integral", "PolyCub", "package", "also", "take", "similar", "approach", "we", "have", "implement", "method", "work", "correctly", "appear", "slower", "than", "we", "method", "below", "we", "describe", "implementation", "we", "find", "perform", "well", "we", "case", "triangle", "from", "we", "triangulation", "due", "its", "construction", "we", "only", "have", "right", "triangle", "two", "side", "align", "axis", "triangle", "give", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "we", "obtain", "integral", "where", "-lrb-", "-rrb-", "achieve", "triangular", "integration", "domain", "so", "far", "we", "have", "just", "explicitly", "state", "problem", "eliminate", "carry", "out", "inner", "integration", "substitute", "argument", "result", "erf", "function", "lead", "integral", "form", "some", "constant", "shift", "bound", "integral", "do", "have", "elementary", "solution", "we", "can", "approximate", "follow", "problem", "thus", "separate", "integral", "form", "which", "can", "solve", "analytically", "use", "computer", "algebra", "system", "result", "long", "fundamentally", "difficult", "Figure", "illustrate", "result", "we", "integration", "algorithm", "particular", "normal", "map", "patch", "comparison", "against", "reference", "correctness", "derivation", "can", "easily", "check", "against", "binning", "method", "we", "use", "100", "million", "sample", "look-up", "normal", "map", "perturb", "store", "sample", "bin", "Figure", "show", "result", "time-sequence", "comparison", "Figure", "also", "compute", "use", "method", "note", "excellent", "match", "between", "two", "image", "compute", "use", "completely", "different", "method", "minor", "difference", "come", "from", "fact", "binning", "inherently", "compute", "bin", "integral", "instead", "bin", "center", "value", "like", "we", "evaluation", "supplementary", "datum", "contain", "several", "different", "ndf", "compare", "against", "reference", "float", "point", "format", "note", "we", "only", "provide", "heightfield", "patch", "-lrb-", "-rrb-", "normal", "map", "-lrb-", "-rrb-", "det", "-lrb-", "-rrb-", "triangle", "texel", "32", "triangle", "texel", "triangle", "texel", "0.001", "0.001", "0.05", "we", "evaluation", "bin", "32", "triangles/texel", "100", "million", "sample", "rectness", "we", "derivation", "single", "pixel", "cutlery", "model", "minor", "difference", "come", "from", "anti-aliasing", "binning", "method", "which", "naturally", "compute", "bin", "integral", "instead", "bin", "center", "value", "like", "we", "evaluation", "single-pixel", "rather", "than", "full-frame", "reference", "comparison", "since", "latter", "would", "extremely", "slow", "compute", "use", "100", "million", "sample", "-lrb-", "see", "Figure", "-rrb-", "would", "arguably", "provide", "less", "insight", "than", "ndf", "comparison", "hierarchical", "pruning", "texel", "increase", "performance", "we", "limit", "Gaussians", "non-zero", "only", "within", "-lrb-", "reasonable", "approximation", "-rrb-", "therefore", "many", "texel", "can", "prune", "because", "either", "zero", "over", "whole", "texel", "we", "can", "trivially", "reject", "texel", "fall", "outside", "we", "utilize", "min-max", "hierarchy", "over", "normal", "map", "more", "precisely", "each", "texel", "we", "precompute", "minimum", "maximum", "value", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "build", "quad-tree", "hierarchy", "over", "bound", "give", "query", "-lrb-", "-rrb-", "we", "traverse", "hierarchy", "pruning", "whole", "group", "texel", "where", "guarantee", "beyond", "recursive", "traversal", "similar", "many", "other", "bound", "volume", "approach", "importance", "sampling", "sample", "from", "p-ndf", "easy", "definition", "use", "same", "technique", "use", "create", "binning", "reference", "simply", "take", "normal", "random", "surface", "point", "see", "through", "pixel", "perturb", "intrinsic", "roughness", "kernel", "add", "other", "light", "path", "we", "implementation", "we", "separate", "glint", "component", "image", "-lrb-", "i.e.", "direct", "illumination", "normalmapped", "specular", "surface", "from", "point", "light", "-rrb-", "from", "all", "other", "light", "path", "which", "compute", "use", "path", "trace", "any", "other", "standard", "algorithm", "could", "use", "well", "first", "bounce", "from", "camera", "we", "use", "full", "normal", "map", "importance", "sampling", "further", "bounce", "we", "use", "global", "p-ndf", "approximation", "both", "sampling", "evaluation", "since", "accurate", "p-ndf", "longer", "make", "difference", "here", "we", "could", "also", "use", "normal", "map", "mip-mapping", "method", "case", "simple", "extension", "would", "smoothly", "transition", "normal", "map", "mip-mapping", "method", "distance", "once", "glint", "become", "insignificant", "alternatively", "we", "algorithm", "can", "treat", "new", "black-box", "brdf", "additional", "pixel", "footprint", "specification", "while", "keep", "all", "other", "part", "renderer", "unmodified", "however", "we", "prefer", "get", "separate", "timing", "we", "want", "make", "sure", "glint", "component", "completely", "deterministic", "avoid", "any", "confusion", "about", "how", "much", "noise", "come", "from", "true", "glint", "vs.", "algorithm", "reason", "we", "also", "do", "use", "area", "light", "depth", "field", "motion", "blur", "we", "result", "though", "would", "easy", "add", "we", "implementation", "use", "Mitsuba", "framework", "-lsb-", "jakob", "2010", "-rsb-", "run", "6-core", "Intel", "i7-4770k", "desktop", "3.5", "GHz", "hyperthread", "12", "thread", "below", "we", "describe", "scene", "show", "Figure", "10", "please", "see", "temporal", "version", "attach", "video", "note", "how", "strong", "glinting", "correct", "give", "normal", "map", "lighting", "we", "method", "entirely", "deterministic", "do", "produce", "any", "Monte", "Carlo", "noise", "we", "timing", "-lrb-", "Table", "-rrb-", "refer", "one", "frame", "-lrb-", "1280", "720", "-rrb-", "note", "how", "overhead", "we", "algorithm", "smaller", "than", "standard", "render", "other", "light", "path", "also", "note", "we", "performance", "depend", "number", "pixel", "glinty", "material", "independent", "scene", "complexity", "scene", "illustrate", "snail?s", "shell", "smooth", "heightfield", "create", "inverse", "fft", "from", "isotropic", "gaussian", "spectrum", "randomize", "phase", "convert", "normal", "map", "feature", "normal", "map", "smaller", "than", "pixel", "yet", "result", "far", "from", "smooth", "produce", "fairly", "dramatic", "glint", "effect", "metallic", "paint", "snail", "metallic", "paint", "often", "use", "car", "specifically", "design", "show", "glint", "compose", "several", "layer", "most", "important", "top", "clear-coat", "-lrb-", "which", "provide", "smooth", "specular", "highlight", "-rrb-", "color", "absorptive", "layer", "embedded", "aluminum", "flake", "-lsb-", "Rump", "et", "al.", "2008", "-rsb-", "we", "model", "flake", "use", "normal", "map", "construct", "cluster", "pixel", "voronoi", "cell", "whose", "center", "choose", "use", "Poisson", "disk", "sampling", "assign", "fix", "normal", "each", "cell", "draw", "from", "Beckmann", "distribution", "normal", "interpolation", "necessary", "-lrb-", "desirable", "-rrb-", "case", "each", "texel", "have", "constant", "normal", "subdivision", "beyond", "triangle", "require", "either", "we", "also", "add", "diffuse", "lobe", "approximate", "multiple", "internal", "reflection", "between", "flake", "clear-coat", "snail", "about", "10", "cm", "long", "make", "flake", "more", "visible", "than", "car", "scene", "show", "energy", "drink", "blender", "bumpy", "plastic", "body", "brush", "metal", "lid", "brush", "metal", "notoriously", "difficult", "render", "under", "sharp", "lighting", "typical", "compromise", "clude", "increase", "groove", "size", "light", "size", "roughness", "unrealistic", "level", "none", "necessary", "we", "approach", "we", "generate", "normal", "map", "use", "inverse", "fft", "approach", "anisotropic", "gaussian", "power", "spectrum", "add", "noise", "normal", "simulate", "tiny", "dent", "blender", "body", "we", "use", "ellipsoid", "bump", "heightfield", "which", "produce", "glint", "different", "appearance", "from", "snail", "scene", "show", "metallic", "cutlery", "strong", "scratch", "from", "heavy", "use", "configuration", "like", "under", "strong", "small", "led", "lighting", "fixture", "often", "see", "restaurant", "we", "generate", "scratch", "randomly", "orient", "slightly", "blur", "line-shaped", "valley", "we", "add", "dent", "through", "noise", "like", "brush", "metal", "above", "Ocean", "wave", "finally", "we", "show", "we", "method", "apply", "ocean", "similar", "larger", "feature", "than", "previous", "example", "here", "we", "model", "ocean", "single", "rectangle", "normal", "map", "generate", "use", "inverse", "fft", "method", "-lsb-", "tessendorf", "1999", "-rsb-", "while", "good", "anti-aliased", "ocean", "rendering", "have", "be", "possible", "use", "LEAN", "LEADR", "method", "we", "can", "produce", "very", "sharp", "correct", "glint", "even", "distance", "where", "multiple", "wave", "project", "pixel", "fundamental", "relationship", "between", "high-resolution", "specular", "surface", "small", "light", "source", "complex", "normal", "distribution", "glint", "important", "material", "appearance", "phenomenon", "receive", "minimal", "attention", "previous", "research", "we", "explain", "failure", "traditional", "Monte", "Carlo", "approach", "reproduce", "effect", "introduce", "new", "deterministic", "approach", "compute", "underlie", "integral", "we", "key", "idea", "shade", "surface", "patch", "see", "through", "pixel", "evaluate", "true", "normal", "distribution", "function", "patch", "single", "normal", "which", "can", "do", "under", "gaussian", "kernel", "assumption", "problem", "lead", "integral", "bivariate", "gaussian", "over", "triangle", "which", "can", "efficiently", "approximate", "we", "show", "complex", "temporally", "vary", "specular", "reflection", "from", "material", "bumpy", "plastic", "brush", "scratch", "metal", "metallic", "paint", "ocean", "wave", "extension", "displacement", "map", "would", "possible", "Nolan", "Goodnight", "provide", "video", "voiceover", "snail", "model", "create", "Paul", "Deyo", "blender", "Colin", "Smith", "some", "normal", "map", "datum", "provide", "Micah", "Johnson", "Ted", "Adelson", "Funding", "work", "provide", "NSF", "grant", "1011832", "-lrb-", "Beyond", "Flat", "Images", "-rrb-", "Intel", "Science", "Technology", "Center", "Visual", "Computing", "we", "acknowledge", "equipment", "support", "from", "NVIDIA", "Nokia", "Samsung", "ook", "R.", "L.", "ARPENTER", "L.", "atmull", "E.", "1987", "REYES", "image", "render", "architecture", "SIGGRAPH", "87", "95", "102", "upuy", "J.", "EITZ", "E.", "ehl", "J.-C.", "oulin", "P.", "EYRET", "F.", "stromoukhov", "V.", "2013", "linear", "efficient", "antialiased", "displacement", "Reflectance", "mapping", "ACM", "Trans", "enz", "a.", "2004", "numerical", "computation", "rectangular", "bivariate", "trivariate", "normal", "probability", "statistics", "Computing", "14", "251", "260", "C.", "UN", "B.", "AMAMOORTHI", "R.", "RINSPUN", "E.", "2007", "frequency", "domain", "normal", "map", "filter", "ACM", "Trans", "26", "28:1", "28:12", "gehy", "H.", "1999", "trace", "ray", "differential", "SIGGRAPH", "99", "179", "186", "AKOB", "W.", "arschner", "S.", "2012", "manifold", "exploration", "markov", "chain", "monte", "carlo", "technique", "render", "scene", "difficult", "specular", "transport", "ACM", "Trans", "31", "58:1", "58:13", "AKOB", "W.", "SAN", "M.", "l.-q.", "awrence", "J.", "MAMOORTHI", "R.", "arschner", "S.", "2014", "discrete", "stochastic", "microfacet", "model", "ACM", "Trans", "AKOB", "W.", "2010", "Mitsuba", "renderer", "http://www.mitsuba", "renderer.org", "itchell", "D.", "ANRAHAN", "P.", "1992", "illumination", "from", "curved", "reflector", "SIGGRAPH", "Comput", "26", "283", "291", "oon", "J.", "T.", "ALTER", "B.", "arschner", "S.", "R.", "2007", "render", "discrete", "random", "media", "use", "precomputed", "scattering", "solution", "egsr", "07", "231", "242", "lano", "m.", "aker", "D.", "2010", "lean", "mapping", "ACM", "i3d", "10", "181", "188", "oly", "ub", "2004", "Polycub", "cubature", "over", "polygonal", "domain", "http://cran.r-project.org/web/packages/", "polycub", "access", "2014-01-14", "ump", "m.", "uller", "G.", "ARLETTE", "R.", "OCH", "D.", "LEIN", "R.", "2008", "photo-realistic", "rendering", "metallic", "car", "paint", "from", "image-based", "measurement", "Computer", "Graphics", "Forum", "27", "527", "536", "essendorf", "J.", "1999", "simulate", "ocean", "water", "Technical", "Report", "oksvig", "M.", "2005", "mipmapp", "normal", "map", "Journal", "Graphics", "Tools", "10", "65", "71", "each", "E.", "1997", "robust", "Monte", "Carlo", "method", "light", "transport", "simulation", "phd", "thesis", "Stanford", "University", "ALTER", "B.", "arschner", "S.", "R.", "H.", "orrance", "K.", "E.", "2007", "Microfacet", "model", "refraction", "through", "rough", "surface", "egsr", "07", "195", "206", "ALTER", "B.", "HAO", "S.", "OLZSCHUCH", "N.", "ALA", "K.", "2009", "single", "scattering", "refractive", "media", "triangle", "mesh", "boundary", "ACM", "Trans", "28", "92:1", "92:8", "K.", "ao", "y.-p.", "l.-q.", "ong", "Z.", "ang", "R.", "s.-m", "2014", "practical", "algorithm", "render", "interreflection", "all-frequency", "brdf", "ACM", "Trans", "33", "10:1", "10:16" ],
  "content" : "Standard uniform pixel sampling techniques for direct illumination have extremely large variance, and using them for this purpose is impractical. The reason is that most of the energy is concentrated in tiny highlights that take up a minuscule fraction of a pixel, and uniform pixel sampling is ineffective at hitting the highlights ( Figure 3 ). Normal map filtering techniques [Toksvig 2005; Han et al. 2007; Olano and Baker 2010; Dupuy et al. 2013] also do not fully solve the problem. This P-NDF can be easily estimated by binning: repeatedly choose a point on the patch, take its normal, perturbed by the intrinsic surface roughness, and add it into a bin. In our method, the P-NDF is just a mathematical tool to derive what the correct pixel brightness should be; it is never fully constructed, and only evaluated for a single vector. We introduce an algorithm for P-NDF evaluation in Section 4. A basic computational block of our solution is an integral of a 2-dimensional Gaussian over a triangular domain, described in Section 5. We hierarchically prune positionnormal space to quickly find texels that might contribute to a given P-NDF evaluation (Section 6). Our results show complex, temporally varying glints from bumpy plastics, brushed and scratched metals, metallic paint and ocean waves; see Section 7 and Figure 10 . 1 Specifically, constant view and light direction over P, and the approximations made when solving the integral in Section 5. Naive pixel sampling. Multiple importance sampling [Veach 1997] does not help, because it is the pixel integral that is inefficiently sampled, rather than the BRDF/light combination. The REYES approach of surface subdivision into micropolygons [Cook et al. 1987] is equally inefficient, since it would require micropolygons as small as the highlights. Though we use fine triangulations of the normal map for smoothness, our method can handle highlights that are arbitrarily smaller than the triangles. Approximating them by broad lobes is only applicable under low-frequency illumination that would filter the complex features anyway. Figure 4 shows the effect of replacing the true NDF by a single Gaussian or a mixture of Gaussians, thus losing the sharp features. Single-point evaluation of caustics. Walter et al. [2009] compute volumetric caustics due to the refraction of a point light into a scattering volume through a bumpy interface. However, no intrinsic roughness is considered (resulting in singularities), and the phenomenon rendered is quite different. They used wavefront tracing as a way to compute the contribution of a valid specular path; this is again Our method (17 min, 2.2 min actual glints) Naive sampling (2 hours, 4,096 samples) correct NDF isotropic Gaussian (our approach) [Toksvig 2005] In the perfectly specular case, there is a discrete set (rather than a manifold) of valid paths, as already noted above. Stochastic reflectance. The key to their method is counting up the particles contributing to a particular illumination calculation without actually generating them, providing efficiency for large query areas where many particles contribute. When used as a model for a bumpy smooth surface, the stochastic approach is phenomenological: the random-flake approximation replaces the P-NDF. In contrast, our algorithm exactly determines how a given specular surface, defined by a particular normal map, really looks under given sharp illumination. Solving our problem requires thinking about a surface patch P seen through a pixel all at once, rather than one point at a time. Just as every surface point has a local BRDF, we can think of areas of the surface having P-BRDFs that describe how the total contribution to the pixel depends on the illumination. Rendering detailed normal maps requires an efficient way to evaluate the area-integrated PBRDF, rather than letting the pixel filter do it implicitly by point sampling. We call this distribution the P-NDF; it is just like the microfacet distribution in a standard BRDF model, but it gives the normal distribution for a particular area rather than a global average over the whole surface. A crucial observation is that the P-NDF is not a simple, broad function. It contains a surprising amount of structure ( Figure 5 ) even when the surface patch is far larger than the features in the normal map. It also varies dramatically across the surface. Evaluating the P-NDF efficiently while preserving this detailed spatio-angular structure is the key to accurately capturing glinty appearance. Let us define these terms more precisely. Pixel footprint. We assume a Gaussian pixel reconstruction filter. In practice, we actually subdivide pixels into 4 ? 4 subpixels, and make the footprints smaller accordingly. Projected hemisphere. Let us also define the extended unit disk as the union of the unit disk and a special symbol ?, which allows for normal distributions that sometimes return invalid normals. This is less common than working with hemispheres, but it will be useful shortly. Normal maps can be given directly or as the derivative of a heightfield. We use the direct option, though all but one normal map in our examples do come from a heightfield (the exception is the metallic paint flakes). Intrinsic roughness. We could treat the surface as perfectly specular; however, we found that it is useful to consider a small amount of unresolved fine roughness. It also prevents singularities (infinitely bright highlights), which arise with perfectly specular surfaces when det J(u) = 0, and cleanly deals with normal maps that contain piece-wise constant regions. (The associated random event is simply a ?choice of normal?.) This definition slightly deviates from standard references such as [Walter et al. 2007] and [Burley 2012], but it is fully compatible with them, and is actually more convenient. In hemispherical terms, NDFs like Beckmann and GGX require an additional cosine term to integrate to 1, and their associated sampling routines also bake in a cosine (see eq. (4) and (28) in Walter et al. [2007]); in our formulation, no cosines need to be worried about. In particular, Gaussians are perfectly good NDFs, and this includes anisotropic and non-centered ones. The last step can sometimes result in a normal outside of the unit disk; these events are collected by the probability of ?, and are often near zero in practice. Figure 5 shows different P-NDFs as the size of the pixel footprint increases. Note that quite large footprint sizes are required for these NDFs to start to mimic analytic normal distributions like Beckmann. Our core challenge is to find an evaluation algorithm for the PNDF D(s) for a half-vector s, corresponding to a given footprint on a given normal map and with a given intrinsic roughness; indeed, with such an algorithm at hand, it is straightforward to plug the PNDF into a standard microfacet BRDF, which can be used for direct illumination calculations: In the following sections, we will first make the P-NDF evaluation problem more approachable by analyzing the situation in flatland, and then present the full 3D solution, which naturally follows from the flatland case. The flatland situation is simpler: there is only one texture parameter u. The normal map can be written as a function n(u) returning normals in (?1, 1), which is analogous to the unit disk from the 3D case. The full normal vector is (n(u), 1 ? n(u) 2 ). The pixel footprint P will turn into a Gaussian reconstruction kernel G p (u) that integrates to 1. Let X be a random variable that is distributed  according to G p (u). The key question is, what is the distribution of the random variable n(X) on (?1, 1)? The situation is illustrated in Figure 6 . where u i are the roots of the equation n(u) = s. The delta function restricts the integral to points where n(u) = s, and the second equation intuitively accounts for the ?speed? of crossing the root; it only works if a finite set of roots exists. As we can see, the P-NDF will have singularities at points where n (u) = 0. These correspond to inflection points of the original heightfield. This analysis shows that the P-NDF can have infinite values. (Our distant light/camera approximation is not the culprit; infinities could occur even if we did not make this approximation.) Furthermore, there could be constant regions in the normal map, so we get n (u) = 0 for whole intervals, and corresponding delta functions in the P-NDF . To avoid singularities and other problems inherent in perfect specular surfaces, we introduce a tiny amount of finite roughness to the normal-mapped surface. Since the P-NDF is just a function on the interval (?1, 1), we can convolve it with a Gaussian G r (s) easily: In the last step, we combined the two 1D Gaussians into a single 2D one: Note, though, that the measure is the standard line measure on the u axis, not arc length along the graph. Figure 6 (d) illustrates this intuition, and immediately leads to an accelerated query idea: we can use a hierarchy to prune all normal map segments in areas where G c [P, s] is effectively zero. This shows the benefit of choosing Gaussian filters; other choices such as splines would lead to integration problems without closedform solutions. Also note that we made the graph piecewise-linear, instead of the full integrand G c (u, n(u)): the latter would be a bad choice, since 3D analysis. We can extend the above line of thinking to three dimensions, with two-dimensional texture space parameterized by u = (u, v), and a normal function n : R 2 ? D. A 2D Gaussian reconstruction kernel G p : R 2 ? R now models the pixel footprint P. The random process of choosing a position u by sampling G p and taking its normal will have the following probability distribution: This is in direct analogy to the flatland derivation. While the flatland case has singularities at the inflection points of the original one-dimensional heightfield, here we have singularities at det J(u) = 0, which is a set of curves in uv-space where the curvature of the original heightfield flips between elliptic and hyperbolic. These curves directly correspond to the ?folds? we often see in PNDF visualizations. Again, piecewise constant normal maps (or affine regions of the heightfield) make det J(u) = 0 over whole regions, causing delta functions in D(s). In fact, we have tried to implement eq. (5) using analytic root finding and found it impractical due to the singularities. Therefore, as in flatland, we introduce intrinsic roughness. This is accomplished by a 2-dimensional Gaussian kernel G r (s), which convolves the P-NDF . The derivation is identical to flatland except with bold letters: We can again visualize this intuitively as integration of the combined 4D reconstruction kernel G c [P, s] along the graph of the normal function, (u, n(u)), which is a 2D surface in 4D space. The hierarchical pruning idea also carries over from flatland. However, under Gaussian pixel and roughness kernels, we have cast this evaluation as an integration problem, which can be solved by discretizing the normal map into small affine patches. (Note, though, that the specular highlights we handle can still be much smaller than the patches.) The next section discusses the details of solving this integration problem. More precisely, we linearly interpolate the s and t values; the third coordinate is implied. The simplest solution is to split each normal map texel into two triangles. This is sometimes sufficient, but we found that this discretization can produce triangular artifacts in the P-NDF, if the resolution of the normal map is too low compared to the features it depicts. If this is an issue, we can up-sample the normal map, or subdivide texels into 4 ? 4 sub-texels using bicubic Catmull-Rom interpolation. Any other subdivision could be used, but 4 ? 4 naturally matches the control polygon of the bicubic patch. Figure 7 shows the difference between the two options. Integrating a 2D Gaussian over a triangle . There exist numerical algorithms for evaluating the cumulative distribution function ?(x, y, ?) of a bivariate Gaussian with ? x = ? y = 1 and covariance ? [Genz 2004], which can be adapted to evaluate the desired integral. The PolyCub package also takes a similar approach. We have implemented this method and it works correctly, but appears slower than our method. Below we describe the implementation that we found to perform well in our case. is a triangle from our triangulation; due to its construction, we only have right triangles, with two sides aligned to the axes. If is the triangle given by (u 0 , v 0 ), (u 1 , v 0 ) and (u 0 , v 1 ), we obtain an integral where f (u) achieves a triangular integration domain: So far, we have just explicitly stated the problem. Eliminating v by carrying out the inner integration, and substituting x for the argument of the resulting erf function, this leads to integrals of the form for some constants a and b, and shifted bounds x 0 and x 1 . This integral does not have an elementary solution, but we can approximate it as follows. The problem thus separates into integrals of the form which can be solved analytically using a computer algebra system. The result is long but not fundamentally difficult. Figure 8 illustrates the result of our integration algorithm on a particular normal map patch. Comparison against reference. The correctness of the derivation can be easily checked against the binning method. That is, we use 100 million samples of G p , look-up the normal map, perturb by G r , and store the samples in bins. Figure 9 shows the result. The time-sequence comparison in Figure 1 is also computed using this method. Note the excellent match between the two images, computed using completely different methods. A minor difference comes from the fact that the binning inherently computes bin integrals instead of bin center values like our evaluation. The supplementary data contains several different NDFs compared against the reference, in floating point format. Note that we only provide heightfield patch h(u) normal map n(u) 1/| det J(u)| 2 triangles / texel 32 triangles / texel 2 triangles / texel ? = 0.001 ? = 0.001 ? = 0.05 our evaluation binning 32 triangles/texel 100 million samples rectness of our derivations, for a single pixel of the cutlery model. A minor difference comes from the ?anti-aliasing? of the binning method, which naturally computes bin integrals instead of bin center values like our evaluation. single-pixel rather than full-frame reference comparisons, since the latter would be extremely slow to compute using the 100 million samples (see Figure 3 ), and would arguably provide less insight than NDF comparisons. Hierarchical pruning of texels. To increase performance, we limit the Gaussians to be non-zero only within 5? (a reasonable approximation). Therefore, many texels can be pruned, because either G p or G r are zero over the whole texel. We can trivially reject texels that fall outside of G p . For G r we utilize a min-max hierarchy over the normal map. More precisely, for each texel, we precompute the minimum and maximum value of s(u, v) and t(u, v), and build a quad-tree hierarchy over these bounds. For a given query of D(s), we traverse the hierarchy, pruning whole groups of texels where G r  is guaranteed to be beyond 5?. The recursive traversal is similar to many other bounding volume approaches. Importance sampling. Sampling from a P-NDF is easy by definition, using the same technique as was used to create the binning reference: simply take the normal of a random surface point seen through the pixel, and perturb by the intrinsic roughness kernel. Adding other light paths. In our implementation, we separate the glint component of the image (i.e. direct illumination on normalmapped specular surfaces from point lights) from all other light paths, which are computed using path tracing; any other standard algorithm could be used as well. On the first bounce from the camera, we use the full normal map for importance sampling. On further bounces we use a global P-NDF approximation for both sampling and evaluation, since an accurate P-NDF no longer makes a difference here. We could also use a normal map mip-mapping method in that case. A simple extension would be to smoothly transition to a normal map mip-mapping method in the distance, once glinting becomes insignificant. Alternatively, our algorithm can be treated as a new ?black-box? BRDF with an additional pixel footprint specification, while keeping all other parts of a renderer unmodified. However, we prefer to get separate timings, and we wanted to make sure the glint component is completely deterministic, to avoid any confusion about how much noise comes from the true glints vs. the algorithm. For this reason, we also do not use area lights, depth of field, or motion blur in our results, though they would be easy to add. Our implementation uses the Mitsuba framework [Jakob 2010], and runs on a 6-core Intel i7-4770K desktop at 3.5 GHz, hyperthreaded to 12 threads. Below we describe the scenes shown in Figure 10 . Please see their temporal versions in the attached video. Note how the strong glinting is correct, given the normal map and the lighting; our method is entirely deterministic and does not produce any Monte Carlo noise. Our timings ( Table 2 ) refer to one frame (1280 ? 720). Note how the overhead of our algorithm is smaller than the standard rendering with other light paths. Also note that our performance depends on the number of pixels with glinty materials, and is independent of scene complexity. This scene illustrates, on the snail?s shell, a smooth heightfield created by inverse FFT from an isotropic Gaussian spectrum with randomized phase, converted to a normal map. The features of the normal map are smaller than a pixel, and yet the result is far from smooth, producing a fairly dramatic glint effect. Metallic paint snail. Metallic paint, often used on cars, is specifically designed to show glints. Composed of several layers, the most important are the top clear-coat (which provides the smooth specular highlight) and the colored absorptive layer with embedded aluminum flakes [Rump et al. 2008]. We model the flakes using a normal map that is constructed by clustering the pixels into Voronoi cells, whose centers are chosen using Poisson disk sampling, and assigning a fixed normal to each cell, drawn from the Beckmann distribution. No normal interpolation is necessary (or desirable) in this case: each texel has a constant normal. No subdivision beyond 2 triangles is required either. We also added a diffuse lobe to approximate multiple internal reflections between the flakes and the clear-coat. The snail is about 10 cm long, making the flakes more visible than on a car. This scene shows an energy drink blender with a bumpy plastic body and a brushed metal lid. Brushed metal is notoriously difficult to render under sharp lighting; typical compromises in- clude increasing groove size, light size and roughness to unrealistic levels. None of this is necessary with our approach. We generated a normal map using the inverse FFT approach but with an anisotropic Gaussian power spectrum, and added noise to the normals to simulate tiny dents. For the blender body, we used an ellipsoid bump heightfield, which produces glints of different appearance from the snail. This scene shows metallic cutlery with strong scratches from heavy use. A configuration like this, under strong small LED lighting fixtures, is often seen in restaurants. We generated the scratches as randomly oriented, slightly blurred line-shaped valleys. We then added dents through noise, like with brushed metal above. Ocean waves. Finally, we show our method applied to the ocean, with similar but larger features than previous examples. Here we model the ocean as a single rectangle with a normal map generated using the inverse FFT method [Tessendorf 1999]. While good anti-aliased ocean renderings have been possible using LEAN or LEADR methods, we can produce very sharp and correct glints even in the distance, where multiple waves project to a pixel. The fundamental relationships between high-resolution specular surfaces, small light sources, complex normal distributions and glints are an important material appearance phenomenon that received minimal attention in previous research. We explained the failure of traditional Monte Carlo approaches at reproducing this effect, and introduced a new deterministic approach for computing the underlying integrals. Our key idea is to shade a surface patch seen through a pixel by evaluating the true normal distribution function of the patch for a single normal, which can be done under Gaussian kernel assumptions. The problem leads to integrals of bivariate Gaussians over triangles, which can be efficiently approximated. We showed complex, temporally varying specular reflections from materials such as bumpy plastics, brushed and scratched metals, metallic paint and ocean waves. An extension to displacement maps would be possible. Nolan Goodnight provided the video voiceover. The snail model was created by Paul Deyo and the blender by Colin Smith. Some normal map data was provided by Micah Johnson and Ted Adelson. Funding for this work was provided by NSF grant 1011832 (Beyond Flat Images) and the Intel Science and Technology Center for Visual Computing. We acknowledge equipment and support from NVIDIA, Nokia and Samsung. C OOK , R. L., C ARPENTER , L., AND C ATMULL , E. 1987. The REYES image rendering architecture. SIGGRAPH ?87, 95?102. D UPUY , J., H EITZ , E., I EHL , J.-C., P OULIN , P., N EYRET , F., AND O STROMOUKHOV , V. 2013. Linear Efficient Antialiased Displacement and Reflectance Mapping. ACM Trans. G ENZ , A. 2004. Numerical computation of rectangular bivariate and trivariate normal and t probabilities. Statistics and Computing 14, 3, 251?260. H AN , C., S UN , B., R AMAMOORTHI , R., AND G RINSPUN , E. 2007. Frequency domain normal map filtering. ACM Trans. 26, 3, 28:1?28:12. I GEHY , H. 1999. Tracing ray differentials. SIGGRAPH ?99, 179? 186. J AKOB , W., AND M ARSCHNER , S. 2012. Manifold exploration: A markov chain monte carlo technique for rendering scenes with difficult specular transport. ACM Trans. 31, 4, 58:1? 58:13. J AKOB , W., H A SAN , M., Y AN , L.-Q., L AWRENCE , J., R A MAMOORTHI , R., AND M ARSCHNER , S. 2014. Discrete stochastic microfacet models. ACM Trans. J AKOB , W., 2010. Mitsuba renderer. http://www.mitsuba renderer.org. M ITCHELL , D., AND H ANRAHAN , P. 1992. Illumination from curved reflectors. SIGGRAPH Comput. 26, 2, 283?291. M OON , J. T., W ALTER , B., AND M ARSCHNER , S. R. 2007. Rendering discrete random media using precomputed scattering solutions. EGSR 07, 231?242. O LANO , M., AND B AKER , D. 2010. Lean mapping. ACM, I3D ?10, 181?188. P OLY C UB , 2004. Polycub: Cubature over polygonal domains. http://cran.r-project.org/web/packages/ polyCub/. Accessed: 2014-01-14. R UMP , M., M ULLER  ? , G., S ARLETTE , R., K OCH , D., AND K LEIN , R. 2008. Photo-realistic rendering of metallic car paint from image-based measurements. Computer Graphics Forum 27, 2, 527?536. T ESSENDORF , J. 1999. Simulating ocean water. Technical Report. T OKSVIG , M. 2005. Mipmapping normal maps. Journal of Graphics Tools 10, 3, 65?71. V EACH , E. 1997. Robust Monte Carlo Methods for Light Transport Simulation. PhD thesis, Stanford University. W ALTER , B., M ARSCHNER , S. R., L I , H., AND T ORRANCE , K. E. 2007. Microfacet models for refraction through rough surfaces. EGSR 07, 195?206. W ALTER , B., Z HAO , S., H OLZSCHUCH , N., AND B ALA , K. 2009. Single scattering in refractive media with triangle mesh boundaries. ACM Trans. 28, 3, 92:1?92:8. X U , K., C AO , Y.-P., M A , L.-Q., D ONG , Z., W ANG , R., AND H U , S.-M. 2014. A practical algorithm for rendering interreflections with all-frequency brdfs. ACM Trans. 33, 1, 10:1?10:16.",
  "resources" : [ ]
}