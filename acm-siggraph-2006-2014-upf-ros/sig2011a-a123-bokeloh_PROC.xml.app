{
  "uri" : "sig2011a-a123-bokeloh_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2011a/a123-bokeloh_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Pattern-Aware Shape Deformation Using Sliding Dockers",
    "published" : "2011",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Martin-Bokeloh",
      "name" : "Martin",
      "surname" : "Bokeloh"
    }, {
      "uri" : "http://drinventor/Michael-Wand",
      "name" : "Michael",
      "surname" : "Wand"
    }, {
      "uri" : "http://drinventor/Vladlen-Koltun",
      "name" : "Vladlen",
      "surname" : "Koltun"
    }, {
      "uri" : "http://drinventor/Hans-Peter-Seidel",
      "name" : "Hans-Peter",
      "surname" : "Seidel"
    } ]
  },
  "bagOfWords" : [ "paper", "introduce", "new", "structure-aware", "shape", "deformation", "technique", "key", "idea", "detect", "continuous", "discrete", "regular", "pattern", "ensure", "pattern", "preserve", "during", "freeform", "deformation", "we", "propose", "variational", "deformation", "model", "preserve", "structure", "discrete", "algorithm", "adaptively", "insert", "remove", "repeated", "element", "regular", "pattern", "minimize", "distortion", "tool", "structural", "adaptation", "we", "introduce", "slide", "docker", "which", "represent", "repeatable", "element", "fit", "together", "seamlessly", "arbitrary", "repetition", "count", "we", "demonstrate", "present", "approach", "number", "complex", "3d", "model", "from", "commercial", "shape", "library", "while", "sophisticated", "method", "processing", "render", "three-dimensional", "content", "widely", "available", "creation", "detailed", "custom", "3d", "geometry", "still", "require", "significant", "expertise", "issue", "merely", "creative", "ability", "also", "process", "directly", "manipulate", "detailed", "3d", "model", "e-mail", "-lcb-", "mbokeloh", "mwand", "hpseidel", "-rcb-", "@mpi", "inf.mpg.de", "e-mail", "vladlen@stanford.edu", "3d", "model", "often", "feature", "structural", "relationship", "multiple", "scale", "which", "need", "manually", "restore", "whenever", "significant", "manipulation", "perform", "model", "tedious", "adjustment", "often", "require", "multiple", "time", "single", "modeling", "session", "paper", "we", "present", "structure-aware", "shape", "editing", "technique", "detect", "discrete", "continuous", "pattern", "shape", "preserve", "pattern", "under", "free-form", "deformation", "we", "approach", "user", "specify", "small", "set", "constraint", "system", "compute", "new", "shape", "meet", "constraint", "while", "preserve", "structural", "property", "original", "model", "show", "Figure", "invariant", "we", "extract", "1-parameter", "group", "partial", "symmetry", "we", "formulate", "non-local", "rigidity", "constraint", "maintain", "symmetry", "property", "output", "allow", "adapt", "number", "discrete", "repetition", "order", "reduce", "distortion", "order", "add", "remove", "element", "along", "discrete", "pattern", "minimal", "distortion", "we", "introduce", "slide", "docker", "slide", "docker", "element", "local", "repeated", "structure", "interface", "rest", "model", "way", "structure", "can", "independently", "replicate", "minimal", "distortion", "we", "develop", "algorithm", "automatically", "find", "collection", "slide", "docker", "repeat", "one", "common", "translational", "direction", "adapt", "replication", "count", "way", "minimize", "distortion", "overall", "object", "we", "introduce", "concept", "slide", "docker", "analyze", "partial", "regularity", "many", "technique", "base", "variational", "calculus", "local", "regularizer", "trade", "off", "against", "user?s", "constraint", "elastic", "deformation", "model", "-lsb-", "terzopoulo", "et", "al.", "1987", "-rsb-", "which", "minimize", "non-rigidity", "deformation", "particularly", "popular", "-lsb-", "Botsch", "Sorkine", "2008", "-rsb-", "variant", "include", "volume", "preservation", "-lsb-", "von", "Funck", "et", "al.", "2006", "-rsb-", "similarity", "transform", "-lsb-", "Liu", "et", "al.", "2008", "-rsb-", "thinplate", "spline", "-lsb-", "Allen", "et", "al.", "2003", "-rsb-", "we", "extend", "volumetric", "subspace", "formulation", "-lsb-", "Zhou", "et", "al.", "2005", "Huang", "et", "al.", "2006", "Sumner", "et", "al.", "2007", "Adams", "et", "al.", "2008", "-rsb-", "acceptable", "many", "organic", "shape", "creature", "highly", "structure", "object", "many", "man-made", "object", "difficult", "handle", "Kraevoy", "et", "al.", "-lsb-", "2008", "-rsb-", "use", "elastic-type", "model", "adapt", "vulnerability", "local", "content", "Xu", "et", "al.", "-lsb-", "2009", "-rsb-", "introduce", "slippage", "analysis", "free-form", "shape", "de", "formation", "use", "construct", "joint-aware", "deformation", "model", "issue", "main", "motivation", "we", "work", "technique", "thus", "can", "handle", "3d", "model", "local", "pattern", "do", "globally", "partition", "shape", "we", "extend", "docking", "approach", "Bokeloh", "et", "al.", "-lsb-", "2010", "-rsb-", "introduce", "slide", "docker", "which", "require", "only", "partial", "partitioning", "design", "operate", "part", "structure-aware", "free-form", "deformation", "framework", "method", "tackle", "challenge", "arise", "image", "processing", "perspective", "distortion", "illumination", "change", "order", "reduce", "distortion", "we", "automatically", "insert", "delete", "repeated", "element", "use", "slide", "docker", "develop", "section", "section", "we", "give", "brief", "overview", "each", "component", "we", "approach", "addition", "user", "can", "select", "arbitrary", "number", "handle", "can", "move", "rotate", "they", "new", "position", "-lrb-", "interactive", "process", "real-time", "feedback", "system", "-rrb-", "shape", "analysis", "we", "perform", "shape", "analysis", "step", "preprocessing", "order", "identify", "regular", "pattern", "input", "geometry", "slide", "docker", "discrete", "pattern", "we", "find", "slide", "docker", "which", "build", "block", "can", "replicate", "when", "object", "locally", "stretch", "constraint", "give", "higher", "weight", "than", "elastic", "regularizer", "thus", "dominate", "deformation", "result", "-lrb-", "figure", "2c", "-rrb-", "discrete", "relaxation", "we", "measure", "stretch", "continuously", "deform", "model", "automatically", "insert", "delete", "slide", "docker", "relax", "stretch", "model", "throughout", "paper", "we", "restrict", "we", "consideration", "translation", "we", "goal", "preserve", "symmetry", "structure", "input", "under", "deformation", "while", "admit", "insertion", "deletion", "part", "part", "have", "same", "continuous", "symmetry", "property", "extract", "simple", "region", "grow", "-lrb-", "see", "-lsb-", "Gelfand", "Guibas", "2004", "-rsb-", "implementation", "detail", "-rrb-", "discrete", "case", "straightforward", "approach", "have", "benefit", "make", "deformation", "independent", "representation", "so", "arbitrary", "type", "input", "geometry", "general", "surface", "topology", "can", "handle", "easily", "first", "determine", "resolution", "deformation", "field", "which", "typically", "range", "-lrb-", "-rrb-", "we", "look", "from", "local", "perspective", "elastic", "regularizer", "mean", "we", "would", "like", "deformation", "happen", "along", "slippable", "motion", "rather", "than", "orthogonal", "they", "because", "only", "change", "parametrization", "geometric", "shape", "accordingly", "we", "augment", "equation", "use", "anisotropic", "error", "quadric", "order", "weight", "deformation", "here", "-lrb-", "-rrb-", "unit", "surface", "normal", "-lrb-", "-rrb-", "euclidean", "h-neighborhood", "S.", "Intuitively", "can", "explain", "average", "planar", "constraint", "each", "point", "outer", "product", "create", "quadric", "penalize", "deviation", "normal", "direction", "only", "tangential", "motion", "have", "zero", "cost", "again", "only", "constant", "equation", "change", "so", "only", "right-hand", "side", "linear", "system", "need", "update", "discrete", "case", "however", "tangential", "drift", "clearly", "noticeable", "because", "we", "have", "complex", "non-slippable", "geometry", "be", "replicate", "we", "now", "need", "determine", "whether", "contain", "element", "can", "replicate", "while", "continuously", "interface", "each", "other", "exist", "geometry", "second", "every", "point", "-lrb-", "-rrb-", "corresponding", "point", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "must", "include", "boundary", "vice", "versa", "we", "can", "now", "integrate", "slide", "docker", "we", "deformation", "framework", "therefore", "we", "augment", "distance", "vector", "instead", "distance", "squeeze", "element", "we", "employ", "original", "distance", "vector", "elastic", "deformation", "model", "aim", "undoing", "deformation", "subspace", "model", "can", "represent", "high", "frequency", "detail", "which", "imply", "visible", "artifact", "boundary", "can", "remain", "order", "avoid", "problem", "we", "need", "make", "sure", "new", "base", "shape", "we", "create", "actually", "smooth", "deformation", "low", "frequency", "function", "can", "integrate", "analytically", "-lrb-", "obtain", "position", "rather", "than", "derivative", "-rrb-", "invert", "so", "we", "can", "compute", "inner", "stretch", "make", "all", "instance", "fit", "placeholder", "latter", "example", "temple", "roof", "partially", "symmetric", "under", "transformation", "thus", "docking", "site", "can", "detect", "show", "Figure", "-lrb-", "-rrb-" ],
  "content" : "This paper introduces a new structure-aware shape deformation technique. The key idea is to detect continuous and discrete regular patterns and ensure that these patterns are preserved during freeform deformation. We propose a variational deformation model that preserves these structures, and a discrete algorithm that adaptively inserts or removes repeated elements in regular patterns to minimize distortion. As a tool for such structural adaptation, we introduce sliding dockers, which represent repeatable elements that fit together seamlessly for arbitrary repetition counts. We demonstrate the presented approach on a number of complex 3D models from commercial shape libraries. While sophisticated methods for processing and rendering three-dimensional content are widely available, the creation of detailed custom 3D geometry still requires significant expertise. The issue is not merely of creative ability, but also with the process of directly manipulating detailed 3D models. Such ? e-mail: {mbokeloh,mwand,hpseidel}@mpi-inf.mpg.de ? e-mail: vladlen@stanford.edu 3D models often feature structural relationships on multiple scales, which need to be manually restored whenever a significant manipulation is performed on the model. Tedious adjustment is often required multiple times in a single modeling session. In this paper, we present a structure-aware shape editing technique that detects discrete and continuous patterns in the shape and preserves these patterns under free-form deformation. In our approach, the user specifies a small set of constraints and the system computes a new shape that meets these constraints while preserving structural properties of the original model, as shown in Figure 1 . As invariants, we extract 1-parameter groups of partial symmetries. We formulate non-local rigidity constraints to maintain these symmetry properties in the output, and allow for adapting the number of discrete repetitions in order to reduce distortions. In order to add and remove elements along discrete patterns with minimal distortion, we introduce sliding dockers. A sliding docker is an element in a local, repeated structure that interfaces with the rest of the model in such way that the structure can be independently replicated with minimal distortion. We develop an algorithm that automatically finds collections of sliding dockers that repeat in one common translational direction and adapts the replication count in a way that minimizes distortions in the overall object. ? We introduce the concept of sliding dockers for analyzing partial regularity. Many of the techniques are based on variational calculus: local regularizers are traded off against the user?s constraints. Elastic deformation models [Terzopoulos et al. 1987], which minimize the non-rigidity of the deformation, are particularly popular [Botsch and Sorkine 2008]. Variants include volume preservation [von Funck et al. 2006], similarity transforms [Liu et al. 2008], and thinplate splines [Allen et al. 2003]. We extend this to a volumetric subspace formulation [Zhou et al. 2005; Huang et al. 2006; Sumner et al. 2007; Adams et al. 2008]. This is acceptable for many organic shapes such as creatures, but highly structured objects, such as many man-made objects, are difficult to handle. Kraevoy et al. [2008] use an elastic-type model that adapts to the vulnerability of the local content. Xu et al. [2009] introduce slippage analysis for free-form shape de formation, using it to construct a joint-aware deformation model. This issue is the main motivation for our work. The technique thus cannot handle 3D models with local patterns that do not globally partition the shape. We extend the docking approach of Bokeloh et al. [2010] and introduce sliding dockers, which require only a partial partitioning and are designed to operate as part of a structure-aware free-form deformation framework. Their method tackles challenges that arise in image processing, such as perspective distortion or illumination changes. In order to reduce distortions, we automatically insert or delete repeated elements using sliding dockers, developed in Section 6. In this section we give a brief overview of each component of our approach. In addition, the user can select an arbitrary number of handles H i ? S and can move and rotate them to new positions (this is an interactive process, with real-time feedback by the system). Shape analysis: We perform a shape analysis step in preprocessing, in order to identify regular patterns in the input geometry. Sliding dockers: For discrete patterns, we find sliding dockers, which are building blocks that can be replicated when the object is locally stretched. These constraints are given a higher weight than the elastic regularizer, thus dominating the deformation results ( Figure 2c ). Discrete relaxation: We measure the stretch in the continuously deformed model and automatically insert or delete sliding dockers to relax the stretch in the model. Throughout this paper, we will restrict our consideration to translations. Our goal is to preserve the symmetry structure of the input under deformations while admitting insertions and deletions of parts. Parts P that have the same continuous symmetry properties are extracted by simple region growing (see [Gelfand and Guibas 2004] for implementation details). In the discrete case, this is straightforward. This approach has the benefit of making the deformation independent of the representation of S so that arbitrary types of input geometry and general surface topology can be handled easily. The first, h, determines the resolution of the deformation field, which is typically in the range of 5% l(S). If we look at this from the local perspective of the elastic regularizer, this means that we would like the deformation to happen along slippable motions rather than orthogonal to them, because this will only change the parametrization, but not the geometric shape. Accordingly, we augment Equation 4 by using an anisotropic error quadric in order to weight deformations. Here, n(x) is a unit surface normal at x ? S, and N h (x) is the Euclidean h-neighborhood of x in S. Intuitively, this can be explained as an average of planar constraints: At each point, the outer products create quadrics that penalize deviations in normal direction only; tangential motions have zero cost. Again, only constants in Equation 9 change, so that only the right-hand side of the linear system needs to be updated. In the discrete case, however, tangential drift is clearly noticeable because we have complex, non-slippable geometry being replicated. We now need to determine whether it contains elements that can be replicated while continuously interfacing with each other and with existing geometry. Second, for every point x ? ?D in S D (T), the corresponding point T(x) ? S D (T ?1 ) must be included in the boundary ?D, and vice versa. We can now integrate the sliding dockers into our deformation framework. Therefore, we augment the distance vectors: Instead of the distances of the squeezed elements, we employ the original distance vectors. The elastic deformation model will aim at undoing the deformation, but the subspace model cannot represent high frequency details, which implies that visible artifacts at the boundaries can remain. In order to avoid this problem, we need to make sure that the new base shape that we create is actually smooth and the deformation is low frequency. This function can be integrated analytically (to obtain the positions, rather than their derivatives) and inverted so that we can compute the inner stretch s that makes all instances fit into the placeholder. In the latter example, the temple roof is not partially symmetric under transformation T and thus no docking sites can be detected, as shown in Figure 8(b) .",
  "resources" : [ ]
}