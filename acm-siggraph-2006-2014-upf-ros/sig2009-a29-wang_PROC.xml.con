{
  "uri" : "sig2009-a29-wang_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2009/a29-wang_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Kernel Nystr?m Method for Light Transport",
    "published" : null,
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ ]
  },
  "bagOfWords" : [ "we", "implement", "we", "kernel", "nystr?m", "method", "pc", "Intel", "Core", "TM", "duo", "3.2", "GHz", "CPU", "4gb", "memory", "we", "implementation", "we", "capture", "batch", "10", "row", "10", "column", "each", "adaptive", "capture", "step", "experimentally", "set", "threshold", "0.05", "typical", "acquisition", "session", "-lrb-", "include", "image", "acquisition", "hdr", "reconstruction", "kernel", "estimation", "-rrb-", "take", "about", "135", "minute", "capture", "150", "row", "150", "column", "from", "scene", "image", "resolution", "1752", "1168", "while", "light", "sampling", "resolution", "1024", "768", "reconstruct", "light", "transport", "matrix", "relighting", "we", "store", "sample", "matrix", "-lrb-", "-rrb-", "memory", "reconstruct", "all", "row", "matrix", "during", "render", "150", "row", "150", "column", "we", "kernel", "nystr?m", "method", "take", "less", "than", "minute", "estimate", "kernel", "reconstruct", "all", "row", "light", "transport", "matrix", "scene", "sample", "do", "fit", "memory", "we", "store", "one", "matrix", "-lrb-", "we", "implementation", "-rrb-", "disk", "other", "matrix", "memory", "out-of-core", "implementation", "which", "dominate", "disk", "i/o", "take", "about", "30", "minute", "reconstruction", "we", "test", "we", "method", "variety", "scene", "exhibit", "different", "light", "transport", "effect", "illustrate", "Figure", "caustic", "scene", "include", "set", "transparent", "object", "where", "light", "transport", "dominate", "caustic", "create", "light", "refraction", "shadow", "scene", "fine", "geometry", "dragon", "model", "result", "complex", "occlusion", "produce", "detailed", "shadow", "interreflection", "scene", "design", "illustrate", "strong", "inter-reflection", "between", "different", "object", "color", "bleeding", "effect", "general", "scene", "object", "different", "material", "property", "place", "together", "present", "mixture", "different", "light", "transport", "effect", "include", "reflection", "refraction", "shadow", "inter-reflection", "subsurface", "scattering", "caustic", "light", "transport", "kernel", "coefficient", "sample", "number", "use", "reconstruction", "each", "scene", "note", "figure", "we", "validate", "kernel", "nystr?m", "method", "light", "transport", "matrix", "acquire", "from", "general", "scene", "shadow", "scene", "which", "light", "source", "sample", "regular", "35", "35", "grid", "diffuser", "we", "choose", "two", "scene", "validation", "because", "general", "scene", "include", "mixture", "different", "kind", "light", "transport", "while", "shadow", "scene", "require", "large", "number", "sample", "reconstruction", "we", "simulate", "adaptive", "sampling", "scheme", "each", "scene", "each", "iteration", "we", "randomly", "pick", "10", "row", "10", "column", "sample", "set", "from", "acquire", "full", "matrix", "add", "they", "sparse", "sample", "set", "after", "we", "estimate", "light", "transport", "kernel", "compute", "rank", "kernel", "map", "matrix", "-lrb-", "-rrb-", "sparse", "sample", "rank", "matrix", "determine", "number", "eigenvalue", "matrix", "can", "preserve", "95.0", "energy", "original", "matrix", "we", "also", "reconstruct", "light", "transport", "matrix", "from", "sparse", "sample", "set", "via", "kernel", "nystr?m", "method", "we", "repeat", "process", "until", "number", "sparse", "sample", "achieve", "300", "which", "more", "than", "number", "sparse", "sample", "determine", "adaptive", "sampling", "scheme", "pre-defined", "Figure", "show", "plot", "rank", "kernel", "map", "matrix", "-lrb-", "-rrb-", "sparse", "sample", "set", "different", "number", "sample", "where", "number", "sparse", "sample", "determine", "adaptive", "sampling", "scheme", "mark", "orange", "line", "blue", "line", "indicate", "rank", "kernel", "map", "matrix", "-lrb-", "-rrb-", "which", "kernel", "function", "estimate", "from", "sparse", "sample", "set", "sample", "both", "scene", "rank", "-lrb-", "-rrb-", "sparse", "sample", "grow", "number", "sample", "increase", "close", "-lrb-", "-rrb-", "number", "sample", "close", "which", "lead", "good", "reconstruction", "Figure", "show", "plot", "relative", "error", "light", "transport", "matrix", "reconstruct", "from", "different", "number", "sample", "where", "relative", "reconstruction", "error", "compute", "here", "ground", "truth", "submatrix", "element", "sparse", "sample", "set", "same", "submatrix", "element", "reconstruct", "use", "kernel", "nystr?m", "method", "further", "explore", "impact", "different", "sample", "set", "reconstruction", "quality", "we", "execute", "above", "experiment", "16", "time", "each", "time", "different", "row", "column", "randomly", "select", "from", "matrix", "show", "Figure", "relative", "error", "decrease", "quickly", "number", "sparse", "sample", "increase", "same", "number", "sparse", "sample", "we", "use", "we", "capture", "relative", "error", "reconstructed", "light", "transport", "matrix", "below", "also", "note", "variance", "error", "under", "same", "number", "sample", "reduce", "quickly", "increase", "number", "sample", "which", "guarantee", "quality", "light", "transport", "matrix", "reconstruct", "from", "random", "sample", "row", "column", "Figure", "compare", "performance", "nystr?m", "method", "kernel", "nystr?m", "method", "general", "scene", "each", "sparse", "sample", "set", "we", "reconstruct", "light", "transport", "matrix", "use", "both", "nystr?m", "method", "kernel", "nystr?m", "method", "relative", "error", "show", "Figure", "-lrb-", "-rrb-", "without", "kernel", "extension", "nystr?m", "method", "require", "roughly", "five", "six", "time", "number", "sample", "achieve", "same", "reconstruction", "quality", "kernel", "nystr?m", "method", "do", "Figure", "-lrb-", "-rrb-", "show", "visual", "comparison", "where", "same", "number", "sample", "use", "both", "method", "reconstruction", "artifact", "result", "generate", "nystr?m", "method", "clearly", "visible", "Figure", "10", "compare", "performance", "kernel", "nystr?m", "method", "different", "light", "transport", "kernel", "-lrb-", "i.e.", "different", "value", "-rrb-", "shadow", "scene", "each", "value", "we", "reconstruct", "light", "transport", "matrix", "from", "same", "set", "sparse", "sample", "-lrb-", "250", "sample", "-rrb-", "kernel", "nystr?m", "method", "Figure", "10", "-lrb-", "-rrb-", "show", "plot", "objective", "function", "-lrb-", "-rrb-", "relative", "error", "reconstructed", "light", "transport", "matrix", "function", "note", "relative", "reconstruction", "error", "minimal", "when", "optimal", "value", "derive", "we", "approach", "use", "reconstruction", "also", "light", "transport", "matrix", "well", "reconstruct", "kernel", "nystr?m", "method", "use", "optimal", "value", "however", "light", "transport", "matrix", "reconstruct", "kernel", "nystr?m", "method", "use", "other", "value", "exhibit", "larger", "relative", "error", "visible", "artifact", "show", "Figure", "10", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "large", "value", "lead", "visible", "artifact", "concentrate", "region", "high", "frequency", "feature", "while", "small", "value", "result", "noise", "like", "artifact", "scatter", "across", "entire", "result", "image", "Figure", "12", "compare", "image", "render", "use", "reconstructed", "light", "transport", "matrix", "ground", "truth", "image", "show", "illumination", "under", "single", "point", "light", "consider", "during", "reconstruction", "process", "rendering", "result", "generate", "from", "recon", "structed", "light", "transport", "matrix", "visually", "indistinguishable", "from", "ground", "truth", "image", "we", "use", "reconstructed", "light", "transport", "matrix", "image-based", "relighting", "Figure", "13", "exhibit", "several", "result", "render", "different", "lighting", "condition", "note", "complex", "light", "transport", "effect", "faithfully", "reproduce", "provide", "realistic", "result", "see", "companion", "video", "relight", "result", "under", "dynamic", "lighting", "we", "also", "apply", "kernel", "nystr?m", "method", "modeling", "light", "transport", "due", "subsurface", "scattering", "light", "transport", "matrix", "case", "symmetric", "matrix", "each", "element", "which", "describe", "diffuse", "bssrdf", "between", "two", "surface", "point", "-lrb-", "-rrb-", "-lsb-", "Goesele", "et", "al.", "2004", "-rsb-", "since", "matrix", "symmetrical", "we", "only", "need", "sample", "column", "reconstruction", "we", "implementation", "we", "use", "device", "setup", "similar", "one", "use", "-lsb-", "Goesele", "et", "al.", "2004", "-rsb-", "capture", "three", "laser", "emitter", "close", "each", "other", "shoot", "three", "color", "beam", "point", "over", "object", "surface", "we", "control", "laser", "beam", "make", "sure", "focus", "same", "surface", "point", "hdr", "image", "object", "surface", "capture", "from", "fix", "viewpoint", "we", "repeat", "process", "shoot", "laser", "beam", "random", "set", "surface", "point", "calibrate", "camera", "position", "known", "geometry", "object", "we", "map", "image", "pixel", "onto", "object", "surface", "Figure", "11", "-lrb-", "-rrb-", "show", "image", "marble", "use", "we", "experiment", "50", "sample", "image", "we", "reconstruct", "light", "transport", "matrix", "subsurface", "scattering", "use", "kernel", "nystr?m", "method", "coefficient", "light", "transport", "kernel", "use", "reconstruction", "0.0625", "resolution", "surface", "point", "light", "transport", "matrix", "same", "image", "resolution", "Figure", "11", "compare", "render", "result", "reconstructed", "light", "transport", "matrix", "ground", "truth", "image", "capture", "from", "object", "under", "same", "lighting", "condition", "result", "render", "directly", "interpolate", "nearby", "sample", "image", "note", "detailed", "spatial", "pattern", "anisotropic", "subsurface", "scattering", "real", "material", "well", "preserve", "reconstructed", "light", "transport", "matrix", "while", "result", "generate", "interpolation", "clearly", "exhibit", "artifact", "also", "note", "capture", "light", "transport", "effect", "similar", "resolution", "brute", "force", "method", "-lsb-", "Goesele", "et", "al.", "2004", "Peers", "et", "al.", "2006", "-rsb-", "need", "dense", "light", "sampling", "which", "prohibitively", "expensive", "time", "consuming", "we", "show", "relight", "result", "reconstructed", "light", "transport", "matrix", "companion", "video", "light", "transport", "matrix", "scene", "exhibit", "both", "datum", "coherence", "sparsity", "while", "sparsity", "base", "approach", "exploit", "datum", "sparsity", "capture", "light", "transport", "matrix", "kernel", "nystr?m", "method", "exploit", "coherence", "both", "row", "column", "light", "transport", "matrix", "same", "task", "scene", "low", "frequency", "light", "transport", "effect", "inter-reflection", "subsurface", "scattering", "glossy", "shading", "light", "transport", "matrix", "always", "exhibit", "strong", "coherence", "both", "row", "column", "which", "can", "efficiently", "reconstruct", "use", "kernel", "nystr?m", "method", "dozen", "image", "scene", "include", "more", "sharp", "light", "transport", "variation", "occlusion", "specular", "reflection", "refraction", "coherence", "column", "vector", "may", "reduce", "exploit", "coherence", "row", "vector", "kernel", "nystr?m", "method", "can", "still", "achieve", "good", "result", "hundred", "image", "sample", "both", "case", "kernel", "nystr?m", "method", "require", "much", "less", "image", "than", "sparsity", "base", "method", "comparison", "we", "project", "light", "transport", "matrix", "general", "scene", "shadow", "scene", "onto", "Haar", "wavelet", "basis", "each", "case", "reconstruct", "entire", "matrix", "similar", "relative", "error", "we", "need", "retain", "thousand", "wavelet", "coefficient", "which", "mean", "more", "than", "thousand", "image", "require", "reconstruct", "matrix", "sparsity", "base", "method", "extreme", "case", "where", "light", "transport", "matrix", "exhibit", "little", "coherence", "both", "row", "column", "kernel", "nystr?m", "method", "would", "need", "all", "row", "column", "matrix", "good", "reconstruction", "case", "we", "approach", "have", "advantage", "over", "brute", "force", "method", "sparsity", "base", "method", "example", "scene", "mirror", "ball", "where", "light", "transport", "matrix", "exhibit", "good", "sparsity", "little", "coherence", "scenario", "sparsity", "base", "approach", "may", "provide", "good", "solution", "we", "have", "present", "kernel", "nystr?m", "method", "reconstruct", "light", "transport", "matrix", "from", "relatively", "small", "number", "acquire", "modeling", "subsurface", "light", "transport", "kernel", "nystr?m", "method", "-lrb-", "-rrb-", "image", "marble", "light", "laser", "beam", "one", "point", "-lrb-", "-rrb-", "image", "render", "reconstructed", "light", "transport", "matrix", "light", "same", "point", "-lrb-", "-rrb-", "difference", "between", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "intensity", "which", "scale", "10", "-lrb-", "-rrb-", "Photograph", "flat", "marble", "sample", "-lrb-", "-rrb-", "image", "render", "interpolate", "nearby", "sample", "image", "-lrb-", "-rrb-", "difference", "between", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "intensity", "which", "scale", "10", "while", "exist", "technique", "typically", "require", "ten", "thousand", "image", "accurate", "reconstruction", "light", "transport", "matrix", "kernel", "nystr?m", "method", "can", "achieve", "good", "reconstruction", "few", "hundred", "image", "produce", "high", "quality", "relighting", "result", "kernel", "nystr?m", "method", "able", "capture", "complex", "lighting", "effect", "occlusion", "which", "particularly", "challenge", "many", "exist", "technique", "especially", "various", "sparsity-based", "method", "effectiveness", "kernel", "nystr?m", "method", "come", "from", "its", "ability", "exploit", "both", "linear", "nonlinear", "coherence", "light", "transport", "matrix", "from", "relatively", "small", "number", "row", "column", "matrix", "future", "work", "we", "interested", "investigate", "better", "kernel", "estimation", "method", "design", "new", "kernel", "function", "light", "transport", "matrix", "reconstruction", "we", "also", "plan", "apply", "kernel", "nystr?m", "method", "model", "surface", "reflectance", "finally", "we", "want", "explore", "way", "extend", "kernel", "nystr?m", "method", "handle", "highdimensional", "tensor", "datum" ],
  "content" : "We implemented our kernel Nystr?m method on a PC with Intel Core TM 2 Duo 3.2GHz CPU and 4GB of memory. In our implementation, we capture a batch of 10 rows and 10 columns in each adaptive capture step and experimentally set the threshold as ? = 0.05. A typical acquisition session (including image acquisition, HDR reconstruction, and kernel estimation) takes about 135 minutes for capturing 150 rows and 150 columns from the scene. The image  resolution is 1752 ? 1168, while the light sampling resolution is 1024 ? 768. To reconstruct the light transport matrix for relighting, we store the sampled matrices (C, R, A and A + ) in memory and reconstruct all rows of the matrix during rendering. With 150 rows and 150 columns, our kernel Nystr?m method takes less than 5 minutes to estimate the kernel and reconstruct all rows of the light transport matrix of the scene. For samples that do not fit in memory, we store one matrix (C in our implementation) on disk and the other matrices in memory. An out-of-core implementation, which is dominated by the disk I/O, then takes about 30 minutes for reconstruction. We tested our method on a variety of scenes exhibiting different light transport effects. As illustrated in Figure 6 , the caustics scene includes a set of transparent objects, where the light transport is dominated by caustics created by light refraction. In the shadow scene, the fine geometry of the dragon model results in complex occlusion and produces detailed shadows. The interreflection scene is designed to illustrate the strong inter-reflections between different objects and the color bleeding effects. In the general scene, objects with different material properties are placed together and present a mixture of different light transport effects, including reflection, refraction, shadows, and inter-reflections, subsurface scattering, and caustics. The light transport kernel coefficient and the sample number used in reconstruction for each scene are noted in the figure. We validate the kernel Nystr?m method with the light transport matrices acquired from the general scene and the shadow scene, in which the light sources are sampled on regular 35 ? 35 grids on the diffuser. We choose these two scenes for validation because the general scene includes a mixture of different kinds of light transport, while the shadow scene requires a large number of samples for reconstruction. We simulate the adaptive sampling scheme for each scene. In each iteration, we randomly pick 10 rows and 10 columns that are not in the sample set from the acquired full matrix and add them in the sparse sample set. After that, we estimate the light transport kernel f and compute the rank of the kernel mapped matrix f (A) of the sparse samples. The rank of a matrix is determined by the number of eigenvalues of the matrix that can preserve 95.0% energy of the original matrix. We also reconstruct the light transport matrix from the sparse sample set via the kernel  Nystr?m method. We repeat this process until the number of sparse samples achieves 300, which is more than the number of sparse samples n s determined by the adaptive sampling scheme with the pre-defined ? . Figure 7 shows plots of the ranks of kernel mapped matrices f (A) of sparse sample sets with a different number of samples, where the number of sparse samples n s determined by the adaptive sampling scheme is marked by an orange line. The blue line indicates the rank of the kernel mapped matrix f (T), in which the kernel function is estimated from the sparse sample set with n s samples. For both scenes, the ranks of f (A) of sparse samples grow as the number of samples increases and are close to the f (T) as the number of samples is close to n s , which leads to a good reconstruction. Figure 8 shows plots of the relative errors of the light transport matrices reconstructed from a different number of samples, where the relative reconstruction error is computed as Here B i, j is the ground truth submatrix element that is not in the sparse sample set and B  ? i, j is the same submatrix element reconstructed using the kernel Nystr?m method. To further explore the impact of different sample sets to the reconstruction quality, we execute the above experiment 16 times, each time with different rows and columns randomly selected from the matrix. As shown in Figure 8, the relative error decreases quickly as the number of sparse samples increases. With the same number of sparse samples as we used in our capturing, the relative error of the reconstructed light transport matrix is below 5%. Also note that the variance of the error under the same number of samples reduces quickly with the  increasing number of samples, which guarantees the quality of the light transport matrix reconstructed from the random sampled rows and columns. Figure 9 compares the performance of the Nystr?m method and the kernel Nystr?m method for the general scene. For each sparse sample set, we reconstruct the light transport matrices using both the Nystr?m method and the kernel Nystr?m method. Their relative errors are shown in Figure 9 (a). Without the kernel extension, the Nystr?m method requires roughly five to six times the number of samples to achieve the same reconstruction quality as the kernel Nystr?m method does. Figure 9 (b) shows a visual comparison, where the same number of samples are used in both methods for reconstruction. The artifacts in the results generated with the Nystr?m method are clearly visible. Figure 10 compares the performance of the kernel Nystr?m method with different light transport kernels (i.e., different ? values) for the shadow scene. For each ? value, we reconstruct the light transport matrix from the same set of sparse samples (250 samples) with the kernel Nystr?m method. Figure 10(a) shows plots of the objective function g( ? ) and the relative error of the reconstructed light transport matrices as a function of ? . Note that the relative reconstruction error is minimal when the optimal ? value derived by our approach is used for reconstruction. Also, the light transport matrix is well reconstructed by the kernel Nystr?m method using the optimal ? value. However, the light transport matrices reconstructed with the kernel Nystr?m method using other ? values exhibit larger relative errors and visible artifacts. As shown in Figure 10(e) (g), the large ? value leads to visible artifacts concentrated in the region with high frequency features, while the small ? value results in the noise like artifacts scattered across the entire result image. Figure 12 compares images rendered using the reconstructed light transport matrix to ground truth images showing illumination under a single point light that was not considered during the reconstruction process. The rendering results generated from the recon- structed light transport matrix are visually indistinguishable from the ground truth images. We used the reconstructed light transport matrix for image-based relighting. Figure 13 exhibits several results rendered with different lighting conditions. Note that complex light transport effects are faithfully reproduced, providing realistic results. See the companion video for relighting results under dynamic lighting. We also applied the kernel Nystr?m method for modeling the light transport due to subsurface scattering. The light transport matrix in this case is an n ? n symmetric matrix, each element of which describes the diffuse BSSRDF R d between the two surface points x i and x j as T i j = R d (x i , x j ) [Goesele et al. 2004]. Since this matrix is symmetrical, we only need to sample the columns for reconstruction. In our implementation, we use a device setup similar to the one used in [Goesele et al. 2004] for capturing. The three laser emitters are close to each other and shoot three color beams to points over the object surface. We control the laser beams to make sure that they focus on the same surface point. HDR images of the object surface are captured from a fixed viewpoint. We repeat this process by shooting the laser beams to a random set of surface points. With the calibrated camera position and known geometry of the object, we map the image pixels onto the object surface. Figure 11(d) shows an image of the marble used in our experiments. With 50 sampled images, we reconstruct the light transport matrix of subsurface scattering using the kernel Nystr?m method. The coefficient of the light transport kernel used in reconstruction is ? = 0.0625. The resolution of surface points in the light transport matrix is the same as the image resolution. Figure 11 compares the rendering result of the reconstructed light transport matrix, the ground truth image captured from the object under the same lighting condition, and the result rendered by directly interpolating the nearby sample images. Note that the detailed spatial patterns and anisotropic subsurface scattering in the real material are well preserved with the reconstructed light transport matrix, while the results generated by interpolation clearly exhibit artifacts. Also note that to capture the light transport effects with a similar resolution, brute force methods [Goesele et al. 2004; Peers et al. 2006] need dense light sampling, which is prohibitively expensive and time consuming. We show relighting results of the reconstructed light transport matrix in the companion video. The light transport matrix of a scene exhibits both data coherence and sparsity. While the sparsity based approaches exploit the data sparsity for capturing the light transport matrix, the kernel Nystr?m method exploits the coherence in both rows and columns of the light transport matrix for the same task. For scenes with low frequency light transport effects, such as inter-reflections, subsurface scattering and glossy shading, their light transport matrices always exhibit strong coherence in both rows and columns, which can be efficiently reconstructed using the kernel Nystr?m method with dozens of images. In a scene that includes more sharp light transport variations, such as occlusions, specular reflections and refractions, the coherence in the column vectors may be reduced. By exploiting the coherence in the row vectors, the kernel Nystr?m method can still achieve good results with hundreds of image samples. In both cases, the kernel Nystr?m methods require much less images than the sparsity based methods. For comparison, we project the light transport matrices of the general scene and  the shadow scene onto the Haar wavelet basis. In each case, for reconstructing the entire matrix with the similar 5% relative error, we need to retain thousands of wavelet coefficients, which means that more than thousands of images are required for reconstructing the matrix with the sparsity based methods. In the extreme cases where the light transport matrix exhibits little coherence in both rows and columns, the kernel Nystr?m method would need all rows and columns of the matrix for good reconstruction. In this case, our approach has no advantage over the brute force methods and the sparsity based methods. An example is a scene of a mirror ball, where the light transport matrix exhibits good sparsity but little coherence. In this scenario, the sparsity based approaches may provide a good solution. We have presented the kernel Nystr?m method for reconstructing the light transport matrix from a relatively small number of acquired Modeling subsurface light transport with the kernel Nystr?m method. (a) The image of marble lit by laser beam at one point. (b) Image rendered with reconstructed light transport matrix with light on the same point. (c)The difference between (a) and (b), intensity of which is scaled by 10. (d) Photograph of the flat marble sample. (e) Image rendered by interpolating the nearby sample images. (f) The difference between (a) and (e), intensity of which is scaled by 10. While existing techniques typically require tens of thousands of images for accurate reconstruction of a light transport matrix, the kernel Nystr?m method can achieve a good reconstruction with a few hundred images and produces high quality relighting results. The kernel Nystr?m method is able to capture complex lighting effects and occlusions which are particularly challenging for many existing techniques, especially various sparsity-based methods. The effectiveness of the kernel Nystr?m method comes from its ability to exploit both the linear and nonlinear coherence in the light transport matrix from a relatively small number of rows and columns of the matrix. In future work, we are interested in investigating better kernel estimation methods and designing new kernel functions for light transport matrix reconstruction. We also plan to apply the kernel Nystr?m method to model surface reflectance. Finally, we want to explore ways to extend the kernel Nystr?m method to handle highdimensional tensor data.",
  "resources" : [ ]
}