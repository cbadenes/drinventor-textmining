{
  "uri" : "sig2011a-a123-bokeloh_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2011a/a123-bokeloh_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Pattern-Aware Shape Deformation Using Sliding Dockers",
    "published" : "2011",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Martin-Bokeloh",
      "name" : "Martin",
      "surname" : "Bokeloh"
    }, {
      "uri" : "http://drinventor/Michael-Wand",
      "name" : "Michael",
      "surname" : "Wand"
    }, {
      "uri" : "http://drinventor/Vladlen-Koltun",
      "name" : "Vladlen",
      "surname" : "Koltun"
    }, {
      "uri" : "http://drinventor/Hans-Peter-Seidel",
      "name" : "Hans-Peter",
      "surname" : "Seidel"
    } ]
  },
  "bagOfWords" : [ "1c4a305dae456ca044dc6eb2472759604105fad0fc497785042b4ce02e6d3ed6", "p29", "10.1145", "2024156.2024157", "name", "identification", "possible", "Pattern-Aware", "shape", "Deformation", "use", "slide", "Dockers", "Martin", "Bokeloh", "Michael", "Wand", "MPI", "Informatik", "Saarland", "University", "MPI", "Informatik", "Figure", "edit", "example", "-lrb-", "leave", "right", "-rrb-", "user", "place", "constraint", "-lrb-", "blue", "-rrb-", "manipulate", "object", "move", "constraint", "we", "deformation", "model", "maintain", "continuous", "discrete", "pattern", "adapt", "repetition", "count", "discrete", "pattern", "insert", "delete", "element", "need", "minimize", "distortion", "discrete", "change", "highlight", "orange", "paper", "introduce", "new", "structure-aware", "shape", "deformation", "technique", "key", "idea", "detect", "continuous", "discrete", "regular", "pattern", "ensure", "pattern", "preserve", "during", "freeform", "deformation", "we", "propose", "variational", "deformation", "model", "preserve", "structure", "discrete", "algorithm", "adaptively", "insert", "remove", "repeated", "element", "regular", "pattern", "minimize", "distortion", "tool", "structural", "adaptation", "we", "introduce", "slide", "docker", "which", "represent", "repeatable", "element", "fit", "together", "seamlessly", "arbitrary", "repetition", "count", "we", "demonstrate", "present", "approach", "number", "complex", "3d", "model", "from", "commercial", "shape", "library", "cr", "category", "i.", "3.5", "-lsb-", "Computing", "Methodologies", "-rsb-", "Computer", "Graphics?Computational", "Geometry", "Object", "Modeling", "Keywords", "shape", "deformation", "shape", "analysis", "symmetry", "structural", "regularity", "Links", "dl", "pdf", "introduction", "content", "creation", "one", "main", "bottleneck", "contemporary", "computer", "graphic", "while", "sophisticated", "method", "processing", "render", "three-dimensional", "content", "widely", "available", "creation", "detailed", "custom", "3d", "geometry", "still", "require", "significant", "expertise", "issue", "merely", "creative", "ability", "also", "process", "directly", "manipulate", "detailed", "3d", "model", "e-mail", "-lcb-", "mbokeloh", "mwand", "hpseidel", "-rcb-", "@mpi", "inf.mpg.de", "e-mail", "vladlen@stanford.edu", "ACM", "Reference", "Format", "Bokeloh", "M.", "Wand", "M.", "Koltun", "V.", "Seidel", "H.", "2011", "Pattern-Aware", "shape", "Deformation", "use", "slide", "Dockers", "ACM", "Trans", "graph", "30", "Article", "123", "-lrb-", "December", "2011", "-rrb-", "10", "page", "dous", "10.1145", "2024156.2024157", "http://doi.acm.org/10.1145/2024156.2024157", "copyright", "Notice", "permission", "make", "digital", "hard", "copy", "part", "all", "work", "personal", "classroom", "use", "grant", "without", "fee", "provide", "copy", "make", "distribute", "profit", "direct", "commercial", "advantage", "copy", "show", "notice", "fus", "rst", "page", "initial", "screen", "display", "along", "full", "citation", "copyright", "component", "work", "own", "other", "than", "ACM", "must", "honor", "abstract", "credit", "permit", "copy", "otherwise", "republish", "post", "server", "redistribute", "list", "use", "any", "component", "work", "other", "work", "require", "prior", "specific", "permission", "and/or", "fee", "permission", "may", "request", "from", "Publications", "Dept.", "ACM", "Inc.", "Penn", "Plaza", "Suite", "701", "New", "York", "NY", "10121-0701", "fax", "+1", "-lrb-212-rrb-Â 869-0481", "permissions@acm.org", "2011", "ACM", "0730-0301/2011", "12-art123", "10.00", "DOI", "10.1145", "2024156.2024157", "http://doi.acm.org/10.1145/2024156.2024157", "Vladlen", "Koltun", "Hans-Peter", "Seidel", "Stanford", "University", "MPI", "Informatik", "3d", "model", "often", "feature", "structural", "relationship", "multiple", "scale", "which", "need", "manually", "restore", "whenever", "significant", "manipulation", "perform", "model", "tedious", "adjustment", "often", "require", "multiple", "time", "single", "modeling", "session", "consequently", "recent", "research", "have", "begin", "investigate", "structureaware", "shape", "editing", "tool", "aim", "automate", "detailed", "manipulation", "require", "preserve", "structural", "relationship", "shape", "undergo", "manipulation", "-lsb-", "Kraevoy", "et", "al.", "2008", "Gal", "et", "al.", "2009", "Huang", "et", "al.", "2009", "Wang", "et", "al.", "2011", "Zheng", "et", "al.", "2011", "-rsb-", "algorithm", "analyze", "input", "shape", "extract", "structural", "feature", "use", "learn", "structure", "assist", "interactive", "3d", "modeling", "can", "improve", "efficiency", "content", "creation", "professional", "can", "assist", "inexperienced", "user", "adapt", "exist", "content", "need", "paper", "we", "present", "structure-aware", "shape", "editing", "technique", "detect", "discrete", "continuous", "pattern", "shape", "preserve", "pattern", "under", "free-form", "deformation", "key", "distinguish", "feature", "we", "approach", "can", "change", "structure", "object", "add", "remove", "local", "element", "along", "regular", "pattern", "structural", "adaptation", "integrate", "global", "freeform", "deformation", "framework", "minimize", "overall", "stretch", "object", "we", "approach", "user", "specify", "small", "set", "constraint", "system", "compute", "new", "shape", "meet", "constraint", "while", "preserve", "structural", "property", "original", "model", "show", "Figure", "invariant", "we", "extract", "1-parameter", "group", "partial", "symmetry", "other", "word", "we", "detect", "geometry", "replicate", "regular", "pattern", "include", "continuous", "symmetry", "straight", "line", "well", "repeat", "discrete", "element", "window", "building", "we", "formulate", "non-local", "rigidity", "constraint", "maintain", "symmetry", "property", "output", "allow", "adapt", "number", "discrete", "repetition", "order", "reduce", "distortion", "order", "add", "remove", "element", "along", "discrete", "pattern", "minimal", "distortion", "we", "introduce", "slide", "docker", "slide", "docker", "element", "local", "repeated", "structure", "interface", "rest", "model", "way", "structure", "can", "independently", "replicate", "minimal", "distortion", "we", "develop", "algorithm", "automatically", "find", "collection", "slide", "docker", "repeat", "one", "common", "translational", "direction", "adapt", "replication", "count", "way", "minimize", "distortion", "overall", "object", "we", "evaluate", "present", "technique", "model", "take", "from", "commercial", "3d", "model", "library", "demonstrate", "present", "tech", "nique", "able", "naturally", "adapt", "discrete", "structure", "regular", "pattern", "object", "response", "free-form", "manipulation", "summary", "work", "make", "follow", "key", "contribution", "we", "develop", "new", "deformation", "model", "formulate", "term", "regular", "pattern", "shape", "we", "introduce", "concept", "slide", "docker", "analyze", "partial", "regularity", "allow", "first", "time", "automatically", "insert", "delete", "repetitive", "element", "within", "free-form", "shape", "deformation", "tool", "we", "develop", "robust", "efficient", "numerical", "framework", "implement", "technique", "real-time", "shape", "editing", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "123", "publication", "date", "December", "2011", "123:2", "M.", "Bokeloh", "et", "al.", "-lrb-", "-rrb-", "input", "object", "-lrb-", "-rrb-", "elastic", "deformation", "figure", "overview", "we", "approach", "give", "input", "shape", "-lrb-", "-rrb-", "free-form", "deformation", "apply", "user", "-lrb-", "-rrb-", "we", "deformation", "model", "preserve", "continuous", "pattern", "shape", "-lrb-", "-rrb-", "adapt", "repetition", "count", "discrete", "pattern", "minimize", "distortion", "-lrb-", "-rrb-", "related", "work", "we", "approach", "user", "interact", "3d", "shape", "free-form", "deformation", "system", "which", "have", "long", "tradition", "computer", "graphic", "early", "technique", "use", "smooth", "basis", "function", "interpolation", "-lsb-", "sederberg", "Parry", "1986", "Coquillart", "1990", "-rsb-", "recent", "work", "construct", "basis", "specific", "set", "control", "point", "control", "cage", "-lsb-", "ju", "et", "al.", "2005", "Joshi", "et", "al.", "2007", "Lipman", "et", "al.", "2008", "Ben-Chen", "et", "al.", "2009", "-rsb-", "many", "technique", "base", "variational", "calculus", "local", "regularizer", "trade", "off", "against", "user?s", "constraint", "regularizer", "aim", "maintain", "local", "similarity", "input", "elastic", "deformation", "model", "-lsb-", "terzopoulo", "et", "al.", "1987", "-rsb-", "which", "minimize", "non-rigidity", "deformation", "particularly", "popular", "-lsb-", "Botsch", "Sorkine", "2008", "-rsb-", "variant", "include", "volume", "preservation", "-lsb-", "von", "Funck", "et", "al.", "2006", "-rsb-", "similarity", "transform", "-lsb-", "Liu", "et", "al.", "2008", "-rsb-", "thinplate", "spline", "-lsb-", "Allen", "et", "al.", "2003", "-rsb-", "we", "use", "elastic", "deformation", "base", "regularizer", "diffuse", "stretch", "preserve", "geometry", "which", "structural", "information", "could", "infer", "we", "implementation", "adopt", "technique", "sorkine", "alexa", "-lsb-", "2007", "-rsb-", "preserve", "co-rotated", "distance", "vector", "least-squares", "sense", "we", "extend", "volumetric", "subspace", "formulation", "-lsb-", "Zhou", "et", "al.", "2005", "Huang", "et", "al.", "2006", "Sumner", "et", "al.", "2007", "Adams", "et", "al.", "2008", "-rsb-", "allow", "interactive", "handling", "large", "mesh", "provide", "robustness", "against", "unfavorable", "mesh", "topology", "so", "we", "can", "handle", "triangle", "soup", "local", "regularizer", "do", "recognize", "higher-level", "structural", "property", "shape", "consequently", "technique", "still", "expose", "large", "number", "degree", "freedom", "user", "who", "have", "manually", "ensure", "important", "structural", "property", "maintain", "acceptable", "many", "organic", "shape", "creature", "highly", "structure", "object", "many", "man-made", "object", "difficult", "handle", "Kraevoy", "et", "al.", "-lsb-", "2008", "-rsb-", "use", "elastic-type", "model", "adapt", "vulnerability", "local", "content", "three", "global", "stretch", "axis", "fix", "which", "avoid", "bend", "artifact", "also", "limit", "applicability", "technique", "axis-aligned", "stretch", "continuous", "part", "we", "deformation", "model", "could", "regard", "extension", "approach", "major", "difference", "we", "determine", "local", "stretch", "direction", "automatically", "base", "continuous", "pattern", "rather", "than", "fix", "they", "global", "coordinate", "system", "Xu", "et", "al.", "-lsb-", "2009", "-rsb-", "introduce", "slippage", "analysis", "free-form", "shape", "de", "formation", "use", "construct", "joint-aware", "deformation", "model", "we", "also", "use", "slippage", "analysis", "employ", "discover", "continuous", "symmetry", "use", "maintain", "pattern", "structure", "input", "influential", "iwire", "system", "-lsb-", "Gal", "et", "al.", "2009", "-rsb-", "maintain", "global", "structural", "property", "shape", "build", "constraint", "preserve", "similarity", "symmetric", "part", "-lsb-", "Mitra", "et", "al.", "2006", "Podolak", "et", "al.", "2006", "Simari", "et", "al.", "2006", "-rsb-", "well", "parallelity", "orthogonality", "salient", "feature", "line", "Huang", "et", "al.", "-lsb-", "2009", "-rsb-", "apply", "similar", "idea", "2d", "vector", "graphic", "Zheng", "et", "al.", "-lsb-", "2011", "-rsb-", "propagate", "editing", "operation", "base", "similarity", "component", "use", "global", "knowledge", "greatly", "facilitate", "shape", "editing", "key", "limitation", "remain", "deformation", "function", "still", "continuous", "bijective", "map", "between", "input", "output", "do", "allow", "insertion", "removal", "element", "which", "can", "desirable", "response", "significant", "stretch", "issue", "main", "motivation", "we", "work", "further", "contribution", "we", "work", "base", "single", "low-level", "assumption", "preserve", "partial", "1-parameter", "symmetry", "group", "rather", "than", "complex", "set", "rule", "number", "approach", "have", "be", "develop", "recombine", "shape", "out", "part", "approach", "utilize", "manual", "part", "composition", "have", "be", "describe", "-lsb-", "Funkhouser", "et", "al.", "2004", "Pauly", "et", "al.", "2005", "Kraevoy", "et", "al.", "2007", "-rsb-", "well", "automatic", "method", "detect", "structural", "regularity", "-lsb-", "Pauly", "et", "al.", "2008", "-rsb-", "recently", "technique", "have", "appear", "compute", "rule", "discrete", "change", "automatically", "-lsb-", "Mitra", "Pauly", "2008", "Bokeloh", "et", "al.", "2010", "-rsb-", "however", "none", "automatic", "technique", "provide", "free-form", "deformation", "editing", "addition", "structural", "relationship", "treat", "previous", "work", "often", "limited", "technique", "-lsb-", "Bokeloh", "et", "al.", "2010", "-rsb-", "can", "detect", "regular", "pattern", "3d", "geometry", "create", "shape", "variation", "insert", "remove", "piece", "detect", "docker", "must", "partition", "model", "globally", "two", "disjoint", "piece", "symmetric", "cut", "technique", "thus", "can", "handle", "3d", "model", "local", "pattern", "do", "globally", "partition", "shape", "we", "extend", "docking", "approach", "Bokeloh", "et", "al.", "-lsb-", "2010", "-rsb-", "introduce", "slide", "docker", "which", "require", "only", "partial", "partitioning", "design", "operate", "part", "structure-aware", "free-form", "deformation", "framework", "recent", "method", "Wang", "et", "al.", "-lsb-", "2011", "-rsb-", "infer", "scene", "graph", "structure", "unannotated", "3d", "mesh", "allow", "both", "continuous", "discrete", "parameter", "variation", "however", "method", "do", "provide", "constraint-based", "free-form", "deformation", "interface", "Wu", "et", "al.", "-lsb-", "2010", "-rsb-", "describe", "image", "resize", "method", "summarize", "symmetry", "structure", "image", "use", "add", "remove", "column", "row", "repeated", "element", "response", "resize", "operation", "method", "tackle", "challenge", "arise", "image", "processing", "perspective", "distortion", "illumination", "change", "we", "work", "focus", "manipulation", "three-dimensional", "geometry", "which", "impose", "challenge", "produce", "seamless", "surface", "after", "add", "remove", "geometric", "element", "deal", "general", "deformation", "multiple", "independent", "resize", "direction", "-lrb-", "-rrb-", "maintain", "continuous", "pattern", "-lrb-", "-rrb-", "discrete", "pattern", "adapt", "repetition", "count", "Overview", "we", "technique", "design", "preserve", "regular", "pattern", "input", "shape", "we", "detect", "pattern", "preprocessing", "step", "describe", "section", "we", "apply", "continuous", "deformation", "model", "try", "maintain", "detect", "structure", "describe", "section", "order", "reduce", "distortion", "we", "automatically", "insert", "delete", "repeated", "element", "use", "slide", "docker", "develop", "section", "section", "we", "give", "brief", "overview", "each", "component", "we", "approach", "component", "illustrate", "figure", "input", "we", "technique", "accept", "general", "triangle", "mesh", "input", "-lrb-", "figure", "2a", "-rrb-", "restriction", "geometry", "topology", "-lrb-", "other", "word", "triangle", "soup", "-rrb-", "addition", "user", "can", "select", "arbitrary", "number", "handle", "can", "move", "rotate", "they", "new", "position", "-lrb-", "interactive", "process", "real-time", "feedback", "system", "-rrb-", "follow", "we", "use", "-lrb-", "-rrb-", "denote", "maximum", "side", "length", "axis", "align", "bound", "box", "value", "use", "scale", "relative", "parameter", "automatically", "deformation", "model", "basis", "we", "technique", "standard", "elastic", "shape", "deformation", "model", "-lsb-", "Terzopoulos", "et", "al.", "1987", "Sorkine", "Alexa", "2007", "-rsb-", "compute", "deformation", "field", "minimize", "deviation", "from", "user?s", "constraint", "try", "keep", "object", "rigid", "possible", "other", "word", "model", "diffuse", "stretch", "-lrb-", "stress", "tensor", "-rrb-", "uniformly", "possible", "across", "object", "surface", "under", "give", "constraint", "-lrb-", "figure", "2b", "-rrb-", "we", "use", "behavior", "base", "regularizer", "low", "weight", "aim", "just", "dissipate", "stretch", "induce", "constraint", "shape", "analysis", "we", "perform", "shape", "analysis", "step", "preprocessing", "order", "identify", "regular", "pattern", "input", "geometry", "we", "model", "regular", "pattern", "one-parameter", "partial", "group", "structure", "symmetry", "structure", "object", "we", "find", "part", "show", "up", "multiple", "time", "replicate", "series", "transformation", "where", "range", "over", "continuous", "integral", "range", "lead", "continuous", "discrete", "pattern", "slide", "docker", "discrete", "pattern", "we", "find", "slide", "docker", "which", "build", "block", "can", "replicate", "when", "object", "locally", "stretch", "slide", "docker", "cut", "out", "input", "surface", "way", "boundary", "fit", "seamlessly", "when", "multiple", "piece", "attach", "each", "other", "regularly", "addition", "boundary", "repeat", "region", "slippable", "any", "repetition", "count", "yield", "close", "geometry", "we", "current", "approach", "discrete", "change", "limit", "pattern", "one", "degree", "freedom", "only", "continuous", "structure-aware", "deformation", "use", "structural", "knowledge", "gain", "preprocessing", "we", "add", "constraint", "we", "deformation", "model", "aim", "preserve", "pattern", "shape", "constraint", "give", "higher", "weight", "than", "elastic", "regularizer", "thus", "dominate", "deformation", "result", "-lrb-", "figure", "2c", "-rrb-", "discrete", "relaxation", "we", "measure", "stretch", "continuously", "deform", "model", "automatically", "insert", "delete", "slide", "docker", "relax", "stretch", "model", "automatic", "structure", "adaptation", "allow", "broader", "range", "deformation", "apply", "without", "violate", "natural", "appearance", "object", "-lrb-", "figure", "2d", "-rrb-", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "123", "publication", "date", "December", "2011", "Pattern-Aware", "shape", "Deformation", "use", "docking", "slider", "123:3", "pattern-based", "structure", "Model", "we", "approach", "begin", "preprocessing", "phase", "which", "analysis", "input", "geometry", "detect", "structural", "regularity", "form", "partial", "regular", "pattern", "pattern", "keep", "invariant", "later", "editing", "process", "regular", "pattern", "define", "respect", "group", "admissible", "transformation", "transformation", "let", "group", "bijective", "continuous", "mapping", "throughout", "paper", "we", "restrict", "we", "consideration", "translation", "replication", "transformation", "let", "denote", "xfold", "application", "where", "continuous", "value", "we", "deal", "translation", "which", "form", "linear", "space", "correspond", "multiplication", "x.", "however", "we", "stick", "more", "general", "group", "notation", "because", "show", "more", "clearly", "conceptual", "structure", "also", "indicate", "how", "we", "framework", "could", "generalize", "more", "complex", "group", "transformation", "-lrb-", "example", "include", "rotation", "-rrb-", "set", "we", "use", "notation", "-lcb-", "-rcb-", "order", "denote", "set", "power", "T.", "furthermore", "we", "write", "-lrb-", "-rrb-", "x?a", "-lrb-", "-rrb-", "denote", "replication", "particular", "-lrb-", "-rrb-", "denote", "extrusion", "surface", "replicate", "continuously", "4.1", "partial", "regular", "pattern", "we", "goal", "preserve", "symmetry", "structure", "input", "under", "deformation", "while", "admit", "insertion", "deletion", "part", "first", "step", "look", "global", "symmetry", "symmetry", "group", "set", "all", "operation", "map", "itself", "i.e.", "-lrb-", "-rrb-", "form", "subgroup", "G.", "commutative", "group", "translation", "we", "consider", "symmetry", "group", "isomorphic", "infinite", "-lrb-", "potentially", "continuous", "-rrb-", "regular", "lattice", "-lsb-", "Pauly", "et", "al.", "2008", "-rsb-", "deal", "finite", "model", "partial", "regularity", "we", "include", "symmetric", "structure", "only", "excerpt", "larger", "grid", "due", "commutativity", "we", "can", "factor", "more", "general", "pattern", "overlap", "1-parameter", "grid", "overall", "lead", "follow", "model", "regular", "regular", "pattern", "partial", "1-parameter", "symmetry", "group", "-lrb-", "pattern", "-rrb-", "consider", "generator", "transformation", "let", "real", "interval", "we", "have", "-lrb-", "-rrb-", "we", "have", "find", "continuous", "partial", "1-parameter", "symmetry", "group", "integer", "interval", "least", "three", "element", "we", "have", "find", "discrete", "partial", "1-parameter", "symmetry", "group", "brevity", "we", "call", "structure", "continuous", "discrete", "-lrb-", "regular", "-rrb-", "pattern", "respectively", "4.2", "Computational", "Framework", "Discrete", "pattern", "we", "compute", "discrete", "pattern", "symmetry", "analysis", "similar", "Bokeloh", "et", "al.", "-lsb-", "2010", "-rsb-", "-lrb-", "see", "paper", "detail", "-rrb-", "we", "detect", "sharp", "crease", "input", "mesh", "combine", "pair", "adjacent", "non-collinear", "crease", "form", "basis", "two", "base", "pair", "potentially", "corresponding", "have", "match", "length", "enclose", "same", "angle", "very", "small", "feature", "line", "-lrb-", "below", "2.5", "-lrb-", "-rrb-", "-rrb-", "remove", "efficiency", "reason", "we", "now", "use", "ransac", "procedure", "compute", "regular", "pattern", "Random", "pair", "potentially", "corresponding", "basis", "choose", "relative", "transformation", "compute", "we", "search", "all", "potentially", "corresponding", "basis", "located", "position", "some", "give", "we", "initial", "pattern", "candidate", "next", "step", "extract", "generator", "transformation", "generate", "1-parameter", "group", "we", "look", "all", "pairwise", "transformation", "between", "candidate", "basis", "each", "pair", "we", "compute", "number", "basis", "lie", "grid", "induce", "two", "basis", "we", "output", "choice", "generator", "yield", "largest", "integer", "interval", "match", "basis", "exclude", "from", "further", "processing", "we", "iterate", "until", "more", "valid", "pattern", "find", "continuous", "pattern", "continuous", "symmetry", "detect", "slippage", "analysis", "follow", "algorithm", "-lsb-", "Gelfand", "Guibas", "2004", "-rsb-", "which", "can", "trivially", "restricted", "translational", "motion", "part", "have", "same", "continuous", "symmetry", "property", "extract", "simple", "region", "grow", "-lrb-", "see", "-lsb-", "Gelfand", "Guibas", "2004", "-rsb-", "implementation", "detail", "-rrb-", "normalization", "remove", "overlap", "partial", "pattern", "we", "always", "choose", "maximal", "set", "geometry", "involve", "smallest", "possible", "generate", "transformation", "-lrb-", "shortest", "translation", "vector", "-rrb-", "discrete", "case", "straightforward", "continuous", "case", "pattern", "compute", "segmentation", "use", "slippage", "analysis", "-lsb-", "gelfand", "guibas", "2004", "-rsb-", "thus", "maximal", "surface", "part", "region", "same", "slippage", "property", "use", "representation", "interval", "definition", "above", "vanish", "omit", "continuous", "symmetry", "follow", "regular", "pattern", "use", "convention", "we", "obtain", "finite", "set", "discrete", "regular", "pattern", "-lcb-", "-lrb-", "-rrb-", "...", "-lrb-", "-rrb-", "-rcb-", "another", "finite", "set", "continuous", "regular", "pattern", "-lcb-", "-lrb-", "-rrb-", "...", "-lrb-", "-rrb-", "-rcb-", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "123", "publication", "date", "December", "2011", "123:4", "M.", "Bokeloh", "et", "al.", "Deformation", "Model", "section", "we", "describe", "global", "continuous", "deformation", "model", "serve", "basis", "we", "deformation", "framework", "first", "we", "describe", "representation", "deformation", "function", "-lrb-", "section", "5.1", "-rrb-", "second", "we", "review", "standard", "elastic", "deformation", "model", "which", "serve", "we", "base", "regularizer", "-lrb-", "section", "5.2", "-rrb-", "Third", "we", "introduce", "additional", "structure-aware", "constraint", "order", "preserve", "regular", "pattern", "-lrb-", "section", "5.3", "-rrb-", "5.1", "representation", "order", "compute", "deformation", "we", "embed", "surface", "volume", "deform", "volume", "use", "deformation", "field", "approach", "have", "benefit", "make", "deformation", "independent", "representation", "so", "arbitrary", "type", "input", "geometry", "general", "surface", "topology", "can", "handle", "easily", "follow", "-lsb-", "Huang", "et", "al.", "2006", "Sumner", "et", "al.", "2007", "-rsb-", "we", "use", "subspace", "method", "discretize", "i.e.", "we", "use", "lowdimensional", "basis", "represent", "deformation", "we", "create", "number", "node", "...", "center", "radial", "basis", "function", "around", "they", "define", "deformation", "field", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "here", "deform", "target", "position", "node", "basis", "function", "we", "employ", "moving-least-square", "-lrb-", "ml", "-rrb-", "meshless", "basis", "function", "linear", "precision", "base", "finite", "support", "Wendland", "kernel", "propose", "-lsb-", "Adams", "et", "al.", "2008", "-rsb-", "function", "able", "represent", "smooth", "deformation", "field", "small", "number", "node", "we", "place", "node", "discretize", "regular", "grid", "user", "specify", "spacing", "we", "set", "support", "basis", "function", "2h", "make", "sure", "least", "two", "basis", "function", "overlap", "each", "surface", "point", "z-direction", "volume", "itself", "create", "offset", "all", "direction", "-lrb-", "i.e.", "Minkowski", "sum", "sphere", "radius", "-rrb-", "guarantee", "basis", "function", "derivative", "well", "define", "S.", "Remark", "follow", "we", "use", "two", "basic", "numerical", "discretization", "constant", "first", "determine", "resolution", "deformation", "field", "which", "typically", "range", "-lrb-", "-rrb-", "addition", "we", "also", "use", "smaller", "constant", "-lrb-", "range", "-lrb-", "-rrb-", "-rrb-", "discretize", "other", "function", "symmetry", "information", "form", "neighborhood", "slippage", "analysis", "determine", "variational", "approach", "we", "set", "up", "energy", "function", "-lrb-", "-rrb-", "minimize", "optimal", "describe", "user", "constraint", "base-regularizer", "create", "elastic", "behavior", "two", "term", "correspond", "standard", "elastic", "shape", "deformation", "approach", "we", "add", "two", "additional", "term", "preserve", "pattern", "structure", "preserve", "continuous", "pattern", "straight", "line", "preserve", "discrete", "pattern", "control", "influence", "different", "regularizer", "relative", "user", "constraint", "we", "typically", "use", "0.01", "5.2", "Elastic", "Deformation", "first", "energy", "term", "account", "user", "constraint", "we", "use", "standard", "handle", "model", "where", "part", "input", "surface", "can", "translate", "rotate", "space", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "dx", "second", "term", "elastic", "deformation", "energy", "we", "employ", "standard", "formulation", "base", "Poisson", "system", "-lsb-", "sorkine", "et", "al.", "2004", "-rsb-", "co-rotated", "local", "frame", "-lsb-", "M?ller", "et", "al.", "2002", "Sorkine", "Alexa", "2007", "-rsb-", "adapt", "volumetric", "setting", "-lsb-", "Zhou", "et", "al.", "2005", "-rsb-", "we", "connect", "all", "pair", "node", "overlap", "shape", "function", "preserve", "distance", "vector", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "j?n", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "here", "-lrb-", "-rrb-", "denote", "accordingly", "set", "index", "node", "adjacent", "node", "weight", "coupling", "which", "we", "set", "accord", "Wendland", "kernel", "MLS", "basis", "-lrb-", "see", "-lsb-", "Zhou", "et", "al.", "2005", "-rsb-", "more", "sophisticated", "scheme", "-rrb-", "variable", "rotation", "matrix", "each", "node", "optimize", "along", "node", "displacement", "numerical", "solution", "order", "solve", "minimum", "energy", "we", "determine", "derivative", "respect", "which", "linear", "laplacian-type", "system", "set", "zero", "next", "we", "update", "rotation", "estimation", "from", "neighbor", "procedure", "iterate", "until", "convergence", "detail", "can", "find", "-lsb-", "sorkine", "Alexa", "2007", "-rsb-", "because", "special", "structure", "system", "only", "right-hand", "side", "change", "during", "iteration", "therefore", "possible", "prefactor", "matrix", "so", "inversion", "can", "solve", "sparse", "matrix-vector", "product", "lead", "substantial", "speed-up", "suggest", "-lsb-", "sorkine", "Alexa", "2007", "-rsb-", "we", "employ", "tauc", "library", "sparse", "Cholesky", "factorization", "-lsb-", "Toledo", "2003", "-rsb-", "5.3", "structure", "aware", "deformation", "we", "now", "augment", "we", "deformation", "model", "so", "better", "preserve", "structure", "deform", "geometry", "we", "first", "employ", "general", "anisotropic", "deformation", "model", "order", "favor", "local", "preservation", "pattern", "structure", "secondly", "we", "add", "global", "constraint", "preserve", "continuous", "discrete", "pattern", "5.3.1", "local", "constraint", "locally", "we", "would", "like", "geometry", "deform", "way", "preserve", "continuous", "symmetry", "we", "look", "from", "local", "perspective", "elastic", "regularizer", "mean", "we", "would", "like", "deformation", "happen", "along", "slippable", "motion", "rather", "than", "orthogonal", "they", "because", "only", "change", "parametrization", "geometric", "shape", "accordingly", "we", "augment", "equation", "use", "anisotropic", "error", "quadric", "order", "weight", "deformation", "we", "replace", "isotropic", "error", "term", "-lrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-rrb-", "-lrb-", "el", "-rrb-", "el", "el", "-lrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-rrb-", "where", "-lrb-", "-rrb-", "compute", "translational", "slippage", "analysis", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "dy", "0.01", "i.", "-lrb-", "-rrb-", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "123", "publication", "date", "December", "2011", "Pattern-Aware", "shape", "Deformation", "use", "docking", "slider", "123:5", "Figure", "constraint", "manifold", "construct", "preserve", "discrete", "-lrb-", "purple", "-rrb-", "continuous", "-lrb-", "blue", "-rrb-", "pattern", "structure", "here", "-lrb-", "-rrb-", "unit", "surface", "normal", "-lrb-", "-rrb-", "euclidean", "h-neighborhood", "S.", "Intuitively", "can", "explain", "average", "planar", "constraint", "each", "point", "outer", "product", "create", "quadric", "penalize", "deviation", "normal", "direction", "only", "tangential", "motion", "have", "zero", "cost", "complex", "geometry", "cost", "different", "direction", "average", "thus", "straight", "line", "penalize", "anything", "motion", "its", "tangential", "direction", "irregular", "geometry", "resist", "any", "deformation", "we", "still", "need", "base", "regularizer", "diffuse", "stretch", "even", "along", "perfectly", "straight", "line", "we", "add", "identity", "matrix", "5.3.2", "global", "constraint", "effect", "local", "model", "weaken", "distance", "extended", "object", "straight", "line", "flat", "plane", "can", "still", "show", "significant", "global", "bend", "increase", "weight", "could", "principle", "solve", "problem", "would", "lead", "impractically", "ill-conditioned", "numerical", "system", "therefore", "we", "introduce", "explicit", "global", "constraint", "maintain", "general", "pattern", "globally", "we", "address", "continuous", "pattern", "first", "discrete", "case", "discuss", "afterwards", "require", "only", "few", "minor", "modification", "let", "part", "constant", "slippage", "which", "can", "have", "one", "two", "translational", "degree", "freedom", "each", "point", "we", "consider", "line", "plane", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "which", "affine", "constraint", "subspace", "-lrb-", "-rrb-", "point", "-lrb-", "see", "Figure", "-rrb-", "let", "tangent", "vector", "space", "we", "form", "quadric", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "which", "penalize", "displacement", "would", "take", "point", "out", "constraint", "subspace", "1-slippable", "case", "same", "construction", "make", "single", "tangent", "vector", "during", "editing", "only", "orientation", "constraint", "space", "-lrb-", "-rrb-", "fix", "translation", "complete", "pattern", "whole", "penalize", "obtain", "express", "constraint", "term", "difference", "vector", "describe", "below", "numerical", "implementation", "give", "slippable", "part", "...", "corresponding", "set", "motion", "we", "now", "build", "global", "constraint", "energy", "preserve", "continuous", "symmetry", "nevertheless", "permit", "move", "pattern", "freely", "space", "we", "identify", "region", "each", "slippable", "part", "sample", "they", "-lrb-", "-rrb-", "uniformly", "point", "...", "spacing", "use", "Poisson", "disc", "sampling", "we", "connect", "point", "centroid", "-lrb-", "-rrb-", "form", "distance", "vector", "between", "centroid", "all", "other", "sample", "point", "which", "yield", "star", "geometry", "original", "constant", "distance", "vector", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "distance", "vector", "deform", "model", "give", "-lrb-", "-rrb-", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "-lrb-", "-lrb-", "-rrb-", "-rrb-", "we", "minimize", "difference", "least", "square", "sense", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "weighting", "error", "quadric", "-lrb-", "-rrb-", "constrain", "deviation", "tangent", "space", "constraint", "manifold", "again", "only", "constant", "equation", "change", "so", "only", "right-hand", "side", "linear", "system", "need", "update", "permit", "prefactorization", "which", "crucial", "achieve", "real-time", "performance", "discrete", "pattern", "discrete", "case", "we", "use", "almost", "exactly", "same", "constraint", "we", "obtain", "1-dimensional", "constraint", "manifold", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "where", "transformation", "link", "two", "element", "discrete", "pattern", "continuous", "pattern", "move", "surface", "point", "along", "constraint", "manifold", "usually", "do", "change", "geometry", "substantially", "discrete", "case", "however", "tangential", "drift", "clearly", "noticeable", "because", "we", "have", "complex", "non-slippable", "geometry", "be", "replicate", "we", "therefore", "modify", "constraint", "enforce", "constant", "step", "size", "we", "use", "quadric", "-lrb-", "-rrb-", "full", "rank", "use", "equidistant", "step", "-lrb-", "-rrb-", "constrain", "difference", "vector", "between", "corresponding", "part", "slide", "Dockers", "section", "we", "describe", "how", "we", "framework", "adapt", "repetition", "count", "discrete", "pattern", "order", "reduce", "stretch", "section", "6.1", "6.2", "we", "examine", "discrete", "pattern", "more", "closely", "try", "decompose", "geometry", "slide", "docker", "allow", "change", "repetition", "count", "seamlessly", "section", "6.3", "we", "describe", "how", "slide", "docker", "integrate", "deformation", "framework", "interactive", "deformation", "proceeds", "two", "step", "first", "we", "let", "user", "deform", "object", "area", "cover", "discrete", "pattern", "anisotropic", "deformation", "weight", "-lrb-", "equation", "-rrb-", "change", "deformation", "along", "motion", "field", "incur", "minimal", "penalty", "step", "pattern", "area", "act", "placeholder", "allocate", "space", "slide", "docker", "along", "pattern?s", "motion", "direction", "second", "step", "we", "compute", "stretch", "within", "placeholder", "round", "insert", "adapt", "number", "instance", "deformation", "recompute", "new", "composition", "object", "two", "deformation", "step", "always", "perform", "sequence", "only", "adapt", "shape", "present", "user", "6.1", "define", "slide", "Dockers", "we", "first", "task", "identify", "piece", "geometry", "can", "replicate", "let", "-lrb-", "-rrb-", "discrete", "pattern", "compute", "Subsection", "4.2", "we", "now", "need", "determine", "whether", "contain", "element", "can", "replicate", "while", "continuously", "interface", "each", "other", "exist", "geometry", "show", "Figure", "element", "have", "meet", "two", "type", "boundary", "condition", "first", "boundary", "orthogonal", "motion", "field", "have", "match", "each", "other", "we", "therefore", "require", "symmetry", "geometry", "respect", "T.", "Second", "direction", "tangential", "motion", "we", "require", "slippability", "respect", "change", "repetition", "count", "boundary", "pattern", "rest", "geometry", "slide", "respect", "each", "other", "slippability", "ensure", "we", "always", "have", "match", "geometry", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "123", "publication", "date", "December", "2011", "123:6", "M.", "Bokeloh", "et", "al.", "Figure", "boundary", "condition", "slide", "docker", "we", "perform", "symmetry", "analysis", "find", "all", "geometry", "within", "symmetric", "respect", "we", "denote", "geometry", "-lrb-", "-rrb-", "10", "-lrb-", "-rrb-", "-lcb-", "-lrb-", "-rrb-", "-rcb-", "easy", "see", "image", "-lrb-", "-rrb-", "under", "-lrb-", "-rrb-", "other", "word", "area", "symmetry", "transform", "map", "slippage", "analysis", "we", "obtain", "subset", "slippable", "respect", "we", "denote", "set", "-lrb-", "-rrb-", "consider", "piece", "geometry", "we", "say", "slide", "docker", "respect", "follow", "two", "condition", "hold", "first", "boundary", "must", "located", "entirely", "either", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "second", "every", "point", "-lrb-", "-rrb-", "corresponding", "point", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "must", "include", "boundary", "vice", "versa", "other", "word", "we", "cut", "out", "slide", "docker", "cut", "through", "symmetric", "geometry", "slippable", "area", "along", "motion", "pattern", "when", "cut", "through", "symmetric", "area", "we", "need", "use", "match", "cut", "line", "within", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "so", "piece", "fit", "together", "seamlessly", "later", "-lrb-", "see", "Figure", "-rrb-", "we", "can", "easily", "extend", "definition", "whole", "array", "slide", "docker", "order", "find", "match", "docker", "simultaneously", "we", "require", "two", "boundary", "condition", "meet", "replicate", "piece", "along", "motion", "direction", "namely", "-lcb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "...", "-lrb-", "-rrb-", "-rcb-", "we", "call", "ensemble", "slide", "docker", "group", "order", "find", "slide", "docker", "we", "first", "need", "compute", "symmetry", "information", "we", "use", "same", "computational", "framework", "Bokeloh", "et", "al.", "-lsb-", "2010", "-rsb-", "transformation", "candidate", "estimate", "match", "feature", "line", "we", "obtain", "slippable", "motion", "from", "slippage", "analysis", "-lrb-", "section", "4.2", "-rrb-", "Motion", "space", "transform", "order", "simplify", "further", "computation", "we", "perform", "transformation", "motion", "space", "space", "one", "axis", "correspond", "-lrb-", "translational", "-rrb-", "motion", "while", "other", "two", "axis", "two", "remain", "euclidean", "coordinate", "axis", "translation", "just", "linear", "transform", "notational", "convention", "we", "denote", "motion", "coordinate", "x-axis", "motion", "space", "next", "we", "build", "voxel", "grid", "motion", "space", "represent", "symmetry", "information", "-lrb-", "see", "Figure", "illustration", "-rrb-", "side", "length", "motion", "dimension", "euclidean", "dimension", "choose", "spacing", "world", "coordinate", "larger", "than", "discretization", "constant", "furthermore", "we", "denote", "-lrb-", "integer", "-rrb-", "number", "voxel", "represent", "one", "application", "motion", "t.", "each", "discrete", "regular", "pattern", "-lrb-", "-rrb-", "we", "transform", "scene", "motion", "space", "-lrb-", "speed", "up", "collect", "all", "pattern", "have", "same", "motion", "space", "-rrb-", "we", "now", "retrieve", "geometry", "every", "non-empty", "voxel", "-lrb-", "-rrb-", "match", "content", "against", "voxel", "-lrb-", "-rrb-", "correspond", "transform", "geometry", "match", "voxel", "tag", "symmetric", "next", "we", "compute", "slippability", "each", "voxel", "check", "each", "t-slippable", "voxel", "-lrb-", "-rrb-", "whether", "all", "voxel", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "...", "-lrb-", "-rrb-", "t-slippable", "well", "so", "we", "mark", "voxel", "fully", "slippable", "mean", "geometry", "voxel", "well", "all", "geometry", "along", "motion", "-lsb-", "0,1", "-rsb-", "-lrb-", "-rrb-", "slippable", "which", "what", "we", "need", "cut", "out", "slide", "docker", "we", "perform", "analysis", "all", "non-empty", "voxel", "well", "empty", "voxel", "direct", "neighbor", "occupied", "one", "empty", "voxel", "must", "map", "other", "empty", "voxel", "order", "fully", "slippable", "extract", "slide", "docker", "after", "precomputation", "find", "slide", "docker", "simple", "we", "symmetric", "voxel", "grow", "-lrb-", "-rrb-", "plane", "motion", "space", "until", "we", "either", "hit", "nonsymmetric", "voxel", "fully", "slippable", "voxel", "we", "hit", "single", "nonsymmetric", "voxel", "we", "dismiss", "whole", "attempt", "we", "only", "end", "fully", "slippable", "voxel", "-lrb-", "include", "empty", "fully", "slippable", "one", "-rrb-", "we", "have", "find", "slide", "docker", "we", "can", "just", "cut", "out", "extrusion", "visit", "region", "x-direction", "motion", "space", "transform", "back", "world", "coordinate", "we", "obtain", "final", "slide", "docker", "when", "perform", "computation", "we", "always", "try", "find", "maximal", "slide", "docker", "group", "check", "symmetry", "full", "slippability", "respect", "...", "simultaneously", "-lrb-", "correspond", "test", "voxel", "separate", "multiple", "x-direction", "-rrb-", "whole", "computation", "attempt", "each", "base", "detect", "pattern", "yield", "large", "number", "slide", "docker", "most", "which", "overlap", "order", "remove", "overlap", "piece", "we", "use", "simple", "greedy", "algorithm", "we", "take", "largest", "slide", "docker", "group", "-lrb-", "i.e.", "one", "highest", "repetition", "count", "-rrb-", "delete", "all", "overlap", "slide", "docker", "group", "iterate", "until", "more", "slide", "docker", "group", "find", "6.2", "find", "slide", "Dockers", "Figure", "slide", "docker", "extract", "region", "grow", "motion", "space", "start", "from", "pattern", "base", "we", "grow", "orthogonally", "motion", "direction", "use", "only", "symmetric", "voxel", "we", "proceed", "until", "either", "hit", "only", "fully", "slippable", "voxel", "-lrb-", "success", "-rrb-", "nonsymmetric", "voxel", "-lrb-", "failure", "-rrb-", "6.3", "use", "slide", "Dockers", "we", "can", "now", "integrate", "slide", "docker", "we", "deformation", "framework", "first", "we", "have", "set", "up", "first", "two", "deformation", "step", "we", "mark", "all", "area", "cover", "slide", "docker", "group", "each", "point", "we", "deactivate", "all", "regularizer", "except", "from", "elastic", "deformation", "energy", "let", "-lrb-", "-rrb-", "normalize", "vector", "parallel", "constant", "tangent", "-lrb-", "-rrb-", "motion", "field", "we", "set", "error", "quadric", "elastic", "deformation", "model", "-lrb-", "equation", "-rrb-", "tt", "0.01", "make", "geometry", "easily", "stretchable", "pattern", "direction", "rest", "model", "we", "use", "all", "energy", "term", "previously", "describe", "include", "global", "local", "pattern", "preserve", "constraint", "we", "solve", "result", "system", "result", "we", "measure", "stretch", "pattern", "region", "integrate", "along", "line", "motion", "direction", "we", "connect", "corresponding", "point", "neighbor", "instance", "pattern", "element", "compute", "average", "length", "divide", "value", "deform", "undeformed", "state", "give", "we", "stretch", "factor", "we", "multiply", "factor", "number", "original", "repetition", "round", "nearest", "integer", "determine", "number", "element", "insert", "insert", "element", "we", "again", "use", "motion", "space", "we", "scale", "element", "inverse", "stretch", "factor", "x-direction", "motion", "space", "concatenate", "piece", "backtransform", "world", "coordinate", "we", "replace", "original", "pattern", "adapt", "one", "next", "we", "need", "make", "sure", "elastic", "deformation", "model", "undo", "stretch", "we", "add", "more", "element", "mean", "we", "squeeze", "smaller", "replica", "original", "space", "energy", "equation", "would", "try", "preserve", "configuration", "asrigid-as-possible", "manner", "therefore", "we", "augment", "distance", "vector", "instead", "distance", "squeeze", "element", "we", "employ", "original", "distance", "vector", "basis", "function", "overlap", "region", "stretch", "different", "factor", "we", "compute", "weighted", "average", "accord", "respective", "kernel", "function", "node", "error", "quadric", "we", "use", "full", "rank", "identity", "matrix", "aim", "preserve", "original", "shape", "insert", "pattern", "element", "small", "detail", "help", "point", "improve", "quality", "result", "boundary", "between", "prestreched", "unstreched", "geometry", "elastic", "deformation", "model", "tend", "produce", "artifact", "therefore", "we", "set", "different", "error", "quadric", "pair", "node", "connect", "across", "normal", "geometry", "slide", "docker", "area", "we", "use", "quadric", "tt", "order", "make", "boundary", "slidable", "diffuse", "error", "introduce", "stress", "discontinuity", "assemble", "new", "shape", "insert", "stretch", "pattern", "create", "shape", "only", "continuous", "boundary", "elastic", "deformation", "model", "aim", "undoing", "deformation", "subspace", "model", "can", "represent", "high", "frequency", "detail", "which", "imply", "visible", "artifact", "boundary", "can", "remain", "order", "avoid", "problem", "we", "need", "make", "sure", "new", "base", "shape", "we", "create", "actually", "smooth", "deformation", "low", "frequency", "therefore", "we", "use", "windowing", "function", "-lrb-", "-rrb-", "direction", "motion", "we", "transition", "from", "constant", "stretch", "factor", "different", "stretch", "use", "smooth", "step", "function", "we", "employ", "cosine", "step", "function", "-lrb-", "0.5", "cos", "-rrb-", "transition", "from", "stretch", "new", "constant", "stretch", "similar", "cosine", "step", "lead", "back", "function", "can", "integrate", "analytically", "-lrb-", "obtain", "position", "rather", "than", "derivative", "-rrb-", "invert", "so", "we", "can", "compute", "inner", "stretch", "make", "all", "instance", "fit", "placeholder", "we", "fix", "support", "smooth", "step", "always", "cover", "support", "least", "2h", "each", "thereby", "create", "low-frequency", "distortion", "remain", "within", "Nyquist", "limit", "deformation", "model", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "123", "publication", "date", "December", "2011", "Pattern-Aware", "shape", "Deformation", "use", "docking", "slider", "123:7", "implementation", "result", "we", "have", "implement", "describe", "shape", "editing", "system", "C++", "evaluate", "commodity", "workstation", "Intel", "Core-2", "Quad", "CPU", "2.6", "GHz", "core", "8gb", "RAM", "we", "implemen", "tation", "single-threaded", "benchmark", "datum", "we", "have", "collect", "number", "model", "from", "commercial", "3d", "model", "library", "we", "use", "model", "from", "Digimation", "Archive", "-lrb-", "www.digimation.com", "-rrb-", "we", "also", "include", "example", "from", "-lsb-", "Kraevoy", "et", "al.", "2008", "-rsb-", "-lsb-", "Bokeloh", "et", "al.", "2010", "-rsb-", "model", "large", "triangle", "we", "perform", "one", "more", "1:4", "subdivision", "step", "obtain", "sufficiently", "densely", "sample", "mesh", "even", "elastic", "deformation", "bend", "can", "accommodate", "result", "model", "output", "collection", "triangle", "generally", "do", "form", "watertight", "mesh", "thus", "general", "polygon", "soup", "figure", "show", "number", "example", "model", "have", "be", "edit", "use", "we", "approach", "please", "refer", "accompany", "video", "demonstration", "interactive", "editing", "deformation", "result", "produce", "technique", "quite", "plausible", "many", "example", "would", "challenge", "identify", "original", "model", "without", "highlight", "some", "minor", "artifact", "can", "see", "due", "small-scale", "irregularity", "input", "geometry", "which", "cause", "some", "pattern", "only", "detect", "chunk", "lead", "small", "amount", "residual", "deformation", "blue", "example", "use", "only", "elastic", "energy", "term", "-lrb-", "equation", "-rrb-", "discrete", "relaxation", "still", "enable", "despite", "strong", "bend", "we", "approach", "reliably", "adapt", "repetition", "count", "pattern", "without", "visible", "seam", "discontinuity", "gap", "similar", "artifact", "some", "model", "triangulation", "become", "visible", "could", "resolve", "better", "adaptive", "mesh", "subdivision", "scheme", "parameter", "we", "algorithm", "very", "sensitive", "parameter", "setting", "we", "mostly", "use", "default", "parameter", "everywhere", "only", "one", "parameter", "have", "strong", "effect", "quality", "result", "error", "threshold", "match", "approximately", "symmetric", "line", "feature", "complex", "model", "we", "also", "increase", "resolution", "subspace", "deformation", "model", "-lrb-", "Westminster", "Palace", "model", "use", "2.5", "-lrb-", "-rrb-", "instead", "-lrb-", "-rrb-", "which", "lead", "reduce", "interactive", "frame-rate", "-rrb-", "lower", "minimum", "size", "relevant", "feature", "Timings", "show", "video", "editing", "can", "do", "interactively", "all", "present", "model", "structure", "analysis", "preprocess", "take", "up", "few", "minute", "each", "model", "prefactorization", "linear", "system", "add", "ten", "more", "seconds", "effect", "individual", "energy", "term", "Figure", "we", "show", "all", "ingredient", "variational", "framework", "necessary", "obtain", "good", "result", "deactivate", "elastic", "energy", "mean", "stretch", "diffuse", "local", "constraint", "helpful", "provide", "better", "base", "regularizer", "object", "part", "where", "pattern", "find", "Figure", "effect", "individual", "energy", "term", "variational", "deformation", "framework", "leave", "out", "any", "single", "energy", "term", "lead", "artifact", "-lrb-", "-rrb-", "input", "model", "-lrb-", "-rrb-", "elasticity", "-lrb-", "-rrb-", "local", "constraint", "-lrb-", "-rrb-", "global", "constraint", "-lrb-", "-rrb-", "full", "energy", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "123", "publication", "date", "December", "2011", "123:8", "M.", "Bokeloh", "et", "al.", "bench", "balustrade", "air", "bridge", "canvas", "chair", "figure", "interactive", "pattern-aware", "shape", "editing", "original", "input", "show", "orange", "editing", "result", "show", "grey", "blue", "repetition", "count", "discrete", "pattern", "edited", "shape", "be", "automatically", "adapt", "framework", "blue", "model", "pattern", "preservation", "constraint", "be", "disabled", "only", "elastic", "energy", "use", "order", "allow", "more", "severe", "deformation", "oil", "platform", "oil", "tank", "castle", "Westminster", "Palace", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "123", "publication", "date", "December", "2011", "Pattern-Aware", "shape", "Deformation", "use", "docking", "slider", "123:9", "-lrb-", "-rrb-", "original", "shape", "-lrb-", "-rrb-", "docking", "site", "-lrb-", "-rrb-", "slide", "docker", "-lrb-", "-rrb-", "deformation", "result", "figure", "slide", "docker", "detect", "where", "docking", "site", "can", "find", "technique", "Bokeloh", "et", "al.", "-lsb-", "2010", "-rsb-", "give", "input", "shape", "show", "-lrb-", "-rrb-", "existence", "docking", "site", "contingent", "symmetric", "cut", "partition", "shape", "disconnect", "piece", "illustrate", "-lrb-", "-rrb-", "cut", "find", "temple", "due", "shape", "roof", "other", "hand", "slide", "docker", "do", "require", "global", "symmetry", "successfully", "detect", "-lrb-", "-rrb-", "apply", "we", "technique", "-lrb-", "-rrb-", "global", "constraint", "necessary", "keep", "object", "straight", "without", "they", "global", "bend", "can", "prevent", "comparison", "related", "work", "Figure", "show", "oil", "tank", "model", "use", "Kraevoy", "et", "al.", "-lsb-", "2008", "-rsb-", "we", "technique", "achieve", "comparable", "result", "while", "detect", "stretch", "axis", "fully", "automatically", "-lrb-", "shape", "do", "need", "align", "global", "coordinate", "axis", "-rrb-", "since", "we", "only", "penalize", "structural", "deviation", "leastsquare", "sense", "small", "amount", "residual", "bend", "remains", "castle", "example", "Figure", "demonstrate", "we", "approach", "more", "general", "castle", "can", "stretch", "non-orthogonal", "direction", "determine", "fully", "automatically", "we", "pattern-aware", "structure", "model", "comparison", "Bokeloh", "et", "al.", "-lsb-", "2010", "-rsb-", "we", "approach", "can", "adapt", "discrete", "structure", "model", "real", "time", "response", "continuous", "free-form", "deformation", "instead", "be", "drive", "manually", "specify", "rigid", "shape", "operation", "furthermore", "slide", "docker", "find", "example", "where", "analysis", "technique", "Bokeloh", "et", "al.", "fail", "detect", "global", "cut", "arch", "figure", "column", "Figure", "latter", "example", "temple", "roof", "partially", "symmetric", "under", "transformation", "thus", "docking", "site", "can", "detect", "show", "Figure", "-lrb-", "-rrb-", "other", "hand", "slide", "docker", "do", "rely", "global", "cut", "allow", "temple", "resize", "show", "Figure", "-lrb-", "-rrb-", "discussion", "we", "have", "present", "structure-aware", "deformation", "technique", "use", "elementary", "assumption", "preserve", "regular", "pattern", "which", "we", "model", "1-parameter", "partial", "symmetry", "group", "we", "have", "develop", "variational", "optimization", "technique", "preserve", "structure", "least", "square", "sense", "while", "distribute", "remain", "stretch", "uniformly", "addition", "we", "introduce", "slide", "docker", "allow", "technique", "fully", "automatically", "insert", "delete", "repeated", "element", "discrete", "pattern", "order", "minimize", "distortion", "due", "free-form", "deformation", "furthermore", "we", "have", "present", "numerical", "framework", "use", "subspace", "formulation", "prefactored", "linear", "system", "implement", "present", "approach", "efficiently", "robustly", "real-time", "system", "Limitations", "one", "limitation", "current", "approach", "handling", "small-scale", "irregularity", "input", "3d", "model", "object", "appear", "perfectly", "regular", "often", "have", "geometric", "inconsistency", "because", "artist", "do", "accurately", "align", "part", "original", "model", "error", "10", "uncommon", "while", "we", "can", "compensate", "introduce", "small", "numerical", "threshold", "pattern", "detection", "algorithm", "irregularity", "input", "can", "cause", "shape", "analysis", "stage", "overlook", "visually", "salient", "pattern", "Westminster", "Palace", "model", "we", "have", "manually", "adjust", "original", "geometry", "one", "place", "repair", "single", "discrete", "pattern", "make", "analysis", "stage", "more", "robust", "approximate", "regularity", "natural", "avenue", "future", "work", "possibly", "use", "feature", "graph", "match", "approach", "-lsb-", "Bokeloh", "et", "al.", "2009", "-rsb-", "further", "limitation", "another", "interesting", "avenue", "future", "work", "all", "slide", "docker", "group", "currently", "need", "mutually", "disjoint", "can", "thus", "have", "only", "single", "repetition", "parameter", "-lrb-", "one-parameter", "grid", "-rrb-", "handle", "discrete", "change", "twoand", "three-parameter", "grid", "well", "more", "general", "overlap", "hierarchical", "pattern", "could", "extend", "applicability", "we", "approach", "more", "complex", "structure", "we", "current", "implementation", "use", "regular", "sample", "deformation", "field", "which", "can", "lead", "distortion", "when", "oppose", "constraint", "spatially", "close", "Figure", "we", "show", "most", "noticeable", "artifact", "current", "system", "cause", "insufficient", "resolution", "deformation", "field", "here", "oppose", "pattern", "constraint", "act", "same", "deformation", "node", "system", "opt", "equilibrium", "between", "constraint", "result", "undesired", "distortion", "could", "alleviate", "use", "adaptive", "deformation", "field", "increase", "resolution", "locally", "difficult", "location", "another", "limitation", "present", "approach", "only", "handle", "translation", "future", "work", "we", "would", "like", "investigate", "structure", "model", "utilize", "more", "invariant", "notion", "similarity", "possibly", "incorporate", "rotation", "scaling", "more", "general", "invariant", "intrinsic", "isometry", "we", "current", "implementation", "also", "impose", "discrete", "constraint", "individual", "slide", "docker", "group", "do", "connect", "multiple", "group", "form", "link", "pattern", "finally", "present", "work", "focus", "1-parameter", "pattern", "future", "work", "could", "pursue", "more", "comprehensive", "representation", "algebraic", "structure", "partial", "symmetry", "shape", "deformation", "lift", "limitation", "can", "meaningfully", "advance", "capability", "interactive", "shape", "editing", "tool", "acknowledgment", "work", "have", "be", "support", "cluster", "excellence", "multimodal", "computing", "interaction", "Max-Planck-Center", "visual", "computing", "communication", "reference", "dam", "B.", "VSJANIKOV", "M.", "M.", "eidel", "h.-p.", "uiba", "L.", "J.", "2008", "meshless", "modeling", "deformable", "shape", "motion", "Symposium", "Computer", "Animation", "LLEN", "B.", "URLESS", "B.", "opovus", "Z.", "2003", "space", "human", "body", "shape", "reconstruction", "parameterization", "from", "range", "scan", "SIGGRAPH", "03", "ACM", "SIGGRAPH", "2003", "Papers", "ACM", "New", "York", "NY", "USA", "587", "594", "en", "hen", "M.", "eber", "O.", "OTSMAN", "C.", "2009", "variational", "harmonic", "map", "space", "deformation", "ACM", "transaction", "Graphics", "28", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "123", "publication", "date", "December", "2011", "123:10", "M.", "Bokeloh", "et", "al.", "Figure", "undesired", "distortion", "can", "appear", "where", "compete", "constraint", "affect", "same", "region", "often", "cause", "insufficient", "resolution", "deformation", "field", "-lrb-", "-rrb-", "two", "neighbor", "pattern", "-lrb-", "orange", "-rrb-", "start", "different", "position", "result", "oppose", "constraint", "handle", "well", "low", "frequency", "deformation", "field", "-lrb-", "-rrb-", "undetected", "pattern", "insufficient", "resolution", "deformation", "field", "can", "cause", "large", "distortion", "okeloh", "m.", "erner", "a.", "M.", "eidel", "h.-p.", "chilling", "a.", "2009", "symmetry", "detection", "use", "line", "feature", "Computer", "Graphics", "Forum", "28", "okeloh", "M.", "M.", "EIDEL", "h.-p", "2010", "connection", "between", "partial", "symmetry", "inverse", "procedural", "modeling", "ACM", "Trans", "graph", "29", "-lrb-", "July", "-rrb-", "104:1", "104:10", "otsch", "m.", "orkine", "O.", "2008", "linear", "variational", "surface", "deformation", "method", "IEEE", "transaction", "visualization", "computer", "graphic", "14", "213", "230", "oquillart", "S.", "1990", "extend", "free-form", "deformation", "sculpture", "tool", "3d", "geometric", "modeling", "Proc", "Siggraph", "unkhouser", "T.", "AZHDAN", "M.", "hilane", "P.", "P.", "IEFER", "W.", "AL", "a.", "usinkiewicz", "S.", "OBKIN", "D.", "2004", "modeling", "example", "ACM", "Trans", "graph", "23", "AL", "R.", "orkine", "O.", "ITRA", "N.", "ohen", "D.", "2009", "iwire", "analyze-and-edit", "approach", "shape", "manipulation", "ACM", "Trans", "graph", "28", "elfand", "N.", "UIBAS", "L.", "2004", "shape", "segmentation", "use", "local", "slippage", "analysis", "Proc", "Symp", "geometry", "processing", "uang", "J.", "hus", "X.", "IU", "X.", "HOU", "K.", "EI", "L.-Y.", "ENG", "S.H.", "ao", "H.", "UO", "B.", "hum", "h.-y", "2006", "subspace", "gradient", "domain", "mesh", "deformation", "ACM", "Trans", "graph", "25", "uang", "Q.", "ech", "R.", "arr", "N.", "2009", "optimize", "structure", "preserving", "embedded", "deformation", "resize", "image", "vector", "art", "Pacific", "Graphics", "OSHI", "P.", "EYER", "M.", "OSE", "T.", "REEN", "B.", "ANOCKI", "T.", "2007", "harmonic", "coordinate", "character", "articulation", "ACM", "Trans", "graph", "26", "-lrb-", "July", "-rrb-", "T.", "chaefer", "S.", "ARREN", "J.", "2005", "mean", "value", "coordinate", "closed", "triangular", "mesh", "ACM", "Trans", "graph", "24", "-lrb-", "July", "-rrb-", "561", "566", "RAEVOY", "V.", "ULIUS", "D.", "heffer", "a.", "2007", "Shuffler", "model", "interchangeable", "part", "Pacific", "Graphics", "2007", "RAEVOY", "V.", "heffer", "a.", "hamir", "a.", "ohen", "D.", "2008", "non-homogeneous", "resizing", "complex", "model", "ACM", "Trans", "graph", "27", "ipman", "Y.", "EVIN", "D.", "ohen", "D.", "2008", "Green", "coordinate", "ACM", "Trans", "graph", "27", "-lrb-", "August", "-rrb-", "iu", "L.", "HANG", "L.", "Y.", "OTSMAN", "C.", "ORTLER", "S.", "2008", "local/global", "approach", "mesh", "parameterization", "Computer", "Graphics", "Forum", "27", "1495", "1504", "itra", "N.", "J.", "auly", "M.", "2008", "symmetry", "architectural", "design", "advance", "Architectural", "Geometry", "13", "16", "itra", "N.", "J.", "UIBAS", "L.", "J.", "auly", "M.", "2006", "partial", "approximate", "symmetry", "detection", "3d", "geometry", "ACM", "Trans", "graph", "25", "560", "568", "uller", "M.", "ORSEY", "J.", "ILLAN", "L.", "AGNOW", "R.", "B.", "C.", "2002", "stable", "real-time", "deformation", "Proc", "Symp", "computer", "animation", "-lrb-", "sca", "-rrb-", "49", "54", "auly", "m.", "itra", "N.", "IESEN", "J.", "ROSS", "M.", "uiba", "L.", "J.", "2005", "example-based", "3d", "scan", "completion", "Proc", "Symp", "geometry", "processing", "auly", "m.", "itra", "N.", "J.", "ALLNER", "J.", "OTTMANN", "H.", "UIBAS", "L.", "2008", "discover", "structural", "regularity", "3d", "geometry", "ACM", "Trans", "graph", "27", "odolak", "J.", "hilane", "P.", "OLOVINSKIY", "a.", "usinkiewicz", "S.", "unkhouser", "t.", "2006", "planar-reflective", "symmetry", "transform", "3d", "shape", "ACM", "Trans", "graph", "25", "ederberg", "T.", "W.", "arry", "S.", "R.", "1986", "free-form", "deformation", "solid", "geometric", "model", "Proc", "Siggraph", "151", "160", "imarus", "P.", "ALOGERAKIS", "E.", "INGH", "K.", "2006", "folding", "mesh", "hierarchical", "mesh", "segmentation", "base", "planar", "symmetry", "Proc", "Symp", "geometry", "processing", "111", "119", "orkine", "O.", "LEXA", "M.", "2007", "as-rigid-as-possible", "surface", "modeling", "Proceedings", "Eurographics/ACM", "SIGGRAPH", "Symposium", "Geometry", "Processing", "109", "116", "orkine", "O.", "OHEN", "D.", "IPMAN", "Y.", "LEXA", "M.", "OSSL", "C.", "EIDEL", "h.-p", "2004", "laplacian", "surface", "editing", "Symposium", "Geometry", "processing", "umner", "R.", "W.", "chmid", "J.", "auly", "M.", "2007", "embed", "deformation", "shape", "manipulation", "ACM", "Trans", "graph", "26", "erzopoulo", "D.", "latt", "J.", "ARR", "a.", "leischer", "K.", "1987", "elastically", "deformable", "model", "Proc", "SIGGRAPH", "87", "ACM", "New", "York", "NY", "USA", "205", "214", "oledo", "S.", "2003", "Taucs", "library", "sparse", "linear", "solver", "TelAviv", "University", "http://www.tau.ac.il/", "stoledo/taucs", "VON", "unck", "W.", "heisel", "h.", "eidel", "h.-p", "2006", "Vector", "field", "base", "shape", "deformation", "ACM", "Trans", "graph", "25", "ang", "Y.", "K.", "J.", "HANG", "H.", "hamir", "a.", "iu", "L.", "HENG", "Z.", "iong", "Y.", "2011", "symmetry", "hierarchy", "man-made", "object", "Proc", "eurographic", "H.", "ang", "y.-s.", "ENG", "K.-C.", "ONG", "T.-T.", "EE", "T.-Y.", "ENG", "P.-A", "2010", "resize", "symmetry-summarization", "ACM", "transaction", "Graphics", "29", "W.", "ang", "J.", "K.", "HOU", "K.", "VAN", "de", "ANNE", "M.", "HEN", "F.", "UO", "B.", "2009", "joint-aware", "manipulation", "deformable", "model", "ACM", "Trans", "graph", "28", "heng", "Y.", "H.", "OHEN", "D.", "O.", "K.-C.", "aus", "c.-l", "2011", "component-wise", "controller", "structurepreserve", "shape", "manipulation", "Proc", "eurographic", "HOU", "K.", "UANG", "J.", "nyder", "J.", "IU", "X.", "ao", "H.", "UO", "B.", "hum", "h.-y", "2005", "large", "mesh", "deformation", "use", "volumetric", "graph", "laplacian", "ACM", "Trans", "graph", "24", "496", "503", "ACM", "transaction", "Graphics", "Vol", "30", "no.", "Article", "123", "publication", "date", "December", "2011" ],
  "content" : "\n  \n    1c4a305dae456ca044dc6eb2472759604105fad0fc497785042b4ce02e6d3ed6\n    p29\n    10.1145/2024156.2024157\n    Name identification was not possible. \n  \n  \n    \n      \n        Pattern-Aware Shape Deformation Using Sliding Dockers\n      \n      Martin Bokeloh ? Michael Wand ? MPI Informatik Saarland University and MPI Informatik\n      \n        \n        Figure 1: Edit example (left to right): The user places constraints (blue) and manipulates the object by moving constraints. Our deformation model maintains continuous and discrete patterns and adapts the repetition count of discrete patterns, inserting and deleting elements as needed to minimize distortion. Discrete changes are highlighted in orange.\n      \n      This paper introduces a new structure-aware shape deformation technique. The key idea is to detect continuous and discrete regular patterns and ensure that these patterns are preserved during freeform deformation. We propose a variational deformation model that preserves these structures, and a discrete algorithm that adaptively inserts or removes repeated elements in regular patterns to minimize distortion. As a tool for such structural adaptation, we introduce sliding dockers, which represent repeatable elements that fit together seamlessly for arbitrary repetition counts. We demonstrate the presented approach on a number of complex 3D models from commercial shape libraries. CR Categories: I.3.5 [Computing Methodologies]: Computer Graphics?Computational Geometry and Object Modeling; Keywords: shape deformation, shape analysis, symmetry, structural regularity\n      Links:\n      \n        \n      \n      DL PDF\n      \n        \n      \n    \n    \n      \n        1 Introduction\n      \n      Content creation is one of the main bottlenecks in contemporary computer graphics. While sophisticated methods for processing and rendering three-dimensional content are widely available, the creation of detailed custom 3D geometry still requires significant expertise. The issue is not merely of creative ability, but also with the process of directly manipulating detailed 3D models. Such ? e-mail: {mbokeloh,mwand,hpseidel}@mpi-inf.mpg.de ? e-mail: vladlen@stanford.edu\n      \n        ACM Reference Format\n      \n      Bokeloh, M., Wand, M., Koltun, V., Seidel, H. 2011. Pattern-Aware Shape Deformation Using Sliding Dockers. ACM Trans. Graph. 30, 6, Article 123 (December 2011), 10 pages. DOI = 10.1145/2024156.2024157 http://doi.acm.org/10.1145/2024156.2024157.\n      \n        Copyright Notice\n      \n      Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or direct commercial advantage and that copies show this notice on the fi rst page or initial screen of a display along with the full citation. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, to republish, to post on servers, to redistribute to lists, or to use any component of this work in other works requires prior specific permission and/or a fee. Permissions may be requested from Publications Dept., ACM, Inc., 2 Penn Plaza, Suite 701, New York, NY 10121-0701, fax +1 (212) 869-0481, or permissions@acm.org . ? 2011 ACM 0730-0301/2011/12-ART123 $10.00 DOI 10.1145/2024156.2024157 http://doi.acm.org/10.1145/2024156.2024157\n      Vladlen Koltun ? Hans-Peter Seidel ? Stanford University MPI Informatik\n      3D models often feature structural relationships on multiple scales, which need to be manually restored whenever a significant manipulation is performed on the model. Tedious adjustment is often required multiple times in a single modeling session. Consequently, recent research has begun to investigate structureaware shape editing tools that aim to automate the detailed manipulation required to preserve the structural relationships in a shape as it undergoes manipulation [Kraevoy et al. 2008; Gal et al. 2009; Huang et al. 2009; Wang et al. 2011; Zheng et al. 2011]. Such algorithms analyze the input shape to extract structural features and use the learned structure to assist interactive 3D modeling. They can improve the efficiency of content creation professionals and can assist inexperienced users in adapting existing content to their needs. In this paper, we present a structure-aware shape editing technique that detects discrete and continuous patterns in the shape and preserves these patterns under free-form deformation. A key distinguishing feature of our approach is that it can change the structure of the object by adding or removing local elements along regular patterns. This structural adaptation is integrated into a global freeform deformation framework that minimizes the overall stretch of the object. In our approach, the user specifies a small set of constraints and the system computes a new shape that meets these constraints while preserving structural properties of the original model, as shown in Figure 1 . As invariants, we extract 1-parameter groups of partial symmetries. In other words, we detect geometry that is replicated in regular patterns. This includes continuous symmetries such as straight lines as well as repeated discrete elements such as windows in a building. We formulate non-local rigidity constraints to maintain these symmetry properties in the output, and allow for adapting the number of discrete repetitions in order to reduce distortions. In order to add and remove elements along discrete patterns with minimal distortion, we introduce sliding dockers. A sliding docker is an element in a local, repeated structure that interfaces with the rest of the model in such way that the structure can be independently replicated with minimal distortion. We develop an algorithm that automatically finds collections of sliding dockers that repeat in one common translational direction and adapts the replication count in a way that minimizes distortions in the overall object. We evaluate the presented technique on models taken from commercial 3D model libraries and demonstrate that the presented tech- nique is able to naturally adapt the discrete structure of regular patterns in the objects in response to free-form manipulation. In summary, this work makes the following key contributions: ? We develop a new deformation model formulated in terms of regular patterns on the shape. ? We introduce the concept of sliding dockers for analyzing partial regularity. This allows for the first time to automatically insert and delete repetitive elements within a free-form shape deformation tool. ? We develop a robust and efficient numerical framework for implementing the technique for real-time shape editing.\n      ACM Transactions on Graphics, Vol. 30, No. 6, Article 123, Publication date: December 2011.\n      123:2\n      ?\n      M. Bokeloh et al.\n      \n        \n        \n      \n      (a) input object (b) elastic deformation\n      \n        Figure 2: Overview of our approach. Given an input shape (a) and a free-form deformation applied by the user (b), our deformation model preserves continuous patterns in the shape (c) and adapts the repetition counts of discrete patterns to minimize distortion (d).\n      \n      \n        2 Related Work\n        In our approach, the user interacts with 3D shapes in a free-form deformation system, which has a long tradition in computer graphics. Early techniques use smooth basis functions for interpolation [Sederberg and Parry 1986; Coquillart 1990]. Recent work constructs bases specific to a set of control points or a control cage [Ju et al. 2005; Joshi et al. 2007; Lipman et al. 2008; Ben-Chen et al. 2009]. Many of the techniques are based on variational calculus: local regularizers are traded off against the user?s constraints. The regularizers aim to maintain local similarity to the input. Elastic deformation models [Terzopoulos et al. 1987], which minimize the non-rigidity of the deformation, are particularly popular [Botsch and Sorkine 2008]. Variants include volume preservation [von Funck et al. 2006], similarity transforms [Liu et al. 2008], and thinplate splines [Allen et al. 2003]. We use elastic deformation as a ?base regularizer? to diffuse stretch and to preserve geometry for which no structural information could be inferred. Our implementation adopts the technique of Sorkine and Alexa [2007] that preserves co-rotated distance vectors in a least-squares sense. We extend this to a volumetric subspace formulation [Zhou et al. 2005; Huang et al. 2006; Sumner et al. 2007; Adams et al. 2008]. This allows interactive handling of large meshes and provides robustness against unfavorable mesh topology so that we can handle ?triangle soup.? Local regularizers do not recognize higher-level structural properties in the shape. Consequently, these techniques still expose a large number of degrees of freedom to the user, who has to manually ensure that important structural properties are maintained. This is acceptable for many organic shapes such as creatures, but highly structured objects, such as many man-made objects, are difficult to handle. Kraevoy et al. [2008] use an elastic-type model that adapts to the vulnerability of the local content. Three global stretch axes are fixed, which avoids bending artifacts but also limits the applicability of the technique to axis-aligned stretching. The continuous part of our deformation model could be regarded as an extension of their approach. The major difference is that we determine local stretch directions automatically, based on continuous patterns, rather than fixing them to the global coordinate system. Xu et al. [2009] introduce slippage analysis for free-form shape de formation, using it to construct a joint-aware deformation model. We also use slippage analysis, but employ it to discover continuous symmetries that are used to maintain the pattern structure of the input. The influential iWires system [Gal et al. 2009] maintains global structural properties of the shape by building constraints that preserve similarity of symmetric parts [Mitra et al. 2006; Podolak et al. 2006; Simari et al. 2006], as well as parallelity and orthogonality of salient feature lines. Huang et al. [2009] apply similar ideas to 2D vector graphics, and Zheng et al. [2011] propagate editing operations based on similarity of components. Using such global knowledge greatly facilitates shape editing, but a key limitation remains: The deformation function is still a continuous, bijective map between input and output. This does not allow the insertion or removal of elements, which can be desirable in response to significant stretch. This issue is the main motivation for our work. A further contribution of our work is that it is based on a single, low-level assumption of preserving partial 1-parameter symmetry groups, rather than a complex set of rules. A number of approaches have been developed for recombining shapes out of parts. Approaches that utilize manual part composition have been described [Funkhouser et al. 2004; Pauly et al. 2005; Kraevoy et al. 2007], as well as automatic methods for detecting structural regularity [Pauly et al. 2008]. Recently, techniques have appeared that compute rules for discrete changes automatically [Mitra and Pauly 2008; Bokeloh et al. 2010]. However, none of the automatic techniques provides free-form deformation editing. In addition, structural relationships treated in previous work are often limited: The technique of [Bokeloh et al. 2010] can detect regular patterns in 3D geometry and create shape variations by inserting or removing pieces, but the detected dockers must partition the model globally into two disjoint pieces by a symmetric cut. The technique thus cannot handle 3D models with local patterns that do not globally partition the shape. We extend the docking approach of Bokeloh et al. [2010] and introduce sliding dockers, which require only a partial partitioning and are designed to operate as part of a structure-aware free-form deformation framework. The recent method of Wang et al. [2011] infers a scene graph structure for an unannotated 3D mesh to allow for both continuous and discrete parameter variations. However, the method does not provide a constraint-based free-form deformation interface. Wu et al. [2010] describe an image resizing method that summarizes symmetry structure in the image and uses it to add or remove columns or rows of repeated elements in response to resizing operations. Their method tackles challenges that arise in image processing, such as perspective distortion or illumination changes. Our work focuses on manipulation of three-dimensional geometry, which imposes challenges such as producing seamless surfaces after adding or removing geometric elements, and dealing with general deformation and multiple independent resizing directions.\n        \n          \n          \n        \n        (c) maintaining continuous patterns (d) discrete patterns, adapted repetition counts\n      \n      \n        3 Overview\n        Our technique is designed to preserve regular patterns in the input shape. We detect such patterns in a preprocessing step, described in  Section 4. We then apply a continuous deformation model that tries to maintain the detected structure, as described in Section 5. In order to reduce distortions, we automatically insert or delete repeated elements using sliding dockers, developed in Section 6. In this section we give a brief overview of each component of our approach. These components are illustrated in Figure 2 . Input: Our technique accepts a general triangle mesh S ? R 3 as input ( Figure 2a ), with no restrictions on geometry or topology (in other words, ?triangle soup?). In addition, the user can select an arbitrary number of handles H i ? S and can move and rotate them to new positions (this is an interactive process, with real-time feedback by the system). In the following, we will use l(S) to denote the maximum side length of an axis aligned bounding box of S; this value is used to scale relative parameters automatically. Deformation model: The basis of our technique is a standard elastic shape deformation model [Terzopoulos et al. 1987; Sorkine and Alexa 2007]. It computes a deformation field f that minimizes the deviation from the user?s constraints and tries to keep the object as rigid as possible. In other words, the model diffuses stretch (stress tensors) as uniformly as possible across the object surface under the given constraints ( Figure 2b ). We use this behavior as a ?base regularizer? with low weight, aiming at just dissipating the stretch induced by the constraints. Shape analysis: We perform a shape analysis step in preprocessing, in order to identify regular patterns in the input geometry. We model regular patterns as one-parameter partial group structures in the symmetry structure of the object: We find parts P ? S that show up multiple times, replicated by a series of transformations T x , where x ranges over a continuous or integral range I ? R, leading to continuous and discrete patterns. Sliding dockers: For discrete patterns, we find sliding dockers, which are building blocks that can be replicated when the object is locally stretched. Sliding dockers are cut out of the input surface in a way that the boundaries fit seamlessly when multiple pieces are attached to each other regularly. In addition, the boundaries of this repeated region are slippable, such that any repetition count yields closed geometry. In our current approach, discrete changes are limited to pattern with one degree of freedom only. Continuous, structure-aware deformation: Using the structural knowledge gained in preprocessing, we add constraints to our deformation model that aim at preserving the patterns in the shape. These constraints are given a higher weight than the elastic regularizer, thus dominating the deformation results ( Figure 2c ). Discrete relaxation: We measure the stretch in the continuously deformed model and automatically insert or delete sliding dockers to relax the stretch in the model. Such automatic structure adaptation allows a broader range of deformations to be applied without violating the natural appearance of the object ( Figure 2d ).\n        ACM Transactions on Graphics, Vol. 30, No. 6, Article 123, Publication date: December 2011.\n        Pattern-Aware Shape Deformation Using Docking Sliders\n        ?\n        123:3\n      \n      \n        4 Pattern-Based Structure Model\n        Our approach begins with a preprocessing phase, which analyses the input geometry to detect structural regularity in the form of partial regular patterns. These patterns will be kept invariant in the later editing process. Regular patterns are defined with respect to a group of admissible transformations: Transformations: Let G be a group of bijective, continuous mappings R 3 ? R 3 . Throughout this paper, we will restrict our consideration to translations. Replications: For a transformation T ? G, let T x denote the xfold application of T, where x ? R is a continuous value. As we  are dealing with translations, which form a linear space, this corresponds to a multiplication by x. However, we will stick to the more general group notation because this shows more clearly the conceptual structure. It also indicates how our framework could be generalized to more complex groups of transformations (for example, including rotation). For a set A ? R, we will use the the notation T A := {T x |x ? A} in order to denote the set of powers of T. Furthermore, for P ? R 3 , we write T A (P) := ? x?A T x (P) to denote replications of P. In particular, T R (P) denotes the extrusion surface that replicates P continuously.\n        \n          4.1 Partial Regular Patterns S\n          Our goal is to preserve the symmetry structure of the input under deformations while admitting insertions and deletions of parts. The first step is to look at the global symmetries of S: Symmetry groups: The set of all operations T ? G that maps S to itself, i.e., T(S) = S forms a subgroup of G. For commutative groups, such as the translations we are considering, symmetry groups are isomorphic to infinite (potentially continuous) regular lattices [Pauly et al. 2008]. To deal with finite models and partial regularity, we include symmetric structures that are only excerpts of a larger grid. Due to commutativity, we can factor more general patterns into overlapping 1-parameter grids. Overall, this leads to the following model of a regular regular pattern: Partial 1-parameter symmetry groups (?patterns?): Consider P ? S and a generator transformation T ? G, and let I ? R be a real interval. If we have T I (P) ? S, we have found a continuous partial 1-parameter symmetry group of S. If I ? Z is an integer interval with at least three elements, we have found a discrete partial 1-parameter symmetry group. For brevity, we will call these structures continuous and discrete (regular) patterns, respectively.\n        \n        \n          4.2 Computational Framework\n          Discrete Patterns: We compute the discrete patterns by a symmetry analysis similar to Bokeloh et al. [2010] (see their paper for details): We detect sharp creases in the input mesh and combine pairs of adjacent, non-collinear creases to form ?bases?. Two base pairs are potentially corresponding if they have matching length and enclose the same angle. Very small feature lines (below 2.5% l(S)) are removed for efficiency reasons. We now use a RANSAC procedure to compute regular patterns: Random pairs of potentially corresponding bases are chosen and the relative transformation T is computed. We search for all potentially corresponding bases that are located at positions T x for some x ? R. This gives us initial pattern candidates. The next step is to extract generator transformations T that generate the 1-parameter groups T i , i ? I ? Z: We look at all pairwise transformations between candidate bases. For each pair, we compute the number of bases that lie on the grid T Z induced by the two bases. We output the choice of generator that yields the largest integer interval I of matching bases and exclude these from further processing. We iterate until no more valid patterns are found. Continuous patterns: Continuous symmetries are detected by slippage analysis, following the algorithm of [Gelfand and Guibas 2004], which can be trivially restricted to translational motions. Parts P that have the same continuous symmetry properties are extracted by simple region growing (see [Gelfand and Guibas 2004] for implementation details). Normalization: To remove overlapping, partial patterns, we always choose maximal sets P for the geometry involved and the smallest possible generating transformation (shortest translation  vector). In the discrete case, this is straightforward. In the continuous case, patterns are computed with a segmentation using slippage analysis [Gelfand and Guibas 2004]. Thus, the maximal surface parts P are regions with the same slippage properties. Using this representation, the interval I in the definition above vanishes and will be omitted for continuous symmetries in the following. Regular Patterns of S: Using these conventions, we obtain a finite set of discrete regular patterns R D = {(P 1 , T 1 , I 1 ) , ..., (P N , T N , I N )} and another finite set of continuous regular patterns R C = {(P 1 , T 1 ) , ..., (P M , T M )}.\n          ACM Transactions on Graphics, Vol. 30, No. 6, Article 123, Publication date: December 2011.\n          123:4\n          ?\n          M. Bokeloh et al.\n        \n      \n      \n        5 Deformation Model\n        In this section, we describe the global continuous deformation model that serves as the basis for our deformation framework. First, we describe the representation of the deformation function (Section 5.1). Second, we review the standard elastic deformation model, which serves as our base regularizer (Section 5.2). Third, we introduce additional structure-aware constraints in order to preserve regular patterns (Section 5.3).\n        \n          5.1 Representation\n          In order to compute a deformation, we embed the surface S into a volume V ? R 3 , S ? V, and deform this volume using a deformation field f : V ? R 3 . This approach has the benefit of making the deformation independent of the representation of S so that arbitrary types of input geometry and general surface topology can be handled easily. Following [Huang et al. 2006; Sumner et al. 2007], we use a subspace method to discretize f , i.e., we use a lowdimensional basis for representing the deformation: We create a number of nodes x 1 , ..., x k ? R 3 and center radial basis functions b i around them to define the deformation field:\n          \n            1\n            K f (x) = u i b i (x) i=1\n          \n          Here, u i ? R 3 are the deformed target positions of the nodes x i . As basis functions, we employ moving-least-squares (MLS) meshless basis functions of linear precision, based on a finite support Wendland kernel, as proposed in [Adams et al. 2008]. These functions are able to represent smooth deformation fields with a small number of nodes. We place the nodes by discretizing V to a regular grid of user specified spacing h. We set the support of the basis function to 2h to make sure that at least two basis functions overlap each surface point in x-, y-, and z-direction. The volume V itself is created by offsetting S by h in all directions (i.e., a Minkowski sum of a sphere of radius h and S). This guarantees that the basis functions and their derivatives are well defined on S. Remark: In the following, we use two basic numerical discretization constants. The first, h, determines the resolution of the deformation field, which is typically in the range of 5% l(S). In addition, we also use smaller constant (in the range of 1% l(S)) for discretizing other functions, such as symmetry information and to form neighborhoods for slippage analysis. f is determined by a variational approach: We set up an energy function E(f ) that is minimized by an optimal f :\n          \n            2\n            E = E u + ? r E r + ? c E c + ? d E d\n          \n          E u describes user constraints and E r is the base-regularizer that creates elastic behavior. These two terms correspond to a standard elastic shape deformation approach. We then add two additional terms to preserve the pattern structure: E c preserves continuous  patterns such as straight lines, and E d preserves discrete patterns. The ? ? control the influence of the different regularizers relative to the user constraints. We typically use ? r = 0.01 and ? c = ? d = 1.\n        \n        \n          5.2 Elastic Deformation\n          The first energy term E u accounts for user constraints. We use the standard ?handle? model where parts H i ? S of the input surface can be translated and rotated in space:\n          \n            3\n            2 (H) (H) E u (f ) = f (x) ? (R i x + t i ) dx H i ?H H i\n          \n          The second term E r is the elastic deformation energy. We employ a standard formulation based on a Poisson system [Sorkine et al. 2004] with co-rotated local frames [M?ller et al. 2002; Sorkine and Alexa 2007], adapted to the volumetric settings [Zhou et al. 2005]: We connect all pairs of nodes with overlapping shape functions and preserve their distance vectors: K 2 1 E r (f ) = ? i,j u i ? u j ? (R i + R j ) (x i ? x j ) 2 i=1 j?N (i) (4) Here, N (i) denotes accordingly the set of indices of nodes adjacent to node x i . The ? i,j are the weights of their coupling, which we set according to the Wendland kernel of the MLS basis (see [Zhou et al. 2005] for a more sophisticated scheme). The variables R i are rotation matrices at each node x i that are optimized along with the node displacements. Numerical solution: In order to solve for a minimum of the energy, we determine the derivative with respect to the u i , which is a linear, Laplacian-type system, and set it to zero. Next, we update the rotation R i by estimation from their neighbors. This procedure is iterated until convergence. Details can be found in [Sorkine and Alexa 2007]. Because of the special structure of this system, only the right-hand side changes during the iterations. Therefore, it is possible to prefactor the matrix so that the inversion can be solved by sparse matrix-vector products, leading to a substantial speed-up. As suggested in [Sorkine and Alexa 2007], we employ the TAUCS library for sparse Cholesky factorization [Toledo 2003].\n        \n        \n          5.3 Structure Aware Deformation\n          We now augment our deformation model so that it better preserves the structure of the deformed geometry. We first employ a general anisotropic deformation model in order to favor a local preservation of pattern structures. Secondly, we add global constraints that preserve continuous and discrete patterns.\n          \n            5.3.1 Local Constraints\n            Locally, we would like geometry to deform in a way that preserves continuous symmetries. If we look at this from the local perspective of the elastic regularizer, this means that we would like the deformation to happen along slippable motions rather than orthogonal to them, because this will only change the parametrization, but not the geometric shape. Accordingly, we augment Equation 4 by using an anisotropic error quadric in order to weight deformations. We replace the isotropic error term (u i ? u j ? 2 1 (R i + R j ) (x i ? x j )) 2 =: (d el i,j ) 2 by:\n            \n              5\n              el T 1 el d i,j (Q s (x i ) + Q s (x j )) d i,j 2\n            \n            where Q s (x) is computed by a translational slippage analysis:\n            \n              6\n              Q s (x) = n(y) ? n(y) T dy + 0.01 ? I. N h (x)\n            \n            ACM Transactions on Graphics, Vol. 30, No. 6, Article 123, Publication date: December 2011.\n            Pattern-Aware Shape Deformation Using Docking Sliders\n            ?\n            123:5\n            \n              \n              Figure 3: Constraint manifolds are constructed to preserve discrete (purple) and continuous (blue) pattern structures.\n            \n            Here, n(x) is a unit surface normal at x ? S, and N h (x) is the Euclidean h-neighborhood of x in S. Intuitively, this can be explained as an average of planar constraints: At each point, the outer products create quadrics that penalize deviations in normal direction only; tangential motions have zero cost. For complex geometry, the costs in different directions are averaged. Thus, a straight line will penalize anything but motions in its tangential direction and irregular geometry will resist any deformation. As we still need a base regularizer that diffuses stretch, even along perfectly straight lines, we add 1% of the identity matrix.\n          \n          \n            5.3.2 Global Constraints\n            The effect of the local model weakens with distance: Extended objects such as straight lines or flat planes can still show significant global bending. Increasing the weights could in principle solve this problem but would lead to an impractically ill-conditioned numerical system. Therefore, we introduce explicit global constraints to maintain general patterns globally. We address the continuous patterns first. The discrete case is discussed afterwards and requires only a few minor modifications. Let P be a part of constant slippage, which can have one or two translational degrees of freedom T 1 , T 2 . For each point y ? P we then consider the line or plane\n            \n              7\n              M(y) = T 1 R T R 2 (y),\n            \n            which is the affine constraint subspace M(y) for point y (see Figure 3). Let t 1 , t 2 be tangent vectors of this space. We form the quadric\n            \n              8\n              Q M (y) = I ? t 1 (y)t 1 (y) T + t 2 (y)t 2 (y) T ,\n            \n            which penalizes displacements that would take point y out of the constraint subspace. For the 1-slippable case, the same construction is made with a single tangent vector. During editing, only the orientation of the constraint spaces M(y) is fixed and translations of the complete pattern as a whole not penalized. This is obtained by expressing the constraints in terms of difference vectors, as described below. Numerical implementation: Given k slippable parts P 1 , ..., P k and corresponding sets of motions, we now build a global constraint energy that preserves continuous symmetries but nevertheless permits moving the patterns freely in space. We identify the region P i of each slippable part and sample them (i) uniformly with points q j , j = 1, . . . , n i of spacing h using Poisson disc sampling. We then connect the points with their centroid c (i) and form distance vectors between the centroid and all other sample points, which yields a star geometry.  The original, constant distance vectors are d j (i) = q (i) j ? c (i) . The (i) distance vectors in the deformed model are given by f (d j ) := f (q j (i) ) ? f (c (i) ). We then minimize the differences in a least squares sense:\n            k n i T (i) (i) (i) (i) (i) E c = f (d j ) ? d j Q M (q j ) f (d j ) ? d j i=1 j=1 (9)\n            (i) Weighting by the error quadric Q M (q j ) constrains the deviation to the tangent space of the constraint manifolds. Again, only constants in Equation 9 change, so that only the right-hand side of the linear system needs to be updated. This permits prefactorization, which is crucial for achieving real-time performance. Discrete patterns: In the discrete case, we use almost exactly the same constraints. We obtain 1-dimensional constraint manifolds as M(y) = T R (y), where T is the transformation that links two elements in the discrete pattern. For continuous patterns, moving surface points along their constraint manifold usually does not change the geometry substantially. In the discrete case, however, tangential drift is clearly noticeable because we have complex, non-slippable geometry being replicated. We therefore modify the constraints to enforce a constant step size: We use quadrics Q M (y) = I of full rank and use an equidistant stepping T Z (P) to constrain difference vectors between corresponding parts.\n          \n        \n      \n      \n        6 Sliding Dockers\n        In this section, we describe how our framework adapts the repetition count of discrete patterns in order to reduce stretch. In Sections 6.1 and 6.2, we examine the discrete patterns more closely and try to decompose their geometry into sliding dockers that allow changing the repetition count seamlessly. In Section 6.3, we describe how sliding dockers are integrated into the deformation framework. The interactive deformation proceeds in two steps. First, we let the user deform the object. In areas covered by discrete patterns, the anisotropic deformation weights (Equation 6) are changed such that deformation along motion field ? x T x incurs minimal penalties. In this step, the pattern area acts as a placeholder, allocating space for sliding dockers along the pattern?s motion direction. In the second step, we compute the stretch within the placeholder, round it, and insert an adapted number of instances. Then the deformation is recomputed for the new composition of the object. The two deformation steps are always performed in sequence and only the adapted shape is presented to the user.\n        \n          6.1 Defining Sliding Dockers\n          Our first task is to identify pieces of geometry that can be replicated. Let T I (P) ? S be a discrete pattern, as computed in Subsection 4.2. We now need to determine whether it contains elements that can be replicated while continuously interfacing with each other and with existing geometry. As shown in Figure 4 , such elements have to meet two types of boundary conditions. First, boundaries orthogonal to the motion field have to match each other; we therefore require symmetry of this geometry with respect to T. Second, in direction tangential to the motion, we require slippability with respect to T; by changing the repetition count, the boundaries of the pattern and the rest of the geometry will slide with respect to each other, and slippability will ensure that we always have matching geometry.\n          ACM Transactions on Graphics, Vol. 30, No. 6, Article 123, Publication date: December 2011.\n          123:6\n          ?\n          M. Bokeloh et al.\n          \n            \n            Figure 4: Boundary conditions for sliding dockers.\n          \n          We perform symmetry analysis to find all geometry within S that is symmetric with respect to T. We denote this geometry by S D (T):\n          \n            10\n            S D (T) := {x ? S|T(x) ? S}\n          \n          It is easy to see that the image of S D (T) under T is S D (T ?1 ); in other words, this is the area the symmetry transform maps to. By slippage analysis, we obtain the subset of S that is slippable with respect to T. We denote this set by S C (T). Consider a piece of geometry D ? S. We say that D is a sliding docker with respect to T if the following two conditions hold. First, the boundary ?D must be located entirely in either S D (T), S D (T ?1 ), or S C (T). Second, for every point x ? ?D in S D (T), the corresponding point T(x) ? S D (T ?1 ) must be included in the boundary ?D, and vice versa. In other words, we cut out a sliding docker by cutting through symmetric geometry and slippable area along the motion of the pattern; when cutting through the symmetric area, we need to use matching cut lines within S D (T) and S D (T ?1 ) so that the pieces fit together seamlessly later (see Figure 4). We can easily extend this definition to a whole array of sliding dockers. In order to find n matching dockers simultaneously, we require that the two boundary conditions are met by n replicated pieces along the motion direction, namely {D, T(D), T 2 (D), ..., T n?1 (D)}. We call such an ensemble a sliding docker group.  In order to find sliding dockers, we first need to compute the symmetry information. We use the same computational framework as Bokeloh et al. [2010]: Transformation candidates are estimated by matching feature lines, and we obtain the slippable motions from slippage analysis (Section 4.2). Motion space transform: In order to simplify further computations, we perform a transformation into motion space. In this space, one axis corresponds to the (translational) motion T x , while the other two axes y, z are two remaining Euclidean coordinate axes. For translations T, this is just a linear transform. As a notational convention, we will denote the motion coordinate as the x-axis of the motion space. Next, we build a voxel grid in motion space to represent the symmetry information (see Figure 5 for an illustration). The side length in the motion dimension and Euclidean dimensions is chosen such that the spacing in world coordinates is not larger than the discretization constant . Furthermore, we denote by l T the (integer) number of voxels that represent one application of the motion T. For each discrete regular pattern (P, T, I) ? R D , we transform the scene into the motion space of T (this is sped up by collecting all patterns that have the same motion space). We now retrieve the geometry in every non-empty voxel (i, j, k) and match the content against voxels (i + l T , j, k), corresponding to the transformed geometry. Matching voxels are tagged as symmetric. Next, we compute the slippability of each voxel and check for each T-slippable voxel (i, j, k) whether all voxels (i, j, k), (i + 1, j, k), ..., (i + l T , j, k) are T-slippable as well. If so, we mark the voxel as fully slippable. This means that the geometry at this voxel v, as well as all geometry along the motion T [0,1] (v) is slippable, which is what we need to cut out a sliding docker. We perform this analysis for all non-empty voxels, as well as for empty voxels that are direct neighbors of occupied ones. Empty voxels must map to other empty voxels in order to be fully slippable. Extracting sliding dockers: After this precomputation, finding a sliding docker is simple. We start at a symmetric voxel and grow in the (y, z)-plane of the motion space until we either hit a nonsymmetric voxel, or a fully slippable voxel. If we hit a single nonsymmetric voxel, we dismiss the whole attempt. If we only end at fully slippable voxels (including the empty fully slippable ones), we have found a sliding docker: We can just cut out an extrusion of the visited region in x-direction in motion space. By transforming back into world coordinates, we obtain the final sliding docker. When performing this computation, we always try to find a maximal sliding docker group by checking for symmetry and full slippability with respect to T, T 2 , ... simultaneously (this corresponds to testing voxels separated by multiples of l T in the x-direction). The whole computation is attempted for each base of a detected pattern. This yields a large number of sliding dockers, most of which overlap. In order to remove overlapping pieces, we use a simple greedy algorithm: We take the largest sliding docker group (i.e., the one with the highest repetition count) and delete all overlapping sliding docker groups. This is iterated until no more sliding docker groups are found.\n          6.2 Finding Sliding Dockers\n          \n            \n            Figure 5: Sliding dockers are extracted by region growing in motion space. Starting from a pattern base, we grow orthogonally to the motion direction, using only symmetric voxels. We proceed until either hitting only fully slippable voxels (success) or a nonsymmetric voxel (failure).\n          \n        \n        \n          6.3 Using Sliding Dockers\n          We can now integrate the sliding dockers into our deformation framework. First, we have to set up the first of the two deformation steps. We mark all areas that are covered by a sliding docker group.  At each such point, we deactivate all regularizers except from the elastic deformation energy. Let t(y) be a normalized vector parallel to the constant tangent ? x T x (y) of the motion field. We then set the error quadric of the elastic deformation model (Equations 5, 6) to I ? tt T + 0.01 ? I. This makes the geometry easily stretchable in the pattern direction. For the rest of the model, we use all energy terms as previously described, including global and local pattern preserving constraints. We then solve the resulting system. In the result, we measure the stretch of the pattern region by integrating along lines of the motion direction: We connect corresponding points in neighboring instances of the pattern elements and compute the average length. Dividing the value for the deformed and undeformed state gives us a stretch factor F . We multiply this factor by the number of original repetitions and round it to the nearest integer to determine the number of elements to insert. For inserting elements, we again use the motion space. We scale the elements by the inverse stretch factor in the x-direction of the motion space, concatenate the pieces, and backtransform into world coordinates. We then replace the original pattern with the adapted one. Next, we need to make sure that the elastic deformation model undoes the stretch: If we add more elements, this means that we squeeze smaller replicas into the original space. The energy of Equation 4 would then try to preserve this configuration in an asrigid-as-possible manner. Therefore, we augment the distance vectors: Instead of the distances of the squeezed elements, we employ the original distance vectors. For basis functions that overlap regions that are stretched by different factors, we compute a weighted average according to the respective kernel function of that node. As error quadrics, we use full rank identity matrices, aiming at preserving the original shape of the inserted pattern elements. A small detail helps at this point to improve the quality of the results: At the boundary between prestreched and unstreched geometry, the elastic deformation model tends to produce artifacts. Therefore, we set different error quadrics for pairs of nodes that connect across normal geometry and sliding docker areas. We use a quadric I ? tt T in order to make the boundary slidable, not diffusing the errors introduced by the stress discontinuity. Assembling a new shape by inserting stretched patterns creates shapes that are only C 0 -continuous at the boundaries. The elastic deformation model will aim at undoing the deformation, but the subspace model cannot represent high frequency details, which implies that visible artifacts at the boundaries can remain. In order to avoid this problem, we need to make sure that the new base shape that we create is actually smooth and the deformation is low frequency. Therefore, we use a windowing function g(x) in the direction of the motion. We transition from the constant stretch factor of 1 to a different stretch s using a smooth step function. We employ a cosine step function (1?0.5s cos x) to transition from stretch 1 to a new constant stretch of s, and a similar cosine step leads back to 1. This function can be integrated analytically (to obtain the positions, rather than their derivatives) and inverted so that we can compute the inner stretch s that makes all instances fit into the placeholder. We fix the support of the smooth steps to always cover a support of at least 2h each, thereby creating a low-frequency distortion that remains within the Nyquist limit of the deformation model.\n          ACM Transactions on Graphics, Vol. 30, No. 6, Article 123, Publication date: December 2011.\n          Pattern-Aware Shape Deformation Using Docking Sliders\n          ?\n          123:7\n        \n      \n      \n        7 Implementation and Results\n        We have implemented the described shape editing system in C++ and evaluated it on a commodity workstation with an Intel Core-2 Quad CPU with 2.6GHz cores and 8GB of RAM. Our implemen tation is single-threaded. As benchmark data, we have collected a number of models from commercial 3D model libraries. We use models from the Digimation Archive (www.digimation.com). We also include examples from [Kraevoy et al. 2008] and [Bokeloh et al. 2010]. For models with large triangles, we perform one or more 1:4 subdivision steps to obtain a sufficiently densely sampled mesh such that even elastic deformation with bending can be accommodated. The resulting models are output as collections of triangles that generally do not form watertight meshes, and are thus in general ?polygon soups.? Figures 2 and 7 show a number of example models that have been edited using our approach. Please refer to the accompanying video for a demonstration of interactive editing. The deformation results produced by the technique are quite plausible; for many of the examples, it would be challenging to identify the original model without the highlighting. Some minor artifacts can be seen due to small-scale irregularities in the input geometry, which cause some patterns to only be detected in chunks, leading to a small amount of residual deformation. The blue examples use only the elastic energy term (Equation 2), with discrete relaxation still enabled. Despite strong bending, our approach reliably adapts the repetition count of the patterns without visible seams, discontinuities, gaps, or similar artifacts. In some models, the triangulation becomes visible; this could be resolved by a better adaptive mesh subdivision scheme. Parameters: Our algorithm is not very sensitive to parameter settings, and we mostly use default parameters everywhere. Only one parameter has a strong effect on the quality of the results: The error threshold for matching approximately symmetric line features. For complex models, we also increase the resolution of the subspace deformation model (the Westminster Palace model uses 2.5% l(S) instead of 5% l(S), which leads to a reduced interactive frame-rate) and lower the minimum size of relevant features. Timings: As shown in the video, editing can be done interactively for all presented models. The structure analysis in preprocessing takes up to a few minutes for each model, and prefactorization of the linear systems adds ten more seconds. Effect of individual energy terms: In Figure 6 , we show that all ingredients of the variational framework are necessary to obtain good results. Deactivating the elastic energy means that stretch is not diffused. The local constraints are helpful as they provide a better base regularizer for object parts where no patterns are found.\n        \n          \n          Figure 6: The effect of individual energy terms in the variational deformation framework. Leaving out any single energy term leads to artifacts. (a) input model, (b) no elasticity, (c) no local constraints, (d) no global constraints, (e) full energy.\n        \n        ACM Transactions on Graphics, Vol. 30, No. 6, Article 123, Publication date: December 2011.\n        123:8\n        ?\n        M. Bokeloh et al.\n        \n          \n        \n        bench\n        \n          \n        \n        balustrade\n        \n          \n        \n        air bridge\n        \n          \n        \n        canvas chair\n        \n          Figure 7: Interactive pattern-aware shape editing. The original input is shown in orange and editing results are shown in grey and blue. The repetition counts of discrete patterns in the edited shapes were automatically adapted by the framework. For the blue models, pattern preservation constraints were disabled and only the elastic energy was used, in order to allow for more severe deformation.\n          \n        \n        oil platform\n        \n          \n        \n        oil tank\n        \n          \n        \n        castle\n        \n          \n        \n        Westminster Palace\n        ACM Transactions on Graphics, Vol. 30, No. 6, Article 123, Publication date: December 2011.\n        Pattern-Aware Shape Deformation Using Docking Sliders\n        ?\n        123:9\n        \n          \n          \n        \n        (a) original shape (b) docking sites\n        \n          \n          \n        \n        (c) sliding dockers (d) deformation result\n        \n          Figure 8: Sliding dockers are detected where no docking sites can be found by the technique of Bokeloh et al. [2010]. Given an input shape, shown in (a), the existence of docking sites is contingent on symmetric cuts that partition the shape into disconnected pieces. As illustrated in (b), such cuts are not found in the temple due to the shape of the roof. On the other hand, sliding dockers do not require global symmetries and are successfully detected (c) and applied by our technique (d).\n        \n        The global constraints are necessary to keep objects straight; without them, global bending cannot be prevented. Comparison to related work: Figure 7 shows the ?oil tank? model used by Kraevoy et al. [2008]. Our technique achieves comparable results, while detecting the stretch axes fully automatically. (The shape does not need to be aligned with the global coordinate axes.) Since we only penalize structural deviations in a leastsquares sense, a small amount of residual bending remains. The ?castle? example in Figure 7 demonstrates that our approach is more general: The castle can be stretched in non-orthogonal directions that are determined fully automatically by our pattern-aware structure model. In comparison to Bokeloh et al. [2010], our approach can adapt the discrete structure of the model in real time in response to continuous free-form deformation, instead of being driven by manually specified rigid shape operations. Furthermore, sliding dockers are found in examples where the analysis technique of Bokeloh et al. fails to detect global cuts, such as the arches in Figure 2 and the columns in Figure 8 . In the latter example, the temple roof is not partially symmetric under transformation T and thus no docking sites can be detected, as shown in Figure 8(b) . On the other hand, sliding dockers do not rely on global cuts, allowing the temple to be resized as shown in Figure 8(d) .\n      \n      \n        8 Discussion\n        We have presented a structure-aware deformation technique that uses the elementary assumption of preserving regular patterns, which we model as 1-parameter partial symmetry groups. We have developed a variational optimization technique that preserves such structures in a least squares sense, while distributing the remaining stretch uniformly. In addition, we introduced sliding dockers that allow the technique to fully automatically insert or delete repeated elements in discrete patterns in order to minimize distortions due to free-form deformation. Furthermore, we have presented a numerical framework that uses a subspace formulation with prefactored linear systems to implement the presented approach efficiently and\n        robustly in a real-time system.\n        Limitations: One limitation of the current approach is the handling of small-scale irregularities in the input 3D model. Objects that appear perfectly regular often have geometric inconsistencies because the artist did not accurately align parts of the original model; errors of 10% are not uncommon. While we can compensate for this by introducing a small numerical threshold in the pattern detection algorithm, irregularities in the input can cause the shape analysis stage to overlook visually salient patterns. For the Westminster Palace model, we had to manually adjust the original geometry in one place to repair a single discrete pattern. Making the analysis stage more robust to approximate regularity is a natural avenue for future work, possibly using a feature graph matching approach [Bokeloh et al. 2009]. A further limitation, and another interesting avenue for future work, is that all sliding docker groups currently need to be mutually disjoint and can thus have only a single repetition parameter (one-parameter grids). Handling discrete changes of twoand three-parameter grids as well as more general overlapping and hierarchical patterns could extend the applicability of our approach to more complex structures.  Our current implementation uses a regular sampled deformation field, which can lead to distortions when opposing constraints are spatially close. In Figure 9 , we show the most noticeable artifacts of the current system, caused by insufficient resolution in the deformation field. Here, opposing pattern constraints act on the same deformation nodes and the system opts for an equilibrium between the constraints, resulting in undesired distortions. This could be alleviated using an adaptive deformation field that increases the resolution locally at difficult locations. Another limitation of the presented approach is that it only handles translations. In future work, we would like to investigate structure models that utilize more invariant notions of similarity, possibly incorporating rotation, scaling, or more general invariants such as intrinsic isometries. Our current implementation also imposes discrete constraints on individual sliding docker groups and does not connect multiple groups that form linked patterns. Finally, the presented work focuses on 1-parameter patterns: Future work could pursue a more comprehensive representation of the algebraic structure of partial symmetries for shape deformation. Lifting these limitations can meaningfully advance the capabilities of interactive shape editing tools.\n      \n      \n        Acknowledgments\n        This work has been supported by the cluster of excellence ?Multimodal computing and interaction? and the Max-Planck-Center for visual computing and communication.\n      \n      \n        References\n        \n          A DAMS , B., O VSJANIKOV , M., W AND , M., S EIDEL , H.-P., AND G UIBAS , L. J. 2008. Meshless modeling of deformable shapes and their motion. In Symposium on Computer Animation.\n          A LLEN , B., C URLESS , B., AND P OPOVI C  ? , Z. 2003. The space of human body shapes: reconstruction and parameterization from range scans. In SIGGRAPH ?03: ACM SIGGRAPH 2003 Papers, ACM, New York, NY, USA, 587?594.\n          B EN -C HEN , M., W EBER , O., AND G OTSMAN , C. 2009. Variational harmonic maps for space deformation. ACM Transactions on Graphics 28, 3.\n          (a)  (b)\n        \n        ACM Transactions on Graphics, Vol. 30, No. 6, Article 123, Publication date: December 2011.\n        123:10\n        ?\n        M. Bokeloh et al.\n        \n          \n          \n        \n        \n          Figure 9: Undesired distortions can appear where competing constraints affect the same region. This is often caused by insufficient resolution of the deformation field. (a) Two neighboring patterns (orange) starting at different positions result in opposing constraints that are not handled well with a low frequency deformation field. (b) Undetected patterns and insufficient resolution in the deformation field can cause large distortions.\n        \n        B OKELOH , M., B ERNER , A., W AND , M., S EIDEL , H.-P., AND S CHILLING , A. 2009. Symmetry detection using line features. Computer Graphics Forum 28, 2.\n        B OKELOH , M., W AND , M., AND S EIDEL , H.-P. 2010. A connection between partial symmetry and inverse procedural modeling. ACM Trans. Graph. 29 (July), 104:1?104:10. B OTSCH , M., AND S ORKINE , O. 2008. On linear variational surface deformation methods. IEEE Transactions on Visualization and Computer Graphics 14, 1, 213?230. C OQUILLART , S. 1990. Extended free-form deformation: a sculpturing tool for 3d geometric modeling. In Proc. Siggraph.\n        F UNKHOUSER , T., K AZHDAN , M., S HILANE , P., M IN , P., K IEFER , W., T AL , A., R USINKIEWICZ , S., AND D OBKIN , D. 2004. Modeling by example. ACM Trans. Graph. 23, 3.\n        G AL , R., S ORKINE , O., M ITRA , N., AND C OHEN -O R , D. 2009. iwires: An analyze-and-edit approach to shape manipulation. ACM Trans. Graph. 28, 3. G ELFAND , N., AND G UIBAS , L. 2004. Shape segmentation using local slippage analysis. In Proc. Symp. Geometry Processing. H UANG , J., S HI , X., L IU , X., Z HOU , K., W EI , L.-Y., T ENG , S.H., B AO , H., G UO , B., AND S HUM , H.-Y. 2006. Subspace gradient domain mesh deformation. ACM Trans. Graph. 25, 3. H UANG , Q., M ECH , R., AND C ARR , N. 2009. Optimizing structure preserving embedded deformation for resizing images and vector art. In Pacific Graphics.\n        J OSHI , P., M EYER , M., D E R OSE , T., G REEN , B., AND S ANOCKI , T. 2007. Harmonic coordinates for character articulation. ACM Trans. Graph. 26 (July). J U , T., S CHAEFER , S., AND W ARREN , J. 2005. Mean value coordinates for closed triangular meshes. ACM Trans. Graph. 24 (July), 561?566. K RAEVOY , V., J ULIUS , D., AND S HEFFER , A. 2007. Shuffler: Modeling with interchangeable parts. In Pacific Graphics 2007. K RAEVOY , V., S HEFFER , A., S HAMIR , A., AND C OHEN -O R , D. 2008. Non-homogeneous resizing of complex models. ACM Trans. Graph. 27, 5, 1?9. L IPMAN , Y., L EVIN , D., AND C OHEN -O R , D. 2008. Green coordinates. ACM Trans. Graph. 27 (August).\n        L IU , L., Z HANG , L., X U , Y., G OTSMAN , C., AND G ORTLER , S. 2008. A local/global approach to mesh parameterization. Computer Graphics Forum 27, 5, 1495?1504. M ITRA , N. J., AND P AULY , M. 2008. Symmetry for architectural design. In Advances in Architectural Geometry, 13?16. M ITRA , N. J., G UIBAS , L. J., AND P AULY , M. 2006. Partial and approximate symmetry detection for 3d geometry. ACM Trans. Graph. 25, 3, 560?568. M ULLER  ? , M., D ORSEY , J., M C M ILLAN , L., J AGNOW , R., AND B., C. 2002. Stable real-time deformations. In Proc. Symp. Computer Animation (SCA), 49?54. P AULY , M., M ITRA , N., G IESEN , J., G ROSS , M., AND G UIBAS , L. J. 2005. Example-based 3d scan completion. In Proc. Symp. Geometry Processing. P AULY , M., M ITRA , N. J., W ALLNER , J., P OTTMANN , H., AND G UIBAS , L. 2008. Discovering structural regularity in 3D geometry. ACM Trans. Graph. 27, 3. P ODOLAK , J., S HILANE , P., G OLOVINSKIY , A., R USINKIEWICZ , S., AND F UNKHOUSER , T. 2006. A planar-reflective symmetry transform for 3D shapes. ACM Trans. Graph. 25, 3. S EDERBERG , T. W., AND P ARRY , S. R. 1986. Free-form deformation of solid geometric models. In Proc. Siggraph, 151?160. S IMARI , P., K ALOGERAKIS , E., AND S INGH , K. 2006. Folding meshes: hierarchical mesh segmentation based on planar symmetry. In Proc. Symp. Geometry Processing, 111?119. S ORKINE , O., AND A LEXA , M. 2007. As-rigid-as-possible surface modeling. In Proceedings of Eurographics/ACM SIGGRAPH Symposium on Geometry Processing, 109?116. S ORKINE , O., C OHEN -O R , D., L IPMAN , Y., A LEXA , M., R OSSL  ? , C., AND S EIDEL , H.-P. 2004. Laplacian surface editing. In Symposium on Geometry processing. S UMNER , R. W., S CHMID , J., AND P AULY , M. 2007. Embedded deformation for shape manipulation. ACM Trans. Graph. 26, 3. T ERZOPOULOS , D., P LATT , J., B ARR , A., AND F LEISCHER , K. 1987. Elastically deformable models. In Proc. SIGGRAPH ?87, ACM, New York, NY, USA, 205?214. T OLEDO , S., 2003. Taucs: A library of sparse linear solvers. TelAviv University, http://www.tau.ac.il/ stoledo/taucs/. VON F UNCK , W., T HEISEL , H., AND S EIDEL , H.-P. 2006. Vector field based shape deformations. ACM Trans. Graph. 25, 3. W ANG , Y., X U , K., L I , J., Z HANG , H., S HAMIR , A., L IU , L., C HENG , Z., AND X IONG , Y. 2011. Symmetry hierarchy of man-made objects. In Proc. Eurographics. W U , H., W ANG , Y.-S., F ENG , K.-C., W ONG , T.-T., L EE , T.-Y., AND H ENG , P.-A. 2010. Resizing by symmetry-summarization. ACM Transactions on Graphics 29, 6. X U , W., W ANG , J., Y IN , K., Z HOU , K., VAN DE P ANNE , M., C HEN , F., AND G UO , B. 2009. Joint-aware manipulation of deformable models. ACM Trans. Graph. 28, 3, 1?9. Z HENG , Y., F U , H., C OHEN -O R , D., A U , O. K.-C., AND T AI , C.-L. 2011. Component-wise controllers for structurepreserving shape manipulation. In Proc. Eurographics. Z HOU , K., H UANG , J., S NYDER , J., L IU , X., B AO , H., G UO , B., AND S HUM , H.-Y. 2005. Large mesh deformation using the volumetric graph laplacian. ACM Trans. Graph. 24, 3, 496?503.\n        ACM Transactions on Graphics, Vol. 30, No. 6, Article 123, Publication date: December 2011.\n      \n    \n  ",
  "resources" : [ ]
}