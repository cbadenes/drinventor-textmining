{
  "uri" : "sig2008-a34-ben-chen_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2008/a34-ben-chen_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Variational Harmonic Maps for Space Deformation",
    "published" : "2009",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Mirela-Ben-Chen",
      "name" : "Mirela",
      "surname" : "Ben-Chen"
    }, {
      "uri" : "http://drinventor/Ofir-Weber",
      "name" : "Ofir",
      "surname" : "Weber"
    }, {
      "uri" : "http://drinventor/Craig-Gotsman",
      "name" : "Craig",
      "surname" : "Gotsman"
    } ]
  },
  "bagOfWords" : [ "space", "deformation", "mapping", "from", "source", "region", "target", "region", "within", "euclidean", "space", "which", "best", "satisfy", "some", "userspecified", "constraint", "can", "use", "deform", "shape", "embed", "ambient", "space", "represent", "various", "form", "polygon", "mesh", "point", "cloud", "volumetric", "datum", "space", "deformation", "method", "useful", "should", "possess", "some", "natural", "property", "e.g.", "detail", "preservation", "smoothness", "intuitive", "control", "harmonic", "map", "from", "domain", "mapping", "whose", "component", "harmonic", "function", "harmonic", "mapping", "smooth", "regular", "component", "couple", "some", "special", "way", "mapping", "can", "detail-preserving", "make", "natural", "choice", "space", "deformation", "application", "challenge", "find", "harmonic", "mapping", "domain", "which", "satisfy", "constraint", "specify", "user", "yet", "also", "detail-preserving", "intuitive", "control", "result", "mapping", "harmonic", "natural", "``", "as-rigid-as-possible", "''", "deformation", "source", "region", "show", "much", "more", "efficient", "yet", "generate", "comparable", "deformation", "state-ofthe-art", "method", "we", "describe", "optimization", "algorithm", "minimize", "deformation", "energy", "which", "robust", "provably", "convergent", "easy", "implement", "space", "deformation", "method", "deform", "ambient", "space", "which", "shape", "embedded", "instead", "explicitly", "deform", "shape", "itself", "first", "more", "general", "than", "explicit", "deformation", "space", "deformation", "can", "apply", "any", "shape", "representation", "whether", "polygonal", "mesh", "point", "cloud", "volumetric", "datum", "________________________", "Copyrights", "component", "work", "own", "other", "than", "ACM", "must", "honor", "abstract", "credit", "permit", "copy", "otherwise", "republish", "post", "server", "redistribute", "list", "use", "any", "component", "work", "other", "work", "require", "prior", "specific", "permission", "and/or", "fee", "permission", "may", "request", "from", "Publications", "Dept.", "ACM", "Inc.", "Penn", "Plaza", "Suite", "701", "New", "York", "NY", "10121-0701", "fax", "+1", "-lrb-212-rrb-Â 869-0481", "permissions@acm.org", "2009", "ACM", "0730-0301/2009", "03-art34", "10.00", "DOI", "10.1145", "1531326.1531340", "http://doi.acm.org/10.1145/1531326.1531340", "second", "deform", "ambient", "space", "computational", "complexity", "deformation", "decouple", "from", "complexity", "shape", "hence", "even", "extremely", "complex", "shape", "can", "deform", "interactive", "rate", "base", "source", "target", "cage", "mapping", "source", "cage", "define", "mapping", "function", "have", "closed-form", "expression", "deformation", "method", "become", "accurate", "efficient", "other", "hand", "manipulate", "cage", "tedious", "time-consuming", "task", "more", "user-friendly", "natural", "deformation", "method", "direct", "manipulation", "user", "position", "small", "number", "``", "control", "point", "''", "inside", "domain", "manipulate", "they", "instead", "cage", "method", "-lsb-", "Huang", "et", "al.", "2006", "Sumner", "et", "al.", "2007", "Botsch", "et", "al.", "2007", "-rsb-", "define", "space", "deformation", "domain", "which", "coarser", "than", "input", "shape", "solve", "optimization", "problem", "find", "parameter", "deformation", "give", "user", "'s", "constraint", "we", "propose", "use", "harmonic", "map", "source", "region", "underlie", "deformation", "model", "special", "case", "domain", "polyhedron", "basis", "function", "first", "second", "derivative", "have", "closed-form", "expression", "harmonic", "map", "first", "user", "manipulate", "set", "position", "orientation", "constraint", "instead", "directly", "manipulate", "``", "source", "cage", "''", "hence", "we", "method", "more", "intuitive", "easy", "control", "finally", "since", "we", "have", "closed-form", "expression", "also", "gradient", "deformation", "we", "optimization", "procedure", "may", "base", "alternate", "least-square", "``", "local/global", "''", "algorithm", "which", "until", "now", "applicable", "only", "discrete", "mesh-based", "setting", "addition", "quite", "simple", "implement", "guarantee", "converge", "we", "shall", "thus", "concentrate", "space", "deformation", "method", "most", "relevant", "we", "work", "cage", "typically", "piecewise-linear", "close", "surface", "user", "manipulate", "vertex", "cage", "generate", "target", "cage", "deformation", "define", "relationship", "between", "two", "cage", "unfortunately", "mean-value", "coordinate", "guarantee", "positive", "inside", "domain", "unless", "convex", "however", "harmonic", "coordinate", "solution", "Dirichlet", "problem", "boundary", "domain", "do", "have", "closed", "form", "expression", "thus", "compute", "coordinate", "easy", "all", "cage-based", "method", "have", "common", "disadvantage", "detailed", "deformation", "possible", "only", "relatively", "complex", "cage", "cage", "even", "few", "hundred", "face", "extremely", "hard", "manipulate", "order", "generate", "satisfying", "result", "major", "difference", "between", "two", "method", "result", "order", "achieve", "detail-preservation", "we", "need", "solve", "non-linear", "minimization", "problem", "whereas", "Weber", "et", "al.", "-lsb-", "2009", "-rsb-", "optimization", "require", "solution", "linear", "system", "however", "both", "hard", "compute", "cause", "serious", "shearing", "effect", "affine", "transformation", "associate", "each", "node", "deformation", "graph", "which", "describe", "transformation", "node", "undergo", "transformation", "variable", "energy", "function", "which", "force", "they", "rigid", "have", "smooth", "behavior", "minimize", "energy", "combine", "position", "constraint", "impose", "user", "generate", "deformation", "parameter", "deformation", "graph", "addition", "smoothness", "deformation", "enforce", "discretely", "require", "neighbor", "face", "deformation", "graph", "have", "similar", "transformation", "here", "deformation", "also", "compute", "solve", "non-linear", "optimization", "problem", "use", "multi-grid", "framework", "other", "direct", "surface", "manipulation", "technique", "exist", "those", "Sorkine", "et", "al.", "-lsb-", "2004", "-rsb-", "Lipman", "et", "al.", "-lsb-", "2005", "-rsb-", "sorkine", "alexa", "-lsb-", "2007", "-rsb-", "mention", "only", "few", "however", "method", "work", "directly", "surface", "manifold", "mesh", "somewhat", "limited", "can", "apply", "other", "shape", "representation", "polygon", "soup", "point", "cloud", "we", "formulation", "deformation", "mapping", "base", "Green", "'s", "third", "identity", "which", "relate", "value", "harmonic", "function", "boundary", "region", "its", "value", "inside", "region", "closely", "related", "both", "Green", "coordinate", "define", "Lipman", "et", "al.", "-lsb-", "2008", "-rsb-", "common", "method", "solve", "boundaryvalue", "problem", "know", "Boundary", "element", "method", "''", "BEM", "-lsb-", "Kythe", "1995", "-rsb-", "despite", "common", "mathematical", "machinery", "we", "approach", "somewhat", "different", "from", "both", "method", "input", "polyhedral", "cage", "enclose", "some", "region", "interest", "set", "position", "orientation", "constraint", "number", "point", "within", "cage", "goal", "optimization", "problem", "minimize", "energy", "functional", "which", "require", "detail", "preservation", "smoothness", "while", "enforce", "user", "'s", "constraint", "thus", "function", "analogous", "vertex", "location", "target", "cage", "analogous", "normal", "face", "however", "important", "difference", "we", "setup", "function", "independent", "whereas", "Green", "coordinate", "setup", "-lrb-", "normal", "face", "target", "cage", "-rrb-", "uniquely", "define", "-lrb-", "vertex", "target", "cage", "-rrb-", "give", "input", "domain", "region", "space", "which", "we", "shape", "lie", "we", "consider", "all", "possible", "harmonic", "mapping", "domain", "we", "would", "like", "select", "mapping", "from", "linear", "space", "which", "both", "satisfy", "user", "'s", "constraint", "detail-preserving", "we", "now", "use", "eq", "addition", "we", "would", "like", "restrict", "specific", "type", "so", "we", "can", "find", "closed", "expression", "integral", "face", "cage", "derivative", "case", "we", "should", "use", "-lrb-", "-rrb-", "aq", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "hence", "piecewise-linear", "cage", "can", "restricted", "piecewise-linear", "since", "piecewise-linear", "surface", "have", "piecewiseconstant", "normal", "can", "restricted", "piecewise-constant", "we", "discuss", "now", "specifically", "three-dimensional", "case", "region", "bound", "triangle", "mesh", "-lrb-", "-rrb-", "vertex", "its", "face", "mention", "arbitrary", "mapping", "anymore", "piecewise-linear", "map", "define", "value", "vertex", "-lcb-", "-rcb-", "piecewise", "constant", "map", "define", "value", "face", "-lcb-", "-rcb-", "transpose", "Jacobian", "deformation", "point", "case", "we", "would", "like", "deform", "normal", "well", "shape", "attempt", "satisfy", "constraint", "specify", "user", "addition", "balance", "detail", "preservation", "smoothness", "figure", "color-code", "determinant", "condition", "number", "Jacobian", "deformation", "vertical", "slice", "through", "shape", "since", "we", "can", "prescribe", "Jacobians", "deformation", "any", "location", "we", "choose", "we", "prescribe", "Jacobians", "medial", "axis", "close", "possible", "rotation", "way", "we", "do", "not", "need", "compute", "desire", "transformation", "boundary", "domain", "imply", "from", "smoothness", "deformation", "hence", "we", "would", "like", "minimize", "follow", "rigidity", "energy", "min", "-lrb-", "-rrb-", "rigid", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "course", "-lrb-", "-rrb-", "know", "advance", "hence", "optimization", "process", "non-linear", "other", "hand", "know", "optimal", "rotation", "matrix", "those", "which", "closest", "Frobenius", "norm", "Jacobians", "deformation", "map", "also", "have", "closed-form", "solution", "let", "we", "now", "turn", "more", "detailed", "description", "minimization", "process", "right", "hand", "side", "linear", "equation", "user", "'s", "position", "orientation", "constraint", "unknown", "rotation", "matrix", "anchor", "point", "energy", "can", "now", "write", "az", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "constant", "determine", "relative", "weight", "smoothness", "constraint", "vs.", "rigidity", "constraint", "matrix", "norm", "infinity", "norm", "maximal", "norm", "row", "matrix", "user", "specify", "parameter", "which", "can", "use", "control", "stiffness", "deformation", "ideally", "we", "would", "like", "compare", "singular", "value", "Jacobian", "3d", "transformation", "since", "other", "two", "method", "we", "do", "have", "access", "actual", "deformation", "function", "rather", "only", "end", "result", "unfortunately", "easily", "do", "some", "application", "one", "might", "require", "deformation", "quasi-conformal", "mean", "condition", "number", "Jacobian", "deformation", "bound" ],
  "content" : "A space deformation is a mapping from a source region to a target region within Euclidean space, which best satisfies some userspecified constraints. It can be used to deform shapes embedded in the ambient space and represented in various forms ? polygon meshes, point clouds or volumetric data. For a space deformation method to be useful, it should possess some natural properties: e.g. detail preservation, smoothness and intuitive control. A harmonic map from a domain ? ? R d to R d is a mapping whose d components are harmonic functions. Harmonic mappings are smooth and regular, and if their components are coupled in some special way, the mapping can be detail-preserving, making it a natural choice for space deformation applications. The challenge is to find a harmonic mapping of the domain, which will satisfy constraints specified by the user, yet also be detail-preserving, and intuitive to control. The resulting mapping is harmonic, and a natural \"As-Rigid-As-Possible\" deformation of the source region. It is shown to be much more efficient, yet generate comparable deformations to state-ofthe-art methods. We describe an optimization algorithm to minimize the deformation energy, which is robust, provably convergent, and easy to implement. Space deformation methods deform the ambient space in which a shape is embedded, instead of explicitly deforming the shape itself. First, they are more general than explicit deformation ? space deformation can be applied to any shape representation, whether it is a polygonal mesh, a point cloud or volumetric data. ________________________ Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, to republish, to post on servers, to redistribute to lists, or to use any component of this work in other works requires prior specific permission and/or a fee. Permissions may be requested from Publications Dept. , ACM, Inc. , 2 Penn Plaza, Suite 701, New York, NY 10121-0701, fax +1 (212) 869-0481, or permissions@acm.org . ? 2009 ACM 0730-0301/2009/03-ART34 $10.00 DOI 10.1145/1531326.1531340 http://doi.acm.org/10.1145/1531326.1531340 Second, by deforming the ambient space, the computational complexity of the deformation is decoupled from the complexity of the shape, hence even extremely complex shapes can be deformed at interactive rates. Then, based on the source and target cages, a mapping of the source cage is defined. If the mapping function has a closed-form expression, the deformation method becomes accurate and efficient. On the other hand, manipulating a cage is a tedious and time-consuming task. A more user-friendly and natural deformation method is direct manipulation ? the user positions a small number of \"control points\" inside the domain, and manipulates them instead of the cage. Such methods [Huang et al. 2006; Sumner et al. 2007; Botsch et al. 2007] define the space deformation on a domain which is coarser than the input shape, and solve an optimization problem to find the parameters of the deformation, given the user's constraints. We propose to use harmonic maps of the source region as the underlying deformation model. In the special case that the domain is a polyhedron, these basis functions, and their first and second derivatives, will have closed-form expressions, as will the harmonic maps. First, the user manipulates a set of position and orientation constraints, instead of directly manipulating the \"source cage\", hence our method is more intuitive and easy to control. And finally, since we have closed-form expressions also for the gradients of the deformation, our optimization procedure may be based on an alternating least-squares \"local/global\" algorithm, which, until now, was applicable only in discrete mesh-based settings. In addition, it is quite simple to implement, and guaranteed to converge. We shall thus concentrate on the space deformation methods most relevant to our work. The cage is typically a piecewise-linear closed surface. The user then manipulates the vertices of this cage to generate a target cage and the deformation is defined by the relationship between these two cages. Unfortunately, mean-value coordinates are not guaranteed to be positive inside the domain unless it is convex. However, harmonic coordinates are the solution of a Dirichlet problem on the boundary of the domain, and they do not have a closed form expression. Thus, computing these coordinates is not easy. All the cage-based methods have a common disadvantage ? detailed deformations are possible only with relatively complex cages, and such cages ? even with a few hundred faces ? are extremely hard to manipulate in order to generate a satisfying result. But there is a major difference between the two methods. As a result, in order to achieve detail-preservation, we need to solve a non-linear minimization problem, whereas in Weber et al. [2009] the optimization required the solution of a linear system. However, this is both hard to compute, and causes serious shearing effects. An affine transformation is associated with each node in the deformation graph, which describes the transformation this node undergoes. These transformations are the variables of an energy function ? which forces them to be rigid and have a smooth behavior. Minimizing this energy, combined with the position constraints imposed by the user, generates the deformation parameters of the deformation graph. In addition, the smoothness of the deformation is enforced discretely, by requiring neighboring faces of the deformation graph to have similar transformations. Here the deformation is also computed by solving a non-linear optimization problem using a multi-grid framework. Other direct surface manipulation techniques exist, such as such as those of Sorkine et al. [2004], Lipman et al. [2005] and Sorkine and Alexa [2007], to mention only a few. However, as these methods work directly on the surface of a manifold mesh, they are somewhat limited, and cannot be applied to other shape representations, such as polygon soups or point clouds. Our formulation of the deformation mapping is based on Green's third identity, which relates the values of a harmonic function on the boundary of a region to its values inside the region. This is closely related both to the Green coordinates defined by Lipman et al. [2008], and to a common method for solving boundaryvalue problems known as the ?Boundary Element Method\" or BEM [Kythe 1995]. Despite the common mathematical machinery, our approach is somewhat different from both these methods. The input is a polyhedral cage enclosing some region of interest, and a set of position and orientation constraints on a number of points within the cage. The goal of the optimization problem is to minimize an energy functional which requires detail preservation and smoothness, while enforcing the user's constraints. Thus, the function a is analogous to the vertex locations of the target cage, and b is analogous to the normals to the faces. However, there is an important difference ? in our setup, the functions a and b are independent, whereas in the Green Coordinates setup, b (the normals to the faces of the target cage) are uniquely defined by a (the vertices of the target cage). Given the input domain ? the region of space in which our shape lies, we consider all possible harmonic mappings of this domain. We would like to select a mapping from this linear space, which both satisfies the user's constraints and is detail-preserving. ? We will now use Eq. In addition, we would like to restrict a and b to be of specific types, so that we can find closed expressions for the integrals of ? ? and ? ? on the faces of the cage, and for their derivatives. In this case we should use: a ( q ) = Aq + T b ( q ) = A ? n ? ( q ) Hence, for a piecewise-linear cage, a can be restricted to be piecewise-linear on S. Since a piecewise-linear surface has piecewiseconstant normals, b can be restricted to be piecewise-constant. We will discuss now specifically the three-dimensional case for a region ? bounded by a triangle mesh S = (V, F), V are the vertices of S and F are its faces. As mentioned, a and b are not arbitrary mappings anymore ? a is the piecewise-linear map on S defined by values at the vertices {a v ? R 3 | v ? V}, and b is the piecewise constant map defined by values at the faces {b t ? R 3 | t ? F}. The transpose of the Jacobian of the deformation at the point p is: In these cases, we would like to deform the normals as well as the shape. It attempts to satisfy the constraints specified by the user and, in addition, balance detail preservation with smoothness. The figure color-codes the determinant and condition number of the Jacobian of the deformation on a vertical slice through the shape. Since we can prescribe the Jacobians of the deformation in any location we choose, we prescribe the Jacobians of the medial axis to be as close as possible to rotations. This way we don't need to compute the desired transformations on the boundary of the domain, as they will be implied from the smoothness of the deformation. Hence, we would like to minimize the following rigidity energy: 2 a , min b , R ( ? ) E Rigid ( f a , b ) = ? J f ( p ) ? R ( p ) F d ? p ? M ( ? ) s . Of course, R ( p ) are not known in advance, hence the optimization process is non-linear. On the other hand, if a and b are known, then the optimal rotation matrices R i ? those which are closest in Frobenius norm to the Jacobians of the deformation map at m i also have a closed-form solution. Let us now turn to a more detailed description of the minimization process. d 1 ? ? ? ? are the right hand sides of the linear equations ? the user's position and orientation constraints, and the unknown rotation matrices R i at the anchor points. The energy can now be written as: E = Az ? ? ? ? R 0 ? ? ? ? 2 F , A (3 d + 5 k ) ? ( n + m ) = ? ? ? ? J H ? ? ? ? ? The constant ? determines the relative weight of the smoothness constraints vs. the rigidity constraints. The matrix norms are infinity norms ? the maximal L 1 norms of the rows of the matrix, and ? is a user specified parameter, which can be used to control the stiffness of the deformation. Ideally, we would like to compare the singular values of the Jacobian of the 3D transformation, but since for the other two methods we do not have access to the actual deformation function, rather only the end result, this is, unfortunately, not easily done. For some applications, one might require the deformation to be quasi-conformal, meaning that the condition number of the Jacobian of the deformation is bounded.",
  "resources" : [ ]
}