{
  "uri" : "sig2008-a34-ben-chen_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2008/a34-ben-chen_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Variational Harmonic Maps for Space Deformation",
    "published" : "2009",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Mirela-Ben-Chen",
      "name" : "Mirela",
      "surname" : "Ben-Chen"
    }, {
      "uri" : "http://drinventor/Ofir-Weber",
      "name" : "Ofir",
      "surname" : "Weber"
    }, {
      "uri" : "http://drinventor/Craig-Gotsman",
      "name" : "Craig",
      "surname" : "Gotsman"
    } ]
  },
  "bagOfWords" : [ "space", "deformation", "method", "deform", "ambient", "space", "which", "shape", "embedded", "instead", "explicitly", "deform", "shape", "itself", "method", "have", "become", "popular", "recent", "year", "-lsb-", "Huang", "et", "al.", "2006", "Lipman", "et", "al.", "2007b", "Joshi", "et", "al.", "2007", "Lipman", "et", "al.", "2008", "Sumner", "et", "al.", "2007", "Botsch", "et", "al.", "2007", "-rsb-", "several", "reason", "first", "more", "general", "than", "explicit", "deformation", "space", "deformation", "can", "apply", "any", "shape", "representation", "whether", "polygonal", "mesh", "point", "cloud", "volumetric", "datum", "________________________", "we", "main", "contribution", "robust", "very", "efficient", "space", "deformation", "method", "which", "provide", "some", "advantage", "over", "exist", "method", "first", "user", "manipulate", "set", "position", "orientation", "constraint", "instead", "directly", "manipulate", "``", "source", "cage", "''", "hence", "we", "method", "more", "intuitive", "easy", "control", "second", "we", "have", "closed-form", "expression", "linear", "combination", "basis", "function", "deformation", "continuous", "domain", "thus", "do", "require", "voxelization", "input", "domain", "some", "other", "method", "do", "finally", "since", "we", "have", "closed-form", "expression", "also", "gradient", "deformation", "we", "optimization", "procedure", "may", "base", "alternate", "least-square", "``", "local/global", "''", "algorithm", "which", "until", "now", "applicable", "only", "discrete", "mesh-based", "setting", "optimization", "method", "extremely", "efficient", "its", "computational", "complexity", "dominate", "matrix-vector", "multiplication", "use", "pre-computed", "matrix", "thus", "may", "also", "easily", "implement", "GPU", "addition", "quite", "simple", "implement", "guarantee", "converge", "shape", "deformation", "one", "most", "active", "research", "subject", "computer", "graphic", "thorough", "review", "all", "recent", "work", "outside", "scope", "paper", "we", "shall", "thus", "concentrate", "space", "deformation", "method", "most", "relevant", "we", "work", "general", "method", "can", "classify", "two", "major", "group", "``", "cagebased", "''", "deformation", "direct", "manipulation", "deformation", "``", "cage-based", "''", "deformation", "user", "specify", "boundary", "relevant", "region", "space", "source", "``", "cage", "''", "which", "contain", "input", "shape", "cage", "typically", "piecewise-linear", "close", "surface", "user", "manipulate", "vertex", "cage", "generate", "target", "cage", "deformation", "define", "relationship", "between", "two", "cage", "cage-based", "method", "closely", "related", "barycentric", "coordinate", "typically", "deformation", "define", "linear", "combination", "vertex", "target", "cage", "set", "barycentric", "coordinate", "function", "define", "input", "cage", "since", "barycentric", "coordinate", "function", "depend", "only", "source", "cage", "can", "pre-computed", "make", "very", "efficient", "method", "deformation", "require", "only", "matrix-vector", "multiplication", "one", "first", "method", "-lsb-", "Huang", "et", "al.", "2006", "-rsb-", "use", "mean-value", "coordinate", "-lsb-", "Floater", "et", "al.", "2005", "Ju", "et", "al.", "2005", "-rsb-", "coordinate", "function", "unfortunately", "mean-value", "coordinate", "guarantee", "positive", "inside", "domain", "unless", "convex", "cause", "severe", "artifact", "result", "deformation", "later", "method", "-lsb-", "Joshi", "et", "al.", "2007", "-rsb-", "suggest", "use", "harmonic", "coordinate", "instead", "guarantee", "positive", "inside", "domain", "however", "harmonic", "coordinate", "solution", "Dirichlet", "problem", "boundary", "domain", "do", "have", "closed", "form", "expression", "thus", "compute", "coordinate", "easy", "recently", "Lipman", "et", "al.", "-lsb-", "2008", "-rsb-", "show", "how", "define", "two", "set", "coordinate", "function", "Green", "coordinate", "which", "have", "closed-form", "expression", "result", "detail-preserving", "mapping", "later", "Weber", "et", "al.", "-lsb-", "2009", "-rsb-", "show", "coordinate", "twodimension", "special", "case", "complex-valued", "barycentric", "coordinate", "may", "derive", "from", "celebrated", "Cauchy", "integral", "theorem", "call", "they", "cauchy-green", "coordinate", "all", "cage-based", "method", "have", "common", "disadvantage", "detailed", "deformation", "possible", "only", "relatively", "complex", "cage", "cage", "even", "few", "hundred", "face", "extremely", "hard", "manipulate", "order", "generate", "satisfying", "result", "overcome", "problem", "Weber", "et", "al.", "-lsb-", "2009", "-rsb-", "propose", "something", "similar", "spirit", "we", "method", "use", "complex", "Cauchy-Green", "coordinate", "conformal", "basis", "function", "find", "new", "cage", "location", "solve", "optimization", "problem", "derive", "from", "position", "constraint", "supply", "user", "although", "method", "quite", "effective", "complex", "conformal", "formulation", "apply", "only", "planar", "deformation", "we", "method", "can", "consider", "generalization", "Weber", "et", "al.", "-lsb-", "2009", "-rsb-", "three", "dimension", "general", "major", "difference", "between", "two", "method", "we", "use", "harmonic", "mapping", "basis", "function", "instead", "conformal", "function", "since", "complex", "holomorphic", "function", "-lrb-", "which", "two", "dimension", "generate", "conformal", "map", "-rrb-", "do", "have", "simple", "generalization", "three", "dimension", "result", "order", "achieve", "detail-preservation", "we", "need", "solve", "non-linear", "minimization", "problem", "whereas", "Weber", "et", "al.", "-lsb-", "2009", "-rsb-", "optimization", "require", "solution", "linear", "system", "worth", "note", "all", "previous", "method", "-lsb-", "Joshi", "et", "al.", "2007", "Lipman", "et", "al.", "2008", "Weber", "et", "al.", "2009", "-rsb-", "use", "harmonic", "map", "some", "sort", "underlie", "deformation", "function", "harmonic", "coordinate", "use", "independent", "harmonic", "function", "each", "coordinate", "thus", "able", "enforce", "exact", "interpolation", "target", "cage", "however", "both", "hard", "compute", "cause", "serious", "shearing", "effect", "cauchy-green", "coordinate", "two", "dimension", "-lsb-", "Lipman", "et", "al.", "2008", "Weber", "et", "al.", "2009", "-rsb-", "enforce", "conformal", "map", "harmonic", "map", "whose", "two", "component", "have", "orthogonal", "gradient", "equal", "norm", "Green", "coordinate", "three", "dimension", "use", "vertex", "target", "cage", "its", "normal", "coefficient", "linear", "combination", "harmonic", "basis", "function", "from", "point", "view", "we", "framework", "generalization", "all", "those", "coordinate", "we", "seek", "harmonic", "map", "instead", "predefine", "relationship", "between", "its", "component", "relationship", "derive", "implicitly", "minimize", "energy", "functional", "two", "other", "recent", "space-deformation", "method", "which", "solve", "nonlinear", "optimization", "problem", "give", "positional", "constraint", "those", "Sumner", "et", "al.", "-lsb-", "2007", "-rsb-", "Botsch", "et", "al.", "-lsb-", "2007", "-rsb-", "Sumner", "et", "al", "-lsb-", "2007", "-rsb-", "deformation", "define", "use", "deformation", "graph", "which", "automatically", "compute", "from", "input", "shape", "affine", "transformation", "associate", "each", "node", "deformation", "graph", "which", "describe", "transformation", "node", "undergo", "transformation", "variable", "energy", "function", "which", "force", "they", "rigid", "have", "smooth", "behavior", "minimize", "energy", "combine", "position", "constraint", "impose", "user", "generate", "deformation", "parameter", "deformation", "graph", "deformation", "point", "ambient", "space", "compute", "from", "transformation", "node", "deformation", "graph", "which", "close", "euclidean", "distance", "point", "two", "disadvantage", "method", "compare", "ours", "first", "deformation", "graph", "cage", "sense", "deformation", "function", "compute", "base", "euclidean", "distance", "cause", "artifact", "when", "deform", "shape", "which", "have", "piece", "which", "close", "each", "other", "euclidean", "distance", "far", "apart", "geodesic", "distance", "example", "finger", "hand", "addition", "smoothness", "deformation", "enforce", "discretely", "require", "neighbor", "face", "deformation", "graph", "have", "similar", "transformation", "we", "setting", "we", "have", "closed-form", "expression", "second", "derivative", "deformation", "we", "require", "vanish", "boundary", "domain", "hence", "regularization", "term", "energy", "more", "robust", "similar", "method", "Botsch", "et", "al.", "-lsb-", "2007", "-rsb-", "where", "deformation", "define", "voxelization", "input", "region", "here", "deformation", "also", "compute", "solve", "non-linear", "optimization", "problem", "use", "multi-grid", "framework", "method", "suffer", "from", "some", "aliasing", "effect", "due", "discretization", "addition", "its", "implementation", "somewhat", "involve", "comparison", "result", "we", "method", "method", "Sumner", "et", "al.", "Botsch", "et", "al.", "present", "section", "other", "direct", "surface", "manipulation", "technique", "exist", "those", "Sorkine", "et", "al.", "-lsb-", "2004", "-rsb-", "Lipman", "et", "al.", "-lsb-", "2005", "-rsb-", "sorkine", "alexa", "-lsb-", "2007", "-rsb-", "mention", "only", "few", "however", "method", "work", "directly", "surface", "manifold", "mesh", "somewhat", "limited", "can", "apply", "other", "shape", "representation", "polygon", "soup", "point", "cloud", "we", "formulation", "deformation", "mapping", "base", "Green", "'s", "third", "identity", "which", "relate", "value", "harmonic", "function", "boundary", "region", "its", "value", "inside", "region", "closely", "related", "both", "Green", "coordinate", "define", "Lipman", "et", "al.", "-lsb-", "2008", "-rsb-", "common", "method", "solve", "boundaryvalue", "problem", "know", "Boundary", "element", "method", "''", "BEM", "-lsb-", "Kythe", "1995", "-rsb-", "BEM", "have", "be", "use", "example", "Martin", "et", "al.", "-lsb-", "2008", "-rsb-", "discretize", "harmonic", "basis", "function", "polyhedral", "finite", "element", "despite", "common", "mathematical", "machinery", "we", "approach", "somewhat", "different", "from", "both", "method", "BEM", "framework", "one", "seek", "harmonic", "function", "domain", "have", "some", "give", "boundary", "value", "whereas", "we", "seek", "harmonic", "map", "which", "minimize", "give", "functional", "Green", "coordinate", "setting", "boundary", "mapping", "function", "set", "``", "target", "cage", "''", "its", "normal", "vector", "where", "we", "set", "boundary", "mapping", "function", "variable", "optimization", "problem", "before", "diving", "underlie", "mathematics", "we", "present", "brief", "overview", "we", "deformation", "method", "input", "polyhedral", "cage", "enclose", "some", "region", "interest", "set", "position", "orientation", "constraint", "number", "point", "within", "cage", "output", "harmonic", "deformation", "mapping", "which", "map", "every", "point", "input", "cage", "some", "point", "explain", "next", "section", "deformation", "mapping", "uniquely", "define", "two", "function", "define", "vertex", "face", "cage", "respectively", "order", "find", "we", "pose", "optimization", "problem", "where", "discrete", "value", "variable", "goal", "optimization", "problem", "minimize", "energy", "functional", "which", "require", "detail", "preservation", "smoothness", "while", "enforce", "user", "'s", "constraint", "discrete", "setting", "we", "method", "somewhat", "similar", "solve", "location", "vertex", "target", "cage", "use", "Green", "coordinate", "-lsb-", "Lipman", "et", "al.", "2008", "-rsb-", "deformation", "method", "thus", "function", "analogous", "vertex", "location", "target", "cage", "analogous", "normal", "face", "however", "important", "difference", "we", "setup", "function", "independent", "whereas", "Green", "coordinate", "setup", "-lrb-", "normal", "face", "target", "cage", "-rrb-", "uniquely", "define", "-lrb-", "vertex", "target", "cage", "-rrb-", "hence", "we", "have", "more", "degree", "freedom", "larger", "space", "possible", "deformation", "rest", "paper", "organize", "follow", "follow", "section", "we", "define", "deformation", "mapping", "first", "consider", "general", "-lrb-", "continuous", "-rrb-", "domain", "cage", "specialize", "case", "where", "cage", "polyhedron", "we", "proceed", "define", "energy", "functional", "pose", "optimization", "problem", "section", "we", "discuss", "we", "optimization", "procedure", "its", "convergence", "property", "experimental", "result", "comparison", "state-of-the-art", "method", "present", "section", "we", "conclude", "discussion", "some", "future", "research", "direction", "section" ],
  "content" : "Space deformation methods deform the ambient space in which a shape is embedded, instead of explicitly deforming the shape itself. Such methods have become popular in recent years [Huang et al. 2006; Lipman et al. 2007b; Joshi et al. 2007, Lipman et al. 2008; Sumner et al. 2007; Botsch et al. 2007], for several reasons. First, they are more general than explicit deformation ? space deformation can be applied to any shape representation, whether it is a polygonal mesh, a point cloud or volumetric data. ________________________ Our main contribution is a robust and very efficient space deformation method, which provides some advantages over existing methods. First, the user manipulates a set of position and orientation constraints, instead of directly manipulating the \"source cage\", hence our method is more intuitive and easy to control. Second, we have a closed-form expression a linear combination of basis functions for the deformation of a continuous domain, thus do not require a voxelization of the input domain, as some other methods do. And finally, since we have closed-form expressions also for the gradients of the deformation, our optimization procedure may be based on an alternating least-squares \"local/global\" algorithm, which, until now, was applicable only in discrete mesh-based settings. This optimization method is extremely efficient, as its computational complexity is dominated by matrix-vector multiplications using pre-computed matrices, thus may also be easily implemented on the GPU. In addition, it is quite simple to implement, and guaranteed to converge. Shape deformation is one of the most active research subjects in computer graphics, and a thorough review of all the recent work is outside the scope of this paper. We shall thus concentrate on the space deformation methods most relevant to our work. In general, these methods can be classified into two major groups ? \"cagebased\" deformation, and direct manipulation deformation. In \"cage-based\" deformation, the user specifies the boundary of a relevant region of space ? the source \"cage\" ? which contains the input shape. The cage is typically a piecewise-linear closed surface. The user then manipulates the vertices of this cage to generate a target cage and the deformation is defined by the relationship between these two cages. Cage-based methods are closely related to barycentric coordinates, as typically the deformation is defined as a linear combination of the vertices of the target cage with a set of barycentric coordinate functions defined on the input cage. Since these barycentric coordinate functions depend only on the source cage, they can be pre-computed making for a very efficient method, as the deformation then requires only a matrix-vector multiplication. One of the first such methods [Huang et al. 2006] used mean-value coordinates [Floater et al. 2005; Ju et al. 2005] as the coordinate functions. Unfortunately, mean-value coordinates are not guaranteed to be positive inside the domain unless it is convex. This causes severe artifacts in the resulting deformation. Later methods [Joshi et al. 2007] suggested using harmonic coordinates instead, as these are guaranteed to be positive inside the domain. However, harmonic coordinates are the solution of a Dirichlet problem on the boundary of the domain, and they do not have a closed form expression. Thus, computing these coordinates is not easy. Recently, Lipman et al. [2008] showed how to define two sets of coordinate functions ? Green coordinates, which have closed-form expressions, and result in detail-preserving mappings. Later, Weber et al. [2009] showed that these coordinates in twodimensions are a special case of complex-valued barycentric coordinates, and may be derived from the celebrated Cauchy integral theorem. They called them Cauchy-Green coordinates. All the cage-based methods have a common disadvantage ? detailed deformations are possible only with relatively complex cages, and such cages ? even with a few hundred faces ? are extremely hard to manipulate in order to generate a satisfying result. To overcome this problem, Weber et al. [2009] proposed something similar in spirit to our method: use the complex Cauchy-Green coordinates as conformal basis functions, and find the new cage location by solving an optimization problem derived from position constraints supplied by the user. Although their method is quite effective, the complex conformal formulation applies only to planar deformation. Our method can be considered as a generalization of Weber et al. [2009] to three dimensions, and R d in general. But there is a major difference between the two methods. We use harmonic mappings as basis functions instead of conformal functions, since complex holomorphic functions (which in two dimensions generate conformal maps) do not have a simple generalization to three dimensions. As a result, in order to achieve detail-preservation, we need to solve a non-linear minimization problem, whereas in Weber et al. [2009] the optimization required the solution of a linear system. It is worth noting that all previous methods [Joshi et al. 2007; Lipman et al. 2008; Weber et al. 2009] use harmonic maps of some sort as their underlying deformation function. Harmonic coordinates use independent harmonic functions for each coordinate, thus are able to enforce an exact interpolation of the target cage. However, this is both hard to compute, and causes serious shearing effects. Cauchy-Green coordinates in two dimensions [Lipman et al. 2008; Weber et al. 2009] enforce conformal maps ? harmonic maps, whose two components have orthogonal gradients with equal norm. Green coordinates in three dimensions use the vertices of the target cage and its normals as the coefficients of a linear combination of the harmonic basis functions. From this point of view, our framework is a generalization of all those coordinates ? we seek a harmonic map, but instead of predefining the relationship between its components, the relationship is derived implicitly by minimizing an energy functional. Two other recent space-deformation methods which solve a nonlinear optimization problem given positional constraints are those of Sumner et al. [2007] and Botsch et al. [2007]. In Sumner et al [2007], the deformation is defined using a deformation graph, which is automatically computed from the input shape. An affine transformation is associated with each node in the deformation graph, which describes the transformation this node undergoes. These transformations are the variables of an energy function ? which forces them to be rigid and have a smooth behavior. Minimizing this energy, combined with the position constraints imposed by the user, generates the deformation parameters of the deformation graph. The deformation of a point in the ambient space is then computed from the transformations of nodes in the deformation graph, which are close in Euclidean distance to this point. There are two disadvantages of this method compared to ours ? first, the deformation graph is not a cage, in the sense that the deformation function is computed based on Euclidean distances. This causes artifacts when deforming a shape which has pieces which are close to each other in Euclidean distance, but far apart in geodesic distance, for example, fingers of a hand. In addition, the smoothness of the deformation is enforced discretely, by requiring neighboring faces of the deformation graph to have similar transformations. In our setting, we have a closed-form expression for the second derivatives of the deformation, and we require these to vanish on the boundary of the domain, hence the regularization term of the energy is more robust. A similar method is that of Botsch et al. [2007], where the deformation is defined on a voxelization of the input region. Here the deformation is also computed by solving a non-linear optimization problem using a multi-grid framework. This method suffers from some aliasing effects due to the discretization, and in addition its implementation is somewhat involved. Comparisons of the results of our method with the methods of Sumner et al. and Botsch et al. will be presented in the Section 4. Other direct surface manipulation techniques exist, such as such as those of Sorkine et al. [2004], Lipman et al. [2005] and Sorkine and Alexa [2007], to mention only a few. However, as these methods work directly on the surface of a manifold mesh, they are somewhat limited, and cannot be applied to other shape representations, such as polygon soups or point clouds. Our formulation of the deformation mapping is based on Green's third identity, which relates the values of a harmonic function on the boundary of a region to its values inside the region. This is closely related both to the Green coordinates defined by Lipman et al. [2008], and to a common method for solving boundaryvalue problems known as the ?Boundary Element Method\" or BEM [Kythe 1995]. BEM has been used, for example, by Martin et al. [2008] to discretize harmonic basis functions for polyhedral finite elements. Despite the common mathematical machinery, our approach is somewhat different from both these methods. In the BEM framework, one seeks a harmonic function on the domain having some given boundary values, whereas we seek a harmonic map which minimizes a given functional. In the Green coordinates setting, the boundary mapping functions are set to be the \"target cage\" and its normal vectors, where as in our setting the boundary mapping functions are variables in an optimization problem. Before diving into the underlying mathematics, we present a brief overview of our deformation method. The input is a polyhedral cage enclosing some region of interest, and a set of position and orientation constraints on a number of points within the cage. The output is a harmonic deformation mapping f, which maps every point in the input cage to some point in R 3 . As will be explained in the next section, the deformation mapping is uniquely defined by two functions, a and b, defined on the vertices and faces of the cage, respectively. In order to find a and b, we pose an optimization problem where the discrete values of a and b are the variables. The goal of the optimization problem is to minimize an energy functional which requires detail preservation and smoothness, while enforcing the user's constraints. In the discrete setting, our method is somewhat similar to solving for the locations of the vertices of the target cage, using the Green coordinates [Lipman et al. 2008] deformation method. Thus, the function a is analogous to the vertex locations of the target cage, and b is analogous to the normals to the faces. However, there is an important difference ? in our setup, the functions a and b are independent, whereas in the Green Coordinates setup, b (the normals to the faces of the target cage) are uniquely defined by a (the vertices of the target cage). Hence, we have more degrees of freedom, and a larger space of possible deformations. The rest of the paper is organized as follows. In the following section we define the deformation mapping, first considering a general (continuous) domain in R d as the cage, and then specializing it to the case where the cage is a polyhedron. We proceed by defining the energy functional, and posing the optimization problem. In Section 3 we discuss our optimization procedure, and its convergence properties. Experimental results and comparisons with state-of-the-art methods are presented in Section 4. We conclude with a discussion and some future research directions in Section 5.",
  "resources" : [ ]
}