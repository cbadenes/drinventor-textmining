{
  "uri" : "sig2009-a46-cashman_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2009/a46-cashman_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "NURBS with Extraordinary Points: High-degree, Non-uniform, Rational Subdivision Schemes",
    "published" : "2009",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Thomas J.-Cashman",
      "name" : "Thomas J.",
      "surname" : "Cashman"
    }, {
      "uri" : "http://drinventor/Ursula H.-Augsd?rfer",
      "name" : "Ursula H.",
      "surname" : "Augsd?rfer"
    }, {
      "uri" : "http://drinventor/Neil A.-Dodgson",
      "name" : "Neil A.",
      "surname" : "Dodgson"
    }, {
      "uri" : "http://drinventor/Malcolm A.-Sabin",
      "name" : "Malcolm A.",
      "surname" : "Sabin"
    } ]
  },
  "bagOfWords" : [ "we", "present", "new", "subdivision", "framework", "true", "superset", "nurb", "odd", "degree", "reif", "-lsb-", "1996", "-rsb-", "show", "stationary", "c2", "scheme", "reif", "-lsb-", "1998", "-rsb-", "present", "construction", "which", "achieve", "lower", "bind", "rule", "scheme", "generalize", "averaging", "algorithm", "describe", "Lane", "Riesenfeld", "-lsb-", "1980", "-rsb-", "uniform", "b-spline", "subdivision", "use", "sequence", "smooth", "stage", "scheme", "avoid", "problem", "arise", "from", "widen", "influence", "point", "degree", "increase", "around", "same", "time", "subdivision", "surface", "be", "develop", "which", "generalize", "non-uniform", "-lrb-", "fix", "degree", "-rrb-", "b-spline", "surface", "tensor", "product", "construction", "nurb", "mean", "same", "knot", "Sederberg", "et", "al.", "-lsb-", "1998", "-rsb-", "present", "surface", "which", "relax", "property", "scheme", "allow", "separate", "knot", "spacing", "attach", "every", "edge", "control", "mesh", "M?ller", "et", "al.", "-lsb-", "2006", "-rsb-", "develop", "scheme", "which", "could", "additionally", "provide", "position", "give", "point", "limit", "surface", "bring", "surface", "equivalence", "bicubic", "nurb", "absence", "extraordinary", "point", "t-junction", "therefore", "previous", "scheme", "true", "superset", "bicubic", "nurb", "previous", "scheme", "arbitrary", "degree", "previous", "scheme", "combine", "superset", "nurb", "arbitrary", "degree", "break", "each", "subdivision", "step", "one", "refine", "several", "smoothing", "stage", "we", "need", "handle", "non-uniform", "knot", "vector", "however", "therefore", "unable", "use", "Lane", "Riesenfeld", "-lsb-", "1980", "-rsb-", "algorithm", "instead", "we", "generalize", "non-uniform", "analogue", "which", "we", "review", "section", "we", "make", "same", "restriction", "Sederberg", "et", "al.", "-lsb-", "2003", "-rsb-", "each", "quadrilateral", "face", "must", "have", "equal", "knot", "spacing", "opposite", "edge", "-lrb-", "case", "nurb", "-rrb-", "we", "also", "restrict", "control", "mesh", "contain", "only", "quadrilateral", "face", "-lrb-", "again", "nurb", "-rrb-", "we", "rule", "must", "still", "allow", "extraordinary", "vertex", "we", "discuss", "generalization", "make", "possible", "section", "result", "subdivision", "framework", "achieve", "we", "objective", "add", "extraordinary", "point", "nurb", "arbitrary", "odd", "degree", "all", "extraordinary", "region", "change", "sequence", "knot", "insertion", "can", "change", "limit", "surface", "so", "important", "resolve", "algorithm", "first", "subdivide", "only", "large", "knot", "interval", "until", "all", "interval", "approximately", "same", "size", "avoid", "problem", "which", "occur", "around", "extraordinary", "point", "large", "disparity", "between", "neighbor", "knot", "interval", "we", "use", "further", "subdivision", "step", "create", "region", "uniformity", "around", "extraordinary", "point", "so", "continuity", "curvature", "variation", "region", "determine", "uniform", "rather", "than", "non-uniform", "rule", "section", "we", "use", "eigenanalysis", "tune", "uniform", "rule", "so", "curvature", "stable", "under", "subdivision", "process", "instead", "increase", "infinity", "collapse", "zero", "same", "bounded", "curvature", "hyperbolic", "shape", "limit", "surface", "neither", "shape", "dominate", "other", "prove", "more", "difficult", "satisfy", "bound", "curvature", "condition", "around", "vertex", "valency", "we", "find", "necessary", "introduce", "additional", "smoothing", "stage", "handle", "case", "modification", "we", "method", "have", "bound", "curvature", "all", "valency", "arbitrarily", "high", "degree", "maintain", "convex", "hull", "property", "-lrb-", "take", "only", "convex", "combination", "-rrb-", "up", "degree", "13", "we", "method", "build", "NURBS", "subdivision", "rule", "regular", "region", "whatever", "degree", "derive", "from", "b-spline", "knot", "insertion", "we", "can", "find", "rule", "use", "number", "different", "ap", "Oslo", "algorithm", "-lsb-", "Cohen", "et", "al.", "1980", "-rsb-", "all", "knot", "insertion", "algorithm", "give", "same", "result", "degree", "increase", "each", "point", "have", "widen", "influence", "point", "subdivide", "control", "polygon", "uration", "extraordinary", "point", "control", "mesh", "number", "case", "consider", "grow", "exponentially", "influence", "point", "which", "grow", "quadratically", "degree", "therefore", "use", "exist", "knot", "insertion", "rule", "directly", "feasible", "option", "high", "degree", "instead", "we", "need", "knot", "insertion", "algorithm", "use", "series", "local", "computation", "which", "overlap", "same", "way", "Lane", "Riesenfeld", "-lsb-", "1980", "-rsb-", "algorithm", "matter", "how", "high", "degree", "-lsb-", "2009", "-rsb-", "describe", "univariate", "non-uniform", "algorithm", "which", "work", "way", "difficult", "generalize", "surface", "because", "asymmetry", "we", "develop", "symmetric", "approach", "-lsb-", "Cashman", "et", "al.", "2009", "-rsb-", "which", "we", "use", "here", "follow", "d/2", "smoothing", "stage", "where", "which", "odd", "degree", "we", "use", "denote", "current", "stage", "each", "smooth", "stage", "we", "consider", "each", "point", "turn", "two", "knot", "which", "distance", "away", "subdivide", "knot", "vector", "either", "side", "knot", "need", "insert", "algorithm", "use", "stage", "introduce", "they", "polar", "form", "-lrb-", "blossom", "-rrb-", "-lsb-", "ramshaw", "1989", "-rsb-", "relevant", "point", "process", "insert", "knot", "polar", "form", "each", "point", "each", "stage", "Cashman", "et", "al.", "-lsb-", "2009", "-rsb-", "give", "require", "affine", "combination", "implementation", "detail", "curve", "case", "single", "point", "show", "figure", "although", "either", "-lrb-", "both", "-rrb-", "weight", "may", "Figure", "show", "we", "can", "consider", "same", "smoothing", "operation", "one", "edge", "time", "which", "form", "foundation", "we", "method", "surface", "case", "generalize", "curve", "case", "surface", "extraordinary", "point", "we", "calculate", "affine", "combination", "refine", "smooth", "stage", "one", "face", "time", "weight", "use", "affine", "combination", "define", "use", "tensor", "product", "univariate", "knot", "insertion", "when", "control", "mesh", "each", "smooth", "stage", "calculate", "weight", "four", "face", "surround", "vertex", "-lrb-", "figure", "-rrb-", "weight", "combine", "give", "tensor", "product", "smoothing", "stage", "form", "show", "figure", "require", "NURBS", "knot", "insertion", "5.1", "introduce", "extraordinary", "point", "like", "Sederberg", "et", "al.", "-lsb-", "1998", "-rsb-", "we", "associate", "knot", "spacing", "each", "edge", "control", "mesh", "however", "we", "require", "all", "face", "quadrilateral", "knot", "spacing", "opposite", "edge", "face", "equal", "spacing", "define", "whole", "strip", "quadrilateral", "face", "rather", "than", "single", "edge", "both", "condition", "course", "property", "nurb", "control", "mesh", "mesh", "where", "condition", "hold", "each", "face", "have", "two", "associate", "strip", "quadrilateral", "face", "one", "each", "two", "direction", "-lrb-", "figure", "-rrb-", "we", "use", "strip", "build", "local", "knot", "vector", "each", "face", "mesh", "contain", "extraordinary", "point", "smoothing", "stage", "may", "use", "different", "knot", "vector", "each", "face", "surround", "vertex", "refine", "stage", "also", "compute", "one", "face", "time", "here", "we", "face", "case", "new", "vertex", "position", "give", "tensor", "product", "univariate", "contribution", "split", "four", "two", "each", "side", "edge", "Cashman", "et", "al.", "-lsb-", "2009", "-rsb-", "give", "univariate", "rule", "figure", "show", "example", "how", "apply", "bivariate", "case", "section", "describe", "we", "modification", "bound", "curvature", "which", "additional", "value", "separate", "multiplier", "contribution", "from", "extraordinary", "vertex", "its", "successor", "adjacent", "vertex", "vertex", "across", "diagonal", "same", "value", "use", "every", "refine", "smooth", "stage", "determine", "valency", "extraordinary", "point", "degree", "surface", "Valency", "difficult", "-lrb-", "see", "Section", "7.2", "-rrb-", "require", "extra", "smoothing", "step", "achieve", "bounded", "curvature", "while", "maintain", "convex", "hull", "property", "maintain", "affine", "invariance", "weight", "every", "affine", "combina", "divide", "sum", "contribute", "weight", "necessary", "extraordinary", "point", "since", "vertex", "valency", "receive", "4n", "contribution", "instead", "16", "multiplier", "we", "use", "bound", "curvature", "make", "necessary", "normalize", "every", "affine", "combination", "have", "contribution", "from", "extraordinary", "point", "normalization", "sometimes", "necessary", "along", "ray", "which", "emanate", "from", "extraor", "than", "one", "extraordinary", "corner", "without", "special", "case", "strategy", "allow", "we", "create", "non-uniform", "subdivision", "surface", "arbitrarily", "high", "degree", "create", "true", "superset", "NURBS", "all", "remain", "make", "surface", "rational", "which", "straightforward", "-lsb-", "Sederberg", "et", "al.", "1998", "-rsb-", "rational", "control", "point", "project", "subdivide", "project", "back", "every", "face", "have", "local", "knot", "vector", "two", "direction", "which", "we", "can", "construct", "follow", "strip", "quadrilateral", "face", "shaded", "face", "knot", "spacing", "blue", "direction", "-lcb-", "-rcb-", "red", "direction", "-lcb-", "10", "-rcb-", "example", "collect", "knot", "vector", "length", "require", "subdivision", "degree", "knot", "insertion", "algorithm", "therefore", "introduce", "point", "along", "subdivide", "interval", "we", "show", "unnormalized", "weight", "use", "form", "central", "point", "fraction", "involve", "from", "curve", "case", "factor", "one", "half", "because", "we", "treat", "each", "side", "each", "edge", "separately", "multiplier", "require", "get", "bound", "curvature", "bivariate", "case", "explain", "section", "we", "have", "now", "achieve", "we", "objective", "nurb", "odd", "degree", "large", "knot", "interval", "adjacent", "high-valency", "point", "invisible", "face", "hide", "behind", "point", "we", "find", "can", "cause", "fold", "limit", "surface", "knot", "insert", "na?vely", "course", "regular", "region", "nurb", "sequence", "knot", "insertion", "do", "alter", "limit", "surface", "same", "property", "do", "apply", "around", "extraordinary", "point", "so", "sequence", "which", "knot", "insert", "important", "section", "we", "describe", "we", "we", "univariate", "algorithm", "-lsb-", "Cashman", "et", "al.", "2009", "-rsb-", "constrain", "subdivide", "every", "interval", "so", "we", "can", "regularize", "knot", "spacing", "subdivide", "large", "interval", "first", "we", "regularization", "condition", "knot", "interval", "twice", "-lrb-", "more", "-rrb-", "large", "any", "other", "give", "complete", "set", "knot", "interval", "-lcb-", "-rcb-", "we", "establish", "minimum", "non-zero", "interval", "min", "-lrb-", "-lcb-", "-rcb-", "-rrb-", "max", "-lrb-", "-rrb-", "we", "use", "limited", "subdivision", "step", "insert", "knot", "only", "interval", "which", "greater", "we", "subdivide", "each", "interval", "its", "midpoint", "so", "total", "log", "-lrb-", "max", "-lrb-", "-rrb-", "-rrb-", "step", "require", "achieve", "we", "regularization", "condition", "strategy", "avoid", "undesirable", "fold", "surface", "scale", "first", "subdivision", "step", "once", "max", "-lrb-", "-rrb-", "we", "address", "subdivision", "step", "insert", "knot", "uniformly", "around", "extraordinary", "point", "while", "subdivide", "other", "interval", "midpoint", "do", "so", "create", "uniform", "region", "stationary", "subdivision", "matrix", "we", "therefore", "able", "apply", "eigenanalysis", "guarantee", "c1", "continuity", "-lrb-", "see", "appendix", "-rrb-", "we", "need", "most", "two", "step", "before", "every", "extraordinary", "point", "surround", "one", "layer", "evenly", "space", "knot", "consider", "simplest", "mesh", "let", "knot", "interval", "surround", "point", "we", "insert", "knot", "each", "interval", "create", "uniform", "spacing", "distance", "min", "-lrb-", "-lcb-", "...", "-rcb-", "-rrb-", "away", "from", "extraordinary", "point", "general", "case", "we", "have", "multiple", "extraordinary", "point", "arbitrary", "configuration", "Figure", "show", "uniform", "knot", "insertion", "one", "extraordinary", "point", "may", "impact", "another", "fact", "extraordinary", "point", "emanate", "ray", "which", "share", "over", "any", "order", "achieve", "uniform", "knot", "spacing", "-lrb-", "figure", "-rrb-", "we", "can", "define", "set", "equivalence", "class", "extraordinary", "point", "connect", "way", "calculate", "membership", "class", "single", "pass", "through", "point", "mesh", "achieve", "we", "implementation", "use", "knot", "interval", "object", "hold", "reference", "adjacent", "extraordinary", "point", "one", "either", "side", "disjoint", "set", "datum", "structure", "-lsb-", "Galil", "Italiano", "1991", "-rsb-", "associate", "find", "union", "operation", "use", "join", "any", "class", "which", "appear", "same", "side", "knot", "interval", "equivalence", "class", "can", "coarsest", "level", "once", "calculate", "equivalence", "class", "can", "use", "insert", "knot", "however", "Figure", "also", "show", "two", "more", "extraordinary", "point", "either", "side", "knot", "interval", "might", "make", "conflict", "first", "subdivision", "step", "insert", "knot", "between", "two", "position", "knot", "interval", "split", "can", "conflict", "second", "subdivision", "step", "most", "two", "step", "summary", "we", "algorithm", "establish", "uniform", "spacing", "each", "equivalence", "class", "establish", "minimum", "from", "knot", "interval", "surround", "extraordinary", "point", "within", "each", "extraordinary", "point", "request", "insert", "knot", "sur", "request", "position", "insertion", "request", "note", "method", "describe", "here", "can", "apply", "multiple", "knot", "-lrb-", "i.e.", "zero", "knot", "interval", "-rrb-", "adjacent", "extraordinary", "point", "case", "we", "can", "still", "proceed", "subdivision", "we", "unable", "create", "uniform", "knot", "spacing", "which", "mean", "we", "can", "prove", "c1", "continuity", "presence", "zero", "knot", "interval", "where", "uniform", "spacing", "achievable", "additional", "subdivision", "step", "grow", "region", "uniformity", "around", "each", "extraordinary", "point", "so", "behavior", "limit", "surface", "point", "determine", "uniform", "rule", "therefore", "section", "-lrb-", "which", "modify", "uniform", "case", "bound", "curvature", "-rrb-", "appendix", "-lrb-", "which", "discuss", "we", "proof", "uniform", "rule", "create", "c1", "surface", "-rrb-", "apply", "any", "non-uniform", "configuration", "non-zero", "knot", "interval", "adjacent", "extraordinary", "point", "without", "multiple", "knot", "degree", "b-spline", "-lrb-", "include", "regular", "region", "we", "scheme", "-rrb-", "have", "continuous", "derivative", "extraordinary", "point", "however", "have", "prove", "difficult", "stationary", "subdivision", "provide", "anything", "more", "than", "continuity", "first", "derivative", "range", "possible", "behavior", "second", "derivative", "-lsb-", "Sabin", "et", "al.", "2003", "-rsb-", "which", "we", "can", "analyze", "use", "eigen", "write", "eigenvalue", "component", "which", "generalize", "elliptic", "hyperbolic", "paraboloid", "respectively", "subdivision", "rule", "we", "consider", "rotationally", "symmetric", "Reif", "-lsb-", "1996", "-rsb-", "show", "stationary", "subdivision", "scheme", "base", "bicubic", "piece", "can", "have", "non-zero", "curvature", "continuity", "extraordinary", "point", "possible", "however", "satisfy", "bounded", "curvature", "where", "therefore", "extraordinary", "region", "dominate", "either", "elliptic", "hyper", "curvature", "appear", "spline", "ring", "those", "component", "-lsb-", "Peters", "Reif", "2008", "-rsb-", "contrast", "Catmull-Clark", "scheme", "-lsb-", "Catmull", "Clark", "1978", "-rsb-", "have", "valency", "greater", "than", "Sabin", "-lsb-", "1991", "-rsb-", "present", "variant", "catmull-clark", "bound", "curvature", "subdivision", "matrix", "require", "stationary", "curvature", "continuity", "easier", "achieve", "non-stationary", "rule", "result", "local", "blend", "between", "limit", "around", "extraordinary", "point", "however", "we", "have", "choose", "maintain", "simplicity", "stationary", "rule", "uniform", "configuration", "we", "now", "show", "how", "modify", "we", "rule", "give", "bound", "curvature", "arbitrarily", "high", "degree", "uniform", "knot", "vector", "each", "degree", "valency", "we", "compute", "Discrete", "fourier", "transform", "-lrb-", "dft", "-rrb-", "subdivision", "matrix", "rule", "describe", "section", "therefore", "become", "impractical", "find", "exact", "solution", "symbolic", "form", "even", "use", "dft", "consider", "each", "block", "separately", "instead", "we", "use", "nonlinear", "solver", "float", "point", "value", "we", "ensure", "differ", "from", "more", "than", "10", "12", "floating-point", "eigenvalue", "routine", "-rrb-", "note", "process", "offline", "have", "impact", "speed", "implementation", "we", "modify", "we", "rule", "use", "mask", "tuning", "-lsb-", "augsd?rfer", "et", "al.", "2006", "-rsb-", "adapt", "setting", "where", "subdivision", "step", "factorize", "separate", "stage", "we", "use", "same", "multiplier", "refine", "smooth", "stage", "extraordinary", "vertex", "can", "make", "contribution", "vertex", "three", "different", "position", "each", "which", "use", "separate", "multiplier", "new", "extraordinary", "vertex", "edge-connected", "vertex", "adjacent", "face", "-lrb-", "-rrb-", "which", "position", "which", "be", "face-connected", "subdivision", "step", "eigenvector", "stable", "possible", "take", "solution", "zero", "frequency", "block", "we", "able", "use", "solve", "Figure", "Table", "show", "result", "solution", "degree", "valency", "up", "20", "full", "table", "include", "auxiliary", "material", "valency", "we", "can", "use", "method", "describe", "above", "solve", "exactly", "same", "way", "we", "try", "satisfy", "however", "worse", "some", "degree", "bound", "curvature", "solution", "all", "we", "therefore", "need", "treat", "valency", "case", "separately", "instead", "use", "negative", "weight", "contribution", "from", "extraordinary", "vertex", "its", "successor", "we", "can", "instead", "shrink", "increase", "number", "point", "which", "influence", "extraordinary", "we", "modification", "introduce", "additional", "final", "smoothing", "stage", "affect", "only", "3-valent", "vertex", "-lrb-", "figure", "10", "-rrb-", "we", "also", "want", "therefore", "take", "vertex", "position", "which", "be", "faceconnect", "extraordinary", "point", "subdivision", "step", "uniform", "case", "therefore", "lie", "corner", "two", "ring", "surround", "extraordinary", "point", "we", "also", "use", "vertex", "connect", "extraordinary", "point", "edge", "position", "3-valent", "extraordinary", "point", "position", "new", "point", "give", "final", "smoothing", "stage", "allow", "we", "solve", "use", "same", "numerical", "solver", "vary", "instead", "-lrb-", "see", "Table", "-rrb-", "here", "product", "over", "every", "stage", "normalize", "weight", "contribution", "from", "extraordinary", "point", "its", "successor", "we", "use", "retain", "property", "point", "only", "modify", "knot", "insert", "nearby", "knot", "insert", "domain", "extraordinary", "point?s", "basis", "function", "give", "require", "every", "affine", "combination", "we", "univariate", "knot", "insertion", "algorithm", "use", "non-negative", "weight", "therefore", "we", "scheme", "hold", "convex", "hull", "property", "solve", "we", "find", "six", "degree", "where", "range", "from", "13", "result", "value", "give", "Table", "inclusion", "additional", "smoothing", "stage", "have", "relatively", "little", "effect", "position", "extraordinary", "point", "sure", "therefore", "we", "set", "all", "useful", "simplification", "achieve", "give", "uniform", "knot", "spacing", "value", "scale", "contribution", "from", "3-valent", "point", "successor", "so", "total", "unnormalized", "weight", "same", "regular", "4-valent", "case", "summary", "we", "have", "now", "modify", "general", "degree", "non-uniform", "subdivision", "scheme", "have", "bound", "curvature", "all", "degree", "valency", "-lsb-", "which", "-rsb-", "should", "cover", "all", "-lsb-", "-rsb-", "we", "can", "do", "nurb", "Figure", "Table", "show", "example", "range", "degree", "different", "knot", "interval", "Karciauskas", "et", "al.", "-lsb-", "2004", "-rsb-", "note", "bound", "curvature", "scheme", "can", "suffer", "from", "lack", "fairness", "effect", "seem", "visible", "degree", "surface", "Table", "since", "reflection", "line", "smooth", "Catmull-Clark", "surface", "same", "datum", "fact", "we", "believe", "even", "completely", "uniform", "case", "degree", "surface", "interesting", "alternative", "Catmull-Clark", "around", "point", "high", "valency", "subdivision", "surface", "typically", "suffer", "from", "poor", "shape", "-lrb-", "figure", "12", "-rrb-", "we", "method", "produce", "much", "smoother", "shape", "even", "low", "degree", "compare", "scheme", "have", "divergent", "curvature", "however", "we", "primarily", "interested", "behavior", "limit", "surface", "-lrb-", "make", "up", "b-spline", "patch", "-rrb-", "rather", "than", "control", "mesh", "limit", "surface", "important", "CAD", "application", "we", "have", "previously", "introduction", "subdivision", "surface", "which", "have", "full", "capability", "NURBS", "possible", "end", "user", "need", "longer", "than", "one", "we", "have", "present", "affine", "combination", "use", "bound", "curvature", "valency", "-lrb-", "section", "7.2", "-rrb-", "method", "use", "create", "uniform", "knot", "spacing", "-lrb-", "section", "-rrb-" ],
  "content" : "We present a new subdivision framework that is a true superset of NURBS at odd degrees. Reif [1996] showed that a stationary C2 scheme and Reif [1998] presented constructions which achieve this lower bound. The rules for this scheme generalize the averaging algorithm described by Lane and Riesenfeld [1980] for uniform B-spline subdivision. By using a sequence of smoothing stages, the scheme avoids the problems arising from the widening influence of a point as degree increases. Around the same time, subdivision surfaces were developed which generalize non-uniform (but fixed degree) B-spline surfaces. The tensor product construction for NURBS means that the same knot Sederberg et al. [1998] presented surfaces which relax this property. Their scheme allows a separate knot spacing to be attached to every edge in a control mesh. M?ller et al. [2006] developed a scheme which could additionally provide the position of a given point on the limit surface. brought the surfaces into equivalence with bicubic NURBS, in the absence of extraordinary points and ?T-junctions?. There are therefore previous schemes that are true supersets of bicubic NURBS, and previous schemes of arbitrary degree, but no previous scheme that combines these ? a superset of NURBS at arbitrary degree. by breaking each subdivision step into one ?refine? and several ?smoothing? stages. We need to handle non-uniform knot vectors, however, and are therefore unable to use the Lane and Riesenfeld [1980] algorithm. Instead, we generalize a non-uniform analogue, which we review in Section 4. We make the same restriction as Sederberg et al. [2003]: that each quadrilateral face must have equal knot spacing on opposite edges (as is the case with NURBS). We also restrict the control mesh to contain only quadrilateral faces (again, as with NURBS), but our rules must still allow for extraordinary vertices. We discuss the generalization that makes this possible in Section 5. The resulting subdivision framework achieves our objective of adding extraordinary points to NURBS of arbitrary odd degree. not at all. In extraordinary regions, changing the sequence of knot insertions can change the limit surface, so it is important to resolve 6, with an algorithm that first subdivides only large knot intervals until all the intervals are approximately the same size. This avoids problems which occur around extraordinary points if there is a large disparity between neighboring knot intervals. We use further subdivision steps to create a region of uniformity around extraordinary points, so that continuity and curvature variation in these regions is determined by uniform, rather than non-uniform, rules. In Section 7, we use eigenanalysis to tune the uniform rules so that curvature is stable under the subdivision process, instead of increasing to infinity or collapsing to zero. The same bounded curvature hyperbolic shapes in the limit surface, as neither shape dominates the other. It proves more difficult to satisfy the bounded curvature conditions around vertices of valency 3; we found it necessary to introduce an additional smoothing stage to handle this case. With this modification, our method has bounded curvature for all valencies at arbitrarily high degrees, and maintains the convex hull property (by taking only convex combinations) up to degree 13. As our method is built on NURBS, the subdivision rules for regular regions, whatever the degree, are derived from B-spline knot insertion. We can find these rules using a number of different ap- and the Oslo algorithm [Cohen et al. 1980]. All knot insertion algorithms give the same result but as degree increases, each point has a widening influence on points in the subdivided control polygon. uration of extraordinary points in the control mesh. The number of cases to consider grows exponentially with the influence of a point, which grows quadratically with degree. Therefore using existing knot insertion rules directly is not a feasible option for high degrees. Instead we need a knot insertion algorithm that uses a series of local computations which overlap, in the same way as the Lane and Riesenfeld [1980] algorithm. No matter how high the degree, the [2009] describe a univariate non-uniform algorithm which works in this way, but it is difficult to generalize to surfaces because of asymmetry. We developed a symmetric approach [Cashman et al. 2009], which we use here. followed by d/2 smoothing stages, where d, which is odd, is the degree. We use ? to denote the current stage. At each smoothing stage we consider each point in turn, with the two knots which are a distance ? away in the subdivided knot vector on either side. If these knots need to be inserted, then the algorithm uses stage ? to introduce them into the polar form (blossom) [Ramshaw 1989] of the relevant point. This process inserts 0, 1, or 2 knots into the polar form of each point at each stage. Cashman et al. [2009] give the required affine combinations and implementation details for the curve case. on a single point as shown in Figure 2 , although either (or both) of the weights a and c may be 0. Figure 3 shows that we can consider the same smoothing operation one edge at a time, which forms the foundation of our method for the surface case. To generalize the curve case to surfaces with extraordinary points, we calculate the affine combinations of refine and smooth stages one face at a time. The weights used in the affine combinations are defined using the tensor product of univariate knot insertion when control mesh, each smoothing stage calculates weights in the four faces surrounding a vertex ( Figure 4 ). These weights combine to give the tensor product of a smoothing stage in the form shown in Figure 2 , as required for NURBS knot insertion. 5.1 Introducing extraordinary points Like Sederberg et al. [1998], we associate a knot spacing with each edge of a control mesh. However, we require: ? that all faces are quadrilateral, and ? that knot spacings on opposite edges of a face are equal. spacings are defined for a whole strip of quadrilateral faces rather than for a single edge. Both conditions, of course, are properties of NURBS control meshes. In a mesh where these conditions hold, each face has two associated strips of quadrilateral faces, one in each of the two directions ( Figure 5 ). We use these strips to build local knot vectors for each face. In a mesh containing extraordinary points, a smoothing stage may use different knot vectors for each face surrounding a vertex. The refine stage is also computed one face at a time. Here we\n        face case, the new vertex position is given by the tensor product of univariate contributions are split into four: two on each side of the edge. Cashman et al. [2009] give the univariate rules and Figure 6 shows an example of how these are applied to a bivariate case. Section 7 describes our modifications for bounded curvature, which by an additional value. There is a separate multiplier for contributions from an extraordinary vertex to its successor, ? n d , to adjacent vertices, ? n d , and to vertices across a diagonal, ? n d . The same value is used in every refine and smoothing stage, and is determined by the valency of the extraordinary point and the degree of the surface. Valency 3 is difficult (see Section 7.2) and requires an extra smoothing step to achieve bounded curvature while maintaining the convex hull property. To maintain affine invariance, the weights in every affine combina- by dividing by the sum of contributing weights. This is necessary at extraordinary points, since a vertex of valency n receives 4n contributions instead of 16. The multipliers we use for bounded curvature make it necessary to normalize every affine combination that has a contribution from an extraordinary point. Normalization is sometimes necessary along the rays which emanate from extraor- than one extraordinary corner, without special cases. This strategy allows us to create non-uniform subdivision surfaces at arbitrarily high degrees. To create a true superset of NURBS, all that remains is to make the surfaces rational, which is straightforward [Sederberg et al. 1998]: rational control points are projected into R 4 , subdivided, and then projected back into R 3 . Every face has a local knot vector in two directions, which we can construct by following a strip of quadrilateral faces. For the shaded face, knot spacings in the blue direction are {k 1 , k 2 , k 3 , k 4 , k 5 } and in the red direction are {k 6 , k 7 , k 8 , k 9 , k 10 }. This example collects knot vectors at the length required for subdivision at degree 5. The knot insertion algorithm therefore introduces points , along the subdivided interval, and we show the unnormalized weights used to form the central point . The fractions that involve k i are from the curve case, the factors of one half are because we treat each side of each edge separately, and the multiplier, ? 5 3 , is required to get bounded curvature in the bivariate case, as explained in Section 7. We have now achieved our objective: NURBS of odd degree with for a large knot interval, adjacent to a high-valency point, to be invisible to faces ?hidden behind? the point. We find that this can cause folds in the limit surface if knots are inserted na?vely. Of course, in regular regions, as with NURBS, the sequence of knot insertions does not alter the limit surface. The same property does not apply around extraordinary points, so the sequence in which knots are inserted is important. In this section we describe our Our univariate algorithm [Cashman et al. 2009] is not constrained to subdivide every interval, so we can regularize knot spacings by subdividing large intervals first. Our regularization condition is that no knot interval is twice (or more) as large as any other. Given the complete set of knot intervals k = {k i }, we establish the minimum non-zero interval ? = min({k i : k i > 0}). If max(k) ? 2?, we use a limited subdivision step that inserts knots only into intervals which are 2? or greater. We subdivide each interval at its midpoint, so a total of log 2 (max(k)/?) such steps is required to achieve our regularization condition. This strategy avoids undesirable folds in the surface at the scale of the first subdivision step. Once max(k) < 2?, we address the subdivision steps to insert knots uniformly around extraordinary points, while subdividing other intervals at their midpoint. Doing so creates a uniform region with a stationary subdivision matrix. We are therefore able to apply eigenanalysis to guarantee C1 continuity (see the Appendix). We need at most two steps before every extraordinary point is surrounded by one layer of evenly spaced knots. Consider the simplest n mesh. Let the knot intervals surrounding this point be k 1 to k n . We insert a knot into each interval k i , creating uniform spacing at a distance min({k 1 , . . . , k n })/2 away from the extraordinary point. In the general case, we have multiple extraordinary points in an arbitrary configuration. Figure 7 shows that the uniform knot insertion for one extraordinary point may impact on another. In fact, extraordinary points with emanating rays which are shared over any in order to achieve uniform knot spacing ( Figure 8 ). We can define a set of equivalence classes for extraordinary points connected in this way, and calculate the membership of the classes in a single pass through points in the mesh. To achieve this, our implementation uses knot interval objects that hold a reference to an adjacent extraordinary point, if there is one, on either side. A disjoint set data structure [Galil and Italiano 1991], with associated ?find? and ?union? operations, is then used to join any classes which appear on the same side of a knot interval. The equivalence classes are this can be at the coarsest level. Once calculated, the equivalence classes can be used to insert knots However, Figure 7 also shows that two or more extraordinary points, on either side of a knot interval, might make conflicting first subdivision step to insert a knot between the two positions. As the knot interval is then split, there can be no conflict in the second subdivision step. in at most two steps. In summary, our algorithm for establishing uniform spacing is: ? for each equivalence class, establish the minimum from the knot intervals that surround extraordinary points within it ? for each extraordinary point, request to insert knots into sur- ? of the requested positions, if there are insertion requests. Note that the method described here cannot apply if there is a multiple knot (i.e. a zero knot interval) adjacent to an extraordinary point. In this case, we can still proceed with subdivision but we are unable to create uniform knot spacing, which means that we cannot prove C1 continuity in the presence of zero knot intervals. Where uniform spacing is achievable, additional subdivision steps a growing region of uniformity around each extraordinary point, so the behavior of the limit surface at these points is determined by uniform rules. Therefore Section 7 (which modifies the uniform case for bounded curvature) and the Appendix (which discusses our proof that the uniform rules create C1 surfaces) will apply to any non-uniform configuration with non-zero knot intervals adjacent to extraordinary points. Without multiple knots, degree d B-splines (including the regular regions of our scheme) have d ? 1 continuous derivatives. At extraordinary points, however, it has proved difficult for stationary subdivision to provide anything more than continuity of the first derivative. There are a range of possible behaviors for the second derivative [Sabin et al. 2003], which we can analyze using an eigen- ? and write ? 0 and ? 2 for the eigenvalues of the components which generalize an elliptic and a hyperbolic paraboloid, respectively. As the subdivision rules we consider are rotationally symmetric, the  Reif [1996] shows that no stationary subdivision scheme based on bicubic pieces can have non-zero curvature continuity at extraordinary points. It is possible, however, to satisfy bounded curvature, where ? 2 = ? 0 = ? 2 . Therefore the extraordinary region is not dominated by either the elliptic or hyper- by the curvatures appearing in the spline rings of those components [Peters and Reif 2008]. In contrast, the Catmull-Clark scheme [Catmull and Clark 1978] has ? 2 < ? 0 < ? 2 at valencies greater than Sabin [1991] presents a variant of Catmull-Clark with bounded curvature. If the subdivision matrix is not required to be stationary, then curvature continuity is easier to achieve. non-stationary rules that result in a local blend between the limit around extraordinary points. However we have chosen to maintain the simplicity of stationary rules for uniform configurations. We now show how to modify our rules to give bounded curvature at arbitrarily high degree. For uniform knot vectors at each degree and valency, we compute the Discrete Fourier Transform (DFT) of the subdivision matrix for the rules described in Section 5. It therefore becomes impractical to find an exact solution in symbolic form, even using the DFT and considering each block separately. Instead we use a nonlinear solver on floating point values. We ensure that ? 2 differs from ? 0 and ? 2 by no more than 10 ?12 with floating-point eigenvalue routines). Note that this process is offline, and has no impact on the speed of an implementation. We modify our rules using mask tuning [Augsd?rfer et al. 2006], adapted for the setting where a subdivision step is factorized into separate stages. We use the same multipliers for the refine and smoothing stages. An extraordinary vertex can make contributions to vertices in three different positions, each of which uses a separate multiplier: ? ? n d , for the new extraordinary vertex, ? ? n d , for edge-connected vertices, ? ? n d adjacent faces. f i ( ) which are in the positions which were face-connected at the start of the subdivision step. ? ? 2 = ? 2 ? ?. eigenvector as stable as possible. Taking these solutions into the zero frequency block, we are then able to use ? to solve ? 2 = ? 0 . Figure 9 and Table 1 show the resulting solutions for degrees 3 to 9 and valencies up to 20. A full table is included as auxiliary material. At valency 3, we can use the method described above to solve ? 2 = ? 2 in exactly the same way. If we try to satisfy ? 2 = ? 0 , however, ? 3 d worse, there are some degrees with no bounded curvature solution at all. We therefore need to treat the valency 3 case separately. Instead of using a negative weight for the contribution from an extraordinary vertex to its successor, we can instead shrink ? 0 by increasing the number of points which influence the extraordinary Our modification introduces an additional, final smoothing stage, affecting only 3-valent vertices ( Figure 10 ). We also want to is therefore to take f i , the vertices in the positions which were faceconnected to the extraordinary point at the start of the subdivision step. In the uniform case, the f i therefore lie at the corners of the two rings surrounding an extraordinary point. We also use e i , the vertices connected to the extraordinary point by edges, and the position of the 3-valent extraordinary point, v. The position of the new point, v, is given by This final smoothing stage allows us to solve ? 2 = ? 0 using the same numerical solver, but varying ? d instead of ? 3 d (see Table 2 ). Here ? is the product, over every stage, of the normalized weight in the contribution from the extraordinary point to its successor. We use ? to retain the property that a point is only modified if knots are inserted nearby. If no knots are inserted into the domain of the extraordinary point?s basis function, then ? = 1 gives v = v as required. Every affine combination in our univariate knot insertion algorithm uses non-negative weights. Therefore 0 ? ? ? 1, ? 0 ? ? d ? 1, our scheme holds the convex hull property. In solving ? 2 = ? 0 , we find 0 ? ? d ? 1 for the six degrees where d ranges from 3 to 13. The resulting values are given in Table 2 . With the inclusion of an additional smoothing stage, ? 3 d has relatively little effect, as the position of the extraordinary point is sure that ? 3 ? 0, and therefore we set ? 3 d = 3 4 for all d as a useful simplification that achieves this. Given uniform knot spacing, this value scales contributions from 3-valent points to their successors so that the total unnormalized weight is the same as in the regular, 4-valent case. In summary, we have now modified general degree, non-uniform subdivision schemes to have bounded curvature at all degrees and valencies. [which] should cover all [that] we can do with NURBS. Figure 1 and Table 3 show examples at a range of degrees and different knot intervals. Karciauskas et al. [2004] note that bounded curvature schemes can suffer from a lack of fairness. This effect seems to be visible in the degree 3 surfaces of Table 3 , since the reflection lines are not as smooth as a Catmull-Clark surface on the same data. In fact, we believe that even in the completely uniform case, the degree 5 surfaces are an interesting alternative to Catmull-Clark. Around points with high valency, subdivision surfaces typically suffer from poor shape ( Figure 12 ). Our method produces a much smoother shape, even at low degree, compared with schemes that have divergent curvature. However, we are primarily interested in the behavior of the limit surface (made up of B-spline patches) rather than the control mesh, as it is the limit surface that is important for CAD applications. We have previously With the introduction of subdivision surfaces which have the full capabilities of NURBS, it is possible that end users need no longer than the ones we have presented: the affine combination used for bounded curvature at valency 3 (Section 7.2), and the method used for creating uniform knot spacing (Section 6).",
  "resources" : [ ]
}