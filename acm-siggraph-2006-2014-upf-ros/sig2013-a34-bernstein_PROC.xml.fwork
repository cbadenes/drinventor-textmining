{
  "uri" : "sig2013-a34-bernstein_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2013/a34-bernstein_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Putting Holes in Holey Geometry: Topology Change for Arbitrary Surfaces",
    "published" : "2013",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Gilbert Louis-Bernstein",
      "name" : "Gilbert Louis",
      "surname" : "Bernstein"
    }, {
      "uri" : "http://drinventor/Chris-Wojtan",
      "name" : "Chris",
      "surname" : "Wojtan"
    } ]
  },
  "bagOfWords" : [ "most", "triangle", "mesh", "practice", "do", "exhibit", "desirable", "geometric", "property", "so", "we", "develop", "solution", "independent", "standard", "assumption", "robust", "geometric", "error", "cr", "category", "i.", "3.7", "-lsb-", "Computer", "Graphics", "-rsb-", "computational", "geometry", "object", "modeling?geometric", "algorithm", "language", "system", "keyword", "topology", "intersection", "deformation", "sculpt", "3d", "modeling", "non-manifold", "geometry", "instance", "traditional", "cad-derived", "modeling", "software", "like", "maya", "-lsb-", "2013b", "-rsb-", "3d", "max", "-lsb-", "2013a", "-rsb-", "special", "tool", "allow", "user", "directly", "edit", "connectivity", "polygon", "comprise", "mesh", "contrast", "note", "cad-like", "sketch-based", "modeler", "require", "specialized", "tool", "topology", "change", "have", "make", "choice", "incorporate", "topology", "change", "incidentally", "number", "method", "topology", "change", "primarily", "use", "simulation", "literature", "available", "we", "-lsb-", "Wojtan", "et", "al.", "2009", "Brochu", "Bridson", "2009", "-rsb-", "unfortunately", "method", "all", "require", "surface", "represent", "solid", "object?one", "can", "faithfully", "represent", "voxel", "grid", "one", "simple", "example", "height-mapped", "planar", "grid", "quadrilateral", "general", "character", "model", "other", "object", "build", "function", "3d", "application", "where", "skinning", "animation", "visual", "appearance", "trump", "other", "concern", "like", "solidity", "physical", "manufacturability", "like", "facade", "set", "spaghetti", "western", "model", "have", "be", "tailor", "tell", "story", "compound", "problem", "most", "exist", "program", "do", "guarantee", "export", "model", "solid", "simple", "idea?using", "collision", "parity", "drive", "topology", "change", "work", "well", "solid", "surface", "many", "non-solid", "surface", "well", "rule", "out", "possibility", "any", "isolate", "vertex", "dangling", "edge", "do", "allow", "variety", "interesting", "mesh", "type", "base", "classification", "every", "solid", "mesh", "have", "canonical", "surface", "normal", "field", "normal", "point", "outward", "most", "method", "available", "today", "compute", "topology", "change", "frame", "problem", "context", "mesh-repair", "-lsb-", "attene", "et", "al.", "2013", "Ju", "2009", "-rsb-", "we", "believe", "dynamesh", "feature", "add", "zbrush", "-lsb-", "2013b", "-rsb-", "late", "2012", "use", "similar", "kind", "volumetric", "method", "because", "method", "-lrb-", "-rrb-", "force", "all", "surface", "represent", "solid", "-lrb-", "-rrb-", "ignore", "motion", "datum", "allow", "inference", "what", "have", "change", "between", "two", "frame", "unable", "handle", "arbitrary", "mesh", "-lrb-", "see", "comic", "figure", "-rrb-", "method", "can", "disambiguate", "symmetric", "geometric", "arrangement", "-lrb-", "e.g.", "cylinder", "penetrate", "ground", "plane", "figure", "-rrb-", "because", "only", "inspect", "final", "position", "mesh", "full", "motion", "more", "similar", "we", "approach", "Brochu", "Bridson", "-lsb-", "2009", "-rsb-", "St", "anculescu", "et", "al.", "-lsb-", "2011", "-rsb-", "make", "use", "motion", "datum", "furthermore", "method", "closely", "interweave", "local", "surface", "remesh", "topology", "change", "currently", "artist", "tend", "directly", "edit", "connectivity", "mesh", "make", "use", "boolean", "operation", "-lrb-", "aka", "however", "boolean", "operation", "only", "define", "close", "orientable", "surface", "-lsb-", "Requicha", "1977", "-rsb-", "when", "work", "open", "surface", "artist", "force", "directly", "edit", "connectivity", "other", "option", "available", "they", "perhaps", "only", "exception", "formulation", "graph", "partitioning", "specialize", "serve", "form", "error", "correction", "we", "stream", "triangle", "over", "structure", "identify", "potential", "collision", "rather", "than", "attempt", "maintain", "acceleration", "structure", "between", "frame", "we", "use", "fast", "median-split", "top-down", "divide-and-conquer", "build", "inspire", "work", "real-time", "ray", "trace", "-lsb-", "Wald", "2007", "-rsb-", "standard", "robustness", "method", "-lrb-", "3.3", "-rrb-", "restricted", "handle", "rational", "arithmetic", "collision", "detection", "require", "cubic", "root", "finding", "Brochu", "et", "al.", "-lsb-", "2012", "-rsb-", "recently", "give", "very", "clever", "solution", "problem", "formulate", "collision", "detection", "series", "predicate", "rely", "solely", "rational", "arithmetic", "each", "triple", "test", "see", "whether", "three", "triangle", "intersect", "point", "because", "degenerate", "case", "measure-zero", "event", "definition", "can", "eliminate", "through", "perturbation", "geometry", "-lsb-", "Seidel", "1994", "-rsb-", "error", "various", "sort", "source", "may", "result", "collision", "detection", "produce", "corrupted", "parity", "field", "some", "error", "may", "due", "numeric", "inaccuracy", "-lrb-", "3.2", "-rrb-", "while", "other", "may", "due", "aberration", "-lrb-", "e.g.", "hole", "-rrb-", "mesh", "itself", "connected", "component", "result", "graph", "form", "connected", "component", "surface", "above", "formulation", "value", "critical", "3.3", "-rrb-", "help", "coerce", "more", "desirable", "behavior", "each", "vertex", "round", "down", "-lrb-", "odd", "-rrb-", "otherwise", "round", "up", "-lrb-", "even", "-rrb-", "glue", "vertex", "edge", "user", "decide", "against", "take", "action", "be", "contemplate", "return", "mouse", "position", "which", "drag", "begin", "effectively", "cancel", "action", "Collision", "parity", "tend", "produce", "similar", "result", "compare", "method", "which", "require", "solid", "mesh", "can", "lead", "preservation", "occluded", "surface", "component", "whose", "presence", "user", "unaware", "closing", "we", "have", "provide", "method", "compute", "topological", "change", "triangle", "mesh", "subject", "typical", "restriction", "common", "among", "most", "geometric", "algorithm", "way", "comparison", "sketch-based", "modeling", "program", "must", "incorporate", "special", "new", "gesture", "type", "which", "user", "must", "learn", "how", "execute", "order", "introduce", "tunnel", "handle", "exist", "surface" ],
  "content" : "Most triangle meshes in practice do not exhibit desirable geometric properties, so we develop a solution that is independent of standard assumptions and robust to geometric errors. CR Categories: I.3.7 [Computer Graphics]: Computational Geometry and Object Modeling?Geometric algorithms, languages, and systems; Keywords: topology, intersections, deformations, sculpting, 3d modeling, non-manifold geometry For instance, in traditional CAD-derived modeling software like Maya [2013b], or 3DS Max [2013a], special tools allow the user to directly edit the connectivity of the polygons comprising the mesh. In contrast, note that CAD-like and sketch-based modelers require specialized tools for topology change. Having made the choice to incorporate topology change incidentally, a number of methods for topology change primarily used in the simulation literature are available to us [Wojtan et al. 2009; Brochu and Bridson 2009]. Unfortunately, these methods all require that the surface represents a solid object?one that can be faithfully represented by a voxel grid. One simple example is a height-mapped or planar grid of quadrilaterals. In general, character models and other objects are built to function in 3d applications where skinning, animation, and visual appearance trump other concerns like solidity or physical manufacturability. Like a facade on the set of a spaghetti western, these models have been tailored to tell stories. Compounding this problem, most existing programs do not guarantee that exported models are ?solid?. This simple idea?using collision parity to drive topology change? works well for solid surfaces and many non-solid surfaces as well. This rules out the possibility of any isolated vertices or dangling edges, but does allow for a variety of interesting mesh types. Based on this classification, every solid mesh has a canonical surface normal field with normals pointing outward. Most methods available today for computing topology changes frame the problem in the context of mesh-repair [Attene et al. 2013; Ju 2009]. We believe that the dynamesh feature added to ZBrush [2013b] in late 2012 uses a similar kind of volumetric method. Because these methods (a) force all surfaces to represent solids, and (b) ignore motion data allowing for the inference of what has changed between two frames, they are unable to handle arbitrary meshes (see comic figure). These methods cannot disambiguate symmetric geometric arrangements (e.g. a cylinder penetrating a ground plane, figure 4 ) because they only inspect the final position of the mesh, not the full motion. More similar to our approach, Brochu & Bridson [2009], and St anculescu et al. [2011] make use of motion data. Furthermore, these methods closely interweave local surface remeshing with topology change. Currently, artists tend to directly edit the connectivity of their meshes, or make use of Boolean operations (aka. However, Boolean operations are only defined on closed, orientable surfaces [Requicha 1977]. When working with open surfaces, artists are forced to directly edit the connectivity ? no other options are available to them. Perhaps the only exception is a formulation of graph partitioning specialized to serve as a form of error correction. We then stream the triangles over this structure to identify potential collisions. Rather than attempt to maintain this acceleration structure between frames, we use a fast, median-split, top-down, divide-and-conquer build inspired by work on real-time ray tracing [Wald 2007]. Standard robustness methods (?3.3) are restricted to handling rational arithmetic, but collision detection requires cubic root finding. Brochu et al. [2012] recently gave a very clever solution to this problem, formulating collision detection as a series of predicates relying solely on rational arithmetic. Each triple is tested to see whether the three triangles intersect in a point. Because degenerate cases are measure-zero events, by definition they can be eliminated through perturbation of the geometry [Seidel 1994]. ?Errors? of various sorts and sources may result in collision detection producing a corrupted parity field. Some of these errors may be due to numeric inaccuracies (?3.2) while others may be due to aberrations (e.g. holes) in the mesh itself. The connected components of the resulting graph form the connected components of the surface. In the above formulation, the value of ? is critical. 3.3) helps to coerce more desirable behavior. Each vertex with  x i < x 0 will be rounded down to ?1 (odd) and otherwise will be rounded up to 1 (even). Glue vertices and edges. If the  user decides against taking the action they were contemplating, returning the mouse to the position at which the drag began effectively cancels the action. Collision parity tends to produce similar results compared to methods which require solid meshes. This can lead to the preservation of occluded surface components whose presence the user is unaware of. In closing, we have provided a method for computing topological changes on triangle meshes that are not subject to the typical restrictions common among most geometric algorithms. By way of comparison, sketch-based modeling programs must incorporate special new gesture types, which the user must then learn how to execute in order to  introduce tunnels or handles in an existing surface.",
  "resources" : [ ]
}