{
  "uri" : "sig2010-a39-martin_PROC.xml",
  "url" : "/Users/cbadenes/Documents/OEG/Projects/DrInventor/datasets/acm-siggraph-2006-2014-upf/sig2010/a39-martin_PROC.xml",
  "source" : {
    "name" : "SIGGRAPH",
    "uri" : "http://drinventor/SIGGRAPH",
    "url" : "http://drinventor/SIGGRAPH",
    "protocol" : "http"
  },
  "metainformation" : {
    "title" : "Unified Simulation of Elastic Rods, Shells, and Solids",
    "published" : "2010",
    "format" : "pdf",
    "language" : "en",
    "rights" : "GPLv2",
    "description" : "",
    "creators" : [ {
      "uri" : "http://drinventor/Sebastian-Martin",
      "name" : "Sebastian",
      "surname" : "Martin"
    }, {
      "uri" : "http://drinventor/Peter-Kaufmann",
      "name" : "Peter",
      "surname" : "Kaufmann"
    }, {
      "uri" : "http://drinventor/Mario-Botsch",
      "name" : "Mario",
      "surname" : "Botsch"
    }, {
      "uri" : "http://drinventor/Eitan-Grinspun",
      "name" : "Eitan",
      "surname" : "Grinspun"
    }, {
      "uri" : "http://drinventor/Markus H.-Gross",
      "name" : "Markus H.",
      "surname" : "Gross"
    } ]
  },
  "bagOfWords" : [ "we", "develop", "accurate", "unified", "treatment", "elastica", "follow", "method", "resultant-based", "formulation", "its", "logical", "extreme", "we", "derive", "higher-order", "integration", "rule", "elaston", "measure", "stretch", "shear", "bend", "twist", "along", "any", "axis", "theory", "accompany", "implementation", "do", "distinguish", "between", "form", "different", "dimension", "-lrb-", "solid", "shell", "rod", "-rrb-", "nor", "between", "manifold", "region", "non-manifold", "junction", "consequently", "single", "code", "accurately", "model", "diverse", "range", "elastoplastic", "behavior", "include", "buckling", "writhe", "cut", "merge", "emphasis", "convergence", "continuum", "set", "we", "apart", "from", "early", "unification", "effort", "elastic", "body", "take", "many", "form", "from", "long", "slender", "rod", "flat", "wide", "shell", "thick", "bulky", "solid", "specialization", "have", "open", "pandora?s", "box", "we", "must", "debug", "extend", "interface", "between", "multiple", "specialize", "code", "we", "struggle", "both", "software", "interface", "well", "mathematical", "physical", "model", "interface", "how", "do", "we", "model", "physics", "object", "do", "neatly", "fit", "one", "category", "junction", "example", "outside", "scope", "most", "specialize", "model", "treat", "afterthought", "some", "shape", "transition", "smoothly", "-lrb-", "either", "along", "spatial", "dimension", "evolve", "temporally", "-rrb-", "between", "one", "form", "another?must", "we", "make", "binary", "decision", "categorize", "they", "two", "specialize", "method", "use", "different", "geometric", "representation", "-lrb-", "point", "triangle", "tetrahedron", "-rrb-", "question", "how", "transition", "doubly", "complicate", "can", "we", "efficiently", "simply", "simulate", "spectrum", "form", "unify", "computational", "model", "still", "get", "physics", "right", "we", "argue", "simple", "unified", "treatment", "span", "rod", "shell", "solid", "possible", "desirable", "beyond", "theoretical", "appeal", "convergence", "keep", "downstream", "simulation", "result", "consistent", "under", "upstream", "resampling", "refinement", "geometry", "convergence", "also", "prerequisite", "smooth", "adaptive", "simulation", "free", "pop", "artifact", "we", "work", "we", "choose", "generalize", "move", "least", "square", "-lrb-", "gml", "-rrb-", "meshless", "generalization", "hermite", "interpolation", "three", "dimension", "we", "observe", "excellent", "agreement", "established", "benchmark", "rod", "shell", "solid", "consequence", "theoreticallygrounded", "development", "elaston", "exposition", "mirror", "mechanic", "literature", "where", "three", "form", "each", "analyze", "individually", "-lsb-", "Malvern", "1969", "-rsb-", "challenge", "arise", "from", "specialization", "spur", "researcher", "explore", "technique", "tie", "together", "multiple", "model", "finite", "element", "-lrb-", "FE", "-rrb-", "package", "abaqus", "sofea", "encapsulate", "plethora", "diverse", "element", "technique", "often", "use", "dynamic", "method", "dispatch", "provide", "unify", "application", "interface", "distinct", "underlie", "code", "-lsb-", "Krysl", "2005", "-rsb-", "additional", "specialized", "code", "require", "capture", "physics", "interaction", "between", "differ", "model", "however", "gluing", "strategy", "do", "lighten", "burden", "maintain", "multiple", "code", "-lrb-", "rather", "introduce", "additional", "code", "-rrb-", "we", "inspire", "goal", "generality", "simplicity", "depart", "additionally", "ask", "convergent", "approximation", "continuum", "formulation", "cosserat", "point", "-lsb-", "Rubin", "1985", "-rsb-", "model", "small", "elastic", "volume", "equip", "its", "own", "mass", "dof", "elastic", "energy", "Cosserat", "point", "must", "glue", "together", "explicitly", "kinematic", "constraint", "since", "elaston", "quadrature", "point", "embed", "separately-defined", "deformation", "field", "formulation", "glue", "necessary", "deformation", "measure", "via", "linear", "cauchy", "strain", "where", "local", "frame", "undeformed", "deform", "configuration", "respectively", "we", "consider", "volumetric", "surface-like", "solid", "whose", "extent", "along", "-lrb-", "tangent", "direction", "-rrb-", "much", "greater", "than", "along", "-lrb-", "normal", "direction", "-rrb-", "we", "arrive", "special", "case", "thin", "shell", "case", "na?ve", "discretization", "use", "linear", "quadratic", "tetrahedral", "fe", "lead", "arbitrarily", "poor", "numerical", "conditioning", "slow", "convergence", "smooth", "limit", "-lrb-", "lock", "-rrb-", "wastefully", "allocate", "dof", "along", "normal", "direction", "-lsb-", "Yang", "et", "al.", "2000", "-rsb-", "assume", "shell", "sufficiently", "thin", "normal", "direction", "we", "expand", "first-order", "position", "displacement", "we", "do", "invoke", "Kirchhoff-Love", "assumption", "difference", "twist", "between", "deform", "undeformed", "configuration", "can", "measure", ",12", ",3", ",12", ",3", "since", "energy", "expression", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "-lrb-", "-rrb-", "distinct", "do", "agree", "single", "unified", "implementation", "hypothetically", "we", "could", "try", "classify", "each", "region", "material", "domain", "solid", "shell", "rod", "both", "complicated", "unlikely", "effective", "manual", "classification", "would", "fail", "material", "drastically", "deform", "under", "cut", "plastic", "deformation", "automatic", "classification", "well-posed", "problem", "e.g.", "all", "shape", "can", "divide", "piece", "unambiguously", "solid", "shell", "rod", "basis", "function", "must", "twice", "differentiable", "order", "able", "measure", "bend", "strain", "however", "meshless", "case", "corotation", "method", "directly", "applicable", "since", "mass", "matrix", "have", "same", "sparsity", "structure", "stiffness", "matrix", "performance", "linear", "system", "solve", "during", "dynamic", "simulation", "influence", "compute", "mass", "matrix", "manner" ],
  "content" : "We develop an accurate, unified treatment of elastica. Following the method of resultant-based formulation to its logical extreme, we derive a higher-order integration rule, or elaston, measuring stretching, shearing, bending, and twisting along any axis. The theory and accompanying implementation do not distinguish between forms of different dimension (solids, shells, rods), nor between manifold regions and non-manifold junctions. Consequently, a single code accurately models a diverse range of elastoplastic behaviors, including buckling, writhing, cutting and merging. Emphasis on convergence to the continuum sets us apart from early unification efforts. Elastic bodies take many forms, from long and slender rods, to flat and wide shells, to thick and bulky solids. But this specialization has opened a Pandora?s box: we must debug, extend, and interface between multiple specialized codes. We struggle both with the software interface as well as with the mathematical, or physical model of the interface. And how do we model the physics of objects that do not neatly fit into one of the categories? Junctions, for example, are outside the scope of most specialized models, and are treated as an afterthought. Some shapes transition smoothly (either along their spatial dimension, or as they evolve temporally) between one form and another?must we make a binary decision in categorizing them? If two specialized methods use a different geometric representation (points, triangles, tetrahedra), the question of how to transition is doubly complicated. Can we efficiently and simply simulate a spectrum of forms with a unified computational model and still ?get the physics right? We argue that a simple, unified treatment spanning rods, shells, and solids is possible and desirable. Beyond theoretical appeal, convergence keeps downstream simulation results consistent under upstream resampling or refinement of geometry; convergence is also a prerequisite to smooth adaptive simulations free of popping artifacts. In our work, we choose generalized moving least squares (GMLS)?a meshless generalization of Hermite interpolation to three dimensions. We observe excellent agreement with established benchmarks for rods, shells, and solids, a consequence of the theoreticallygrounded development of elastons. The exposition mirrors the mechanics literature, where the three forms are each analyzed individually [Malvern 1969]. Challenges arising from specialization spur researchers to explore techniques that tie together multiple models. Finite element (FE) packages such as ABAQUS and SOFEA encapsulate a plethora of diverse elements and techniques, often using dynamic method dispatch to provide a unified application interface to distinct underlying codes [Krysl 2005]; additional specialized code is required to capture the physics of interactions between differing models. However, a gluing strategy does not lighten the burden of maintaining multiple codes (rather it introduces additional code). We are inspired by the goals of generality and simplicity, and depart by additionally asking for a convergent approximation of a continuum formulation. Cosserat points [Rubin 1985] model a small elastic volume equipped with its own mass, DOFs, and elastic energy. Cosserat points must be glued together explicitly by kinematic constraints; since elastons are quadrature points embedded in a separately-defined deformation field, no formulation of glue is necessary. The deformation is measured via the linear 3 ? 3 Cauchy strain where x ,i and x ,i are the local frames of the undeformed and deformed configuration, respectively. If we consider a volumetric surface-like solid whose extent along ? 1 and ? 2 (the ?tangent directions?) is much greater than along ? 3 (the ?normal direction?), we arrive at the special case of thin shells. In this case, a na?ve discretization using linear or quadratic tetrahedral FEs leads to arbitrarily poor numerical conditioning and slow convergence to the smooth limit (locking) and wastefully allocates DOFs along the normal direction [Yang et al. 2000]. Assuming the shell to be sufficiently thin in normal direction, we expand to first-order the positions and displacements: We do not invoke the Kirchhoff-Love assumption. The difference in twist between the deformed and undeformed configuration can be measured as x ,12 ? x ,3 ? x ,12 ? x ,3 . Since the energy expressions (3), (7), and (9) are distinct, they do not ?agree? on a single unified implementation. Hypothetically, we could try to classify each region of the material domain as solid, shell, or rod. This is both complicated and unlikely to be effective: manual classification would fail for materials that drastically deform under cutting or plastic deformation; automatic classification is not a well-posed problem, e.g., not all shapes can be divided into pieces that are unambiguously solids, shells, or rods. Basis functions must be twice differentiable in order to be able to measure bending strains. However, for the meshless case the corotation method is not directly applicable. Since the mass matrix has the same sparsity structure as the stiffness matrix, the performance of the linear system solve during the dynamic simulation is not influenced by computing the mass matrix in this manner.",
  "resources" : [ ]
}